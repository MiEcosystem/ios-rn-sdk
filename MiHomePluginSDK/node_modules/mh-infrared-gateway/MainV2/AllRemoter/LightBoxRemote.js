'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  Dimensions,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var NavigatorView = require('../../MainV2/ToolModel/NavigatorView');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;


var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);

class LightBoxVC extends React.Component {
  constructor(props, context) {
    super(props, context);
    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);
    
    this.state={
      did:deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      remoterID:this.props.remoterID,
      isShow:false,
      isOnline:false,
      allKeys:[],
    };
    this.enableExtendButton =false;
    
    var self = this;
    MHPluginSDK.getDevicePropertyFromMemCache(['isOnline'],(response)=>{

      self.isOnline== response.isOnline;
      self.setState({isOnline:response.isOnline});
    });
    console.log('--------LightBoxVC-this.props-------------'+JSON.stringify(this.state));
  }

  render(){

    return (
      <View style={styles.containerAll}>
        <MessageToast ref='toast'/>  
       
        <NormalExtendView isShow={this.state.isShow} 
          onPressButton={(event)=>this.onPressButton(event)} 
          onPressDissmissButton={(event)=>this.onPressDissmissButton(event)}
          dataSource ={this.deal_ExtendViewData(this.state.allKeys)} 
        />
        {
          (this.state.isOnline==true)?(this.onLine_statusView()):(this.offLine_statusView())
        }
        <View style={styles.contentBgView}>

          {console.log('------------------------  '+JSON.stringify(route.title))}
              <NavigatorView ref='navigator' title={route.title} />
              <View style={styles.bottomButtonView}>
                    <View style={styles.threeButtonView}>
                        <Button  title ={LocalizedStrings.match_ac_power} imageNormal="NewControllerImage/light_power_normal.png" imageHighlight="NewControllerImage/light_power_press.png" onPress={()=>{this.onPressButton('POWER')}} enabled={this.isButtonEnabled('POWER')}  textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View> 
                    <View style={styles.threeButtonView}>
                        <Button  title ={LocalizedStrings.ir_controller_power_text} imageNormal="NewControllerImage/light_light_normal.png" imageHighlight="NewControllerImage/light_light_press.png" onPress={()=>{this.onPressButton('POWER OFF')}} enabled={this.isButtonEnabled('POWER OFF')} textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>     
                    <View style={styles.threeButtonView}>
                        <Button  title ={LocalizedStrings.extra_key_text} imageNormal="NewControllerImage/light_extend_normal.png" imageHighlight="NewControllerImage/light_extend_press.png" onPress={()=>{this.onPressExtendButton('EXTENSION')}} enabled={this.isEnableExtendButton()} textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>              
              </View>
        </View>
      </View>
      );
  }

  onLine_statusView(status){

    const middleLeft = (screenWidth -120)/2;

    return(

      <View>
            <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
            source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/light_bg.png'}}
            />
            <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
            source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/light_font_bg_online.png'}}
            />
      </View>

    );
  }

  offLine_statusView(){
    const middleLeft = (screenWidth -120)/2;
    return(

      <View>
            <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
            source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/light_bg_offline.png'}}
            />
             <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
            source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/light_font_bg_offline.png'}}
            />
      </View>

    );
  }

  onPressButton(event) {

      this.refs.navigator.show();
      var key_id = undefined;
      this.state.allKeys.forEach(element => {
        
          if(element.name==event){
            key_id = element.id;
          }
      });
      console.log('key_id:'+key_id +'\n'+'event:'+event);

      if(key_id!=undefined){
      
        var self = this;
        var param  = {
          "did":this.state.did,
          controller_id:this.state.remoterID,
          "key_id": key_id
        };

        MIRequestServer.Post_SendkeyCode(param,
          function(response){
              if((response.code !=undefined) &&(response.code==0)){
                // self.refs.toast.showMessage(response.message);
              }
              
          },function(error){
              console.log('Post_SendkeyCode-error---'+JSON.stringify(error));
          });  
      }

  }

  isButtonEnabled(event) {

      var key_id = undefined;
      this.state.allKeys.forEach(element => {
          if(element.name==event){
            key_id = element.id;
          }
      });

      if(key_id!=undefined){
        return true;
      }else{
        return false;
      }
      
  }

  componentWillMount() {
     /*后期改成 controller_id */
     var param  = {"did": this.state.did};
     var self = this;
 
     MIRequestServer.Post_GetAllRemoterkey(param,
       function(response){
          
           if((response.result.keys)&&(response.result.keys!=undefined)){
             var allKeys = response.result.keys;
             self.setState({ allKeys:allKeys});
           }
 
       },function(error){
          self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
       });  
    
  }

  componentWillUnmount() {

  }

  deal_ExtendViewData(allKeys){

      var bindKeyArray =['POWER','POWER OFF',];
      var NewAllKeys = allKeys.slice(0);
      var deleteArray=[];
      NewAllKeys.forEach((element,index) => {
          var isEqual = false;
          var sourceName = element.name;

          for(let i=0;i<bindKeyArray.length;i++){
              var key = bindKeyArray[i];
              if(key ==sourceName ){
                isEqual = true; 
                deleteArray.push(element);
              }
          }
      }); 
      deleteArray.forEach((element) => {

        let index = NewAllKeys.indexOf(element);      
        NewAllKeys.splice(index,1);
      });

      if(NewAllKeys.length>0){
        this.enableExtendButton =true;
      }
      return NewAllKeys;  
  }

  isEnableExtendButton(){
    return this.enableExtendButton;
  }
  
  onPressExtendButton(){
    this.setState({isShow:true});    
  }

  onPressDissmissButton(){
    this.setState({isShow:false});
  }          

}


const sectionHeght =( screenHeight - NavigatorBarHeight -300)/3.0;
const sectionWidth=  screenWidth-20*2;
const ButtonViewWidth=  sectionWidth/3.0;
const bottomButtonViewMarginTop = screenHeight- 100-50;
const bottomButtonViewHeight = 100;
const bottomMarginTop = (screenHeight-NavigatorBarHeight)-(bottomButtonViewHeight)-(SafeBottomHeight)-(50);


var styles = StyleSheet.create({

  containerAll: {
    flex:1,
  },
  bottomButtonView:{
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    height:bottomButtonViewHeight,
    marginTop:bottomMarginTop,
  },
  threeButtonView:{
    flexDirection:'row',
    width:ButtonViewWidth,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
  },
  lightImageView:{
    flexDirection:'column',
    alignItems:'center',
    alignSelf:'center',
  },
  image:{

  },
  contentBgView:{
    marginTop:0,
    width:screenWidth,
    height:screenHeight,
    flexDirection:'column',
  },
  directionView:{
    marginTop:NavigatorBarHeight,
    backgroundColor:'rgb(238,238,238)',
  },
  directionContentView:{
    width:300,
    height:300,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    // backgroundColor:'#00ff00',
  },
  lineSpace:{
    width:0.5,
    height:sectionHeght,
    backgroundColor:'#C0C0C0',
  },
  spaceLineColumn:{
    width:0.5,
    height:sectionHeght,
    backgroundColor:'#C0C0C0',
  },
  middleButtonView:{
    flexDirection:'row',
    width:sectionWidth,
    height:sectionHeght,
    alignItems:'center',
    justifyContent:'center',
  },
 
});

const KEY_OF_MAINPAGE = 'LightBoxVC';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: LightBoxVC,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#ffffff',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
    return (
      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
        <ImageButton
          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
          onPress={() => {
                if (index === 0) {
                  MHPluginSDK.closeCurrentPage();
                } else {
                  navigator.pop();
                }
          }}
          style={[{width:29, height:29, tintColor: '#ffffff'}]}
        />
      </View>
    );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{width:29, height:29, tintColor: '#ffffff'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: LightBoxVC,
  route: route,
}
