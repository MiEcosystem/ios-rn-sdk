'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,

  
  Dimensions,
  TouchableOpacity,
  Platform,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var TitleButton = require('../../CommonModules/TitleButton');
var Button = require('../../CommonModules/Button');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var NavigatorView = require('../../MainV2/ToolModel/NavigatorView');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);


class AirStatelessBoxRemote extends React.Component {
  constructor(props, context) {
    super(props, context);
    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);
    
    this.state={
      did: deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      remoterID:this.props.remoterID,
      isShow:false,
      isOnline:false,
      allKeys:[],
    };
    this.enableExtendButton =false;
    var self = this;
    MHPluginSDK.getDevicePropertyFromMemCache(['isOnline'],(response)=>{

      self.isOnline== response.isOnline;
      self.setState({isOnline:response.isOnline});
    });

  }


  render() {

    return(
      <View style={styles.mainContainer}>
            <MessageToast ref='toast'/>
            <NormalExtendView isShow={this.state.isShow} 
              onPressButton={(event)=>this.onPressButton(event)} 
              onPressDissmissButton={(event)=>this.onPressDissmissButton(event)}
              dataSource ={this.deal_ExtendViewData(this.state.allKeys)} 
            />   
            {
              (this.state.isOnline==true)?(this.onLine_statusView()):(this.offLine_statusView())
            }
             <NavigatorView ref='navigator' title={route.title} />
            <View style={styles.scrollContentView}>
                {/* 空调中间显示View */}
                {
                 (this.state.isOnline==true)?(this.onLine_centerView()):(this.offLine_centerView())
                }
                <View style={styles.bottomMenuView}>
                    <View style={styles.middleButtonView}>
                        <View style={styles.fourButtonView}>
                            <Button onPress={()=>this.onPressButton('WIND DIRECTION')} enabled={this.isButtonEnabled('WIND DIRECTION')} title ={LocalizedStrings.wind_direct} imageNormal="NewAirControllerImage/air_wind_button_normal.png" imageHighlight="NewAirControllerImage/air_wind_button_press.png"   textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.fourButtonView}>
                            <Button onPress={()=>this.onPressButton('WIND_SPEED')} enabled={this.isButtonEnabled('WIND_SPEED')} title ={LocalizedStrings.wind_speed} imageNormal="NewAirControllerImage/air_scanWind_button_normal.png" imageHighlight="NewAirControllerImage/air_scanWind_button_press.png"  textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.fourButtonView}>
                            <Button onPress={()=>this.onPressButton('MODE')} enabled={this.isButtonEnabled('MODE')}  title ={LocalizedStrings.ir_controller_mode_text} imageNormal="NewAirControllerImage/air_mode_button_normal.png" imageHighlight="NewAirControllerImage/air_mode_button_press.png" textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.fourButtonView}>
                            <Button onPress={()=>this.onPressExtendButton()} enabled={this.isEnableExtendButton()} title ={LocalizedStrings.extra_key_text} imageNormal="NewAirControllerImage/air_extend_normal.png" imageHighlight="NewAirControllerImage/air_extend_press.png" textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>

                    </View>
                    <View style={styles.middleButtonView}>
                        <View style={styles.threeButtonView}>
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button onPress={()=>this.onPressButton('POWER')} enabled={this.isButtonEnabled('POWER')}  imageNormal="NewAirControllerImage/air_power_normal.png" imageHighlight="NewAirControllerImage/air_power_press.png"  style={{marginBottom:8}} imageWidth={80} imageHeight={80}  />
                        </View>
                        <View style={styles.threeButtonView}>
                        </View>
                    </View>
             </View>
          </View>
      </View>
    );
  }

  
  onLine_statusView(){
    return(
      <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
      source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_bg_online.png'}}
      />
    );
  }

  offLine_statusView(){
    return(
      <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
      source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_bg_offline.png'}}
      />
    );
  }

  offLine_centerView(){
    var currentTemperature = (this.state.temperature!=undefined)?(this.state.temperature +'°'):('');
    return (
      <View style={styles.topView}>
               <Image style={[styles.image,{'position':'absolute',width:topContentViewWidth,height:topContentViewHeight}]}
                source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_no_status_offline.png'}}/>
              <View style={styles.topContentView}>
                    <View style={styles.topLeftView}>
                    <Button onPress={()=>this.onPressButton('TEMP-')}
                    key='TEMP-1111'
                    enabled={this.isButtonEnabled('TEMP-')} 
                    imageNormal="NewAirControllerImage/air_temp-_normal_offline.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
                    {/* 中间显示View */}
                    <View style={styles.topMiddleView}>
                         
                    </View>
                    <View style={styles.topRightView}>
                    <Button onPress={()=>this.onPressButton('TEMP+')} 
                    key='TEMP-2222'
                    enabled={this.isButtonEnabled('TEMP+')} 
                    imageNormal="NewAirControllerImage/air_temp+_normal_offline.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
              </View>
          </View>

    );
  }

  onLine_centerView(){
    var currentTemperature = (this.state.temperature!=undefined)?(this.state.temperature +'°'):('');
    return (
      <View style={styles.topView}>
               <Image style={[styles.image,{'position':'absolute',width:topContentViewWidth,height:topContentViewHeight}]}
                source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_no_status_online.png'}}/>
              <View style={styles.topContentView}>
                    <View style={styles.topLeftView}>
                    <Button onPress={()=>this.onPressButton('TEMP-')}
                    enabled={this.isButtonEnabled('TEMP-')} 
                    key='TEMP-3333'
                    imageNormal="NewAirControllerImage/air_temp-_normal_online.png" 
                    imageHighlight="NewAirControllerImage/air_temp-_press_online.png"  
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
                    {/* 中间显示View */}
                    <View style={styles.topMiddleView}>
                         
                    </View>
                    <View style={styles.topRightView}>
                    <Button onPress={()=>this.onPressButton('TEMP+')} enabled={this.isButtonEnabled('TEMP+')} 
                     key='TEMP-4444'
                    imageNormal="NewAirControllerImage/air_temp+_normal_online.png" 
                    imageHighlight="NewAirControllerImage/air_temp+_press_online.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
              </View>
          </View>

    );
  }

  onPressButton(event) {

    this.refs.navigator.show();
    var key_id = undefined;
    this.state.allKeys.forEach(element => {
      
        if(element.name==event){
          key_id = element.id;
        }
    });
    console.log('key_id:'+key_id +'\n'+'event:'+event);

    if(key_id!=undefined){
     
      var self = this;
      var param  = {
        "did":this.state.did,
        controller_id:this.state.remoterID,
        "key_id": key_id
      };

      MIRequestServer.Post_SendkeyCode(param,
        function(response){
          if((response.code !=undefined) &&(response.code==0)){
            // self.refs.toast.showMessage(response.message);
          }
            
        },function(error){
          console.log('Post_GetAllRemoterkey-error---'+JSON.stringify(error));
        });  
    }

  }

  isButtonEnabled(event) {

      var key_id = undefined;
      this.state.allKeys.forEach(element => {
          if(element.name==event){
            key_id = element.id;
          }
      });

      if(key_id!=undefined){
        return true;
      }else{
        return false;
      }
      
  }

  componentWillMount() {
     /*后期改成 controller_id */
     var param  = {"did": this.state.did};
     var self = this;
 
     MIRequestServer.Post_GetAllRemoterkey(param,
       function(response){
          
           if((response.result.keys)&&(response.result.keys!=undefined)){
             var allKeys = response.result.keys;
             self.setState({ allKeys:allKeys});
           }
 
       },function(error){
        self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
       });  
    
  }

  componentWillUnmount() {
  }

  deal_ExtendViewData(allKeys){

      var bindKeyArray =['POWER','DRY','WIND_SPEED',];
      var NewAllKeys = allKeys.slice(0);
      var deleteArray =[];
      NewAllKeys.forEach((element,index) => {
          var isEqual = false;
          var sourceName = element.name;

          for(let i=0;i<bindKeyArray.length;i++){
              var key = bindKeyArray[i];
              if(key ==sourceName ){
                isEqual = true; 
                deleteArray.push(element);

              }
          }
      }); 
      deleteArray.forEach((element) => {

        let index = NewAllKeys.indexOf(element);      
        NewAllKeys.splice(index,1);
      });
      if(NewAllKeys.length>0){
        this.enableExtendButton =true;
      }
      return NewAllKeys;  
  }

  isEnableExtendButton(){
    return this.enableExtendButton;
  }

  onPressExtendButton(){
    this.setState({isShow:true});    
  }

  onPressDissmissButton(){
    this.setState({isShow:false});
  }  
}


const sectionHeght =(screenHeight>568)?(100):(80);
const sectionContentWidth=  screenWidth- 20*2;
const topContentViewWidth = (screenHeight>568)?(300):(260);
const topContentViewHeight = (screenHeight>568)?(300):(260);
const topLeftHeight = 80;
const centerViewHeight = 50;
const height30 = 30;
const topViewHeight =(screenHeight-NavigatorBarHeight)-(sectionHeght*2)-40;

var styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
  },
  scrollContentView:{
    marginTop:0,
    width:screenWidth,
    height:screenHeight-NavigatorBarHeight,
  },
  topView:{
    height:topViewHeight,
    alignSelf:'center',
    justifyContent:'center',
  },
  topContentView:{
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    width:topContentViewWidth,
    height:topContentViewHeight,
    // backgroundColor:'#00ff00',
  },
  topLeftView:{
    height:topLeftHeight,
    width:topLeftHeight,
    // backgroundColor:'#0ff',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  topMiddleView:{
    height:topLeftHeight*2,
    width:topLeftHeight*2,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  topRightView:{
    height:topLeftHeight,
    width:topLeftHeight,
    // backgroundColor:'#0ff',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  bottomMenuView:{
    width:sectionContentWidth,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  middleTopView:{

    height:height30,
  },
  middleCenterView:{

    height:centerViewHeight,
    alignSelf:'center',
    justifyContent:'center',
  },
  middleBottomView:{
    marginTop:0,
    height:height30,
    flexDirection:'row',
    alignSelf:'center',
  },
  middleBottomImage:{
    width:30,
    height:30,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  middleButtonView:{
    flexDirection:'row',
    width:sectionContentWidth,
    height:sectionHeght,
    marginBottom:3,
  },
  threeButtonView:{
    flexDirection:'row',
    width: sectionContentWidth/3.0,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
  },
  fourButtonView:{
    flexDirection:'row',
    width:sectionContentWidth/4,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
  },

});

const KEY_OF_MAINPAGE = 'AirStatelessBoxRemote';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};


// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: AirStatelessBoxRemote,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#ffffff',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
    return (
      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
        <ImageButton
          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
          onPress={() => {
                if (index === 0) {
                  MHPluginSDK.closeCurrentPage();
                } else {
                  navigator.pop();
                }
          }}
          style={[{width:29, height:29, tintColor: '#ffffff'}]}
        />
      </View>
    );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{width:29, height:29, tintColor: '#ffffff'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: AirStatelessBoxRemote,
  route: route,
}
