'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  ScrollView,
  TouchableOpacity,
  Platform,
  Modal,
  Dimensions,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var TitleButton = require('../../CommonModules/TitleButton');
var Button = require('../../CommonModules/Button');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var TVExtendView = require('../../MainV2/ToolModel/TVExtendView');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var DirectionView = require('../../MainV2/ToolModel/DirectionView');
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var NavigatorView = require('../../MainV2/ToolModel/NavigatorView');
/* 数据模型 */

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(30):(0);
 
class TVBoxVC extends React.Component {
  constructor(props, context) {
    super(props, context);
    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);
    
    this.state = {
      did: deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      remoterID:this.props.remoterID,
      allKeys:[],
      isShow:false,
      isModal:false,
    };
    this.enableExtendButton =false;
    console.log('--------TVBoxVC-this.props-------------'+JSON.stringify(this.state));
  }


  render() {
    return (
      <View style={styles.containerAll}>
          {/* 第一行 */}
          <MessageToast ref='toast'/>
          <NormalExtendView isShow={this.state.isShow} 
            onPressButton={(event)=>this.onPressButton(event)} 
            onPressDissmissButton={(event)=>this.onPressDissmissButton(event)}
            dataSource ={this.deal_ExtendViewData(this.state.allKeys)} 
          />
         
          <Image style={[styles.backgroundImage,{'position':'absolute',width:screenWidth,height:screenHeight}]}
              source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/normal_bg.png'}}
              /> 
          <NavigatorView ref='navigator' title={route.title} />
          <View style={styles.scrollContentView}>
                <View style={styles.TopMenuView}>
                      <View style={styles.middleButtonView}>
                          <View style={styles.threeButtonView}>
                                <Button  onPress={()=>{this.onPressButton('POWER')}} enabled={this.isButtonEnabled('POWER')} shock ={true} imageNormal="NewControllerImage/tv_power_normal.png" imageHighlight='NewControllerImage/tv_power_press.png' imageWidth={60} imageHeight={60} />
                          </View> 
                          <View style={styles.threeButtonView}>
                                <Button   onPress={()=>{this.onPressButton('INPUT')}} enabled={this.isButtonEnabled('INPUT')} shock ={true}  imageNormal="NewControllerImage/tv_input_normal.png" imageHighlight='NewControllerImage/tv_input_press.png' imageWidth={60} imageHeight={60} />
                          </View> 
                          <View style={styles.threeButtonView}>
                                <Button   onPress={()=>{this.onPressButton('HOMEPAGE')}} enabled={this.isButtonEnabled('HOMEPAGE')} shock ={true} imageNormal="NewControllerImage/tv_home_normal.png" imageHighlight='NewControllerImage/tv_home_press.png' imageWidth={60} imageHeight={60} />
                          </View>   
                      </View>
                </View>
                {this.state.isModal==true?(this.showNumberView()):(this.showMenuView())}
               
          </View>   
      </View>

    );
  }

  stopVoiceButtonClick() {


   

  }

  onRequestClose() {
    this.setState({
        isModal:false
    });
  }

  onPressNumberButton(event){
    //扩展键盘
    (this.state.isModal==true)?(this.setState({isModal:false})):(this.setState({isModal:true}));
  }

  onPressButton(event) {

      this.refs.navigator.show();
      console.log('TVBoxRemoter:---------'+JSON.stringify(event));
      var key_id = undefined;
      this.state.allKeys.forEach(element => {
        
          if(element.name==event){
            key_id = element.id;
          }
      });
      console.log('key_id:'+key_id +'\n'+'event:'+event);

      if(key_id!=undefined){
      
        var self = this;
        var param  = {
          "did":this.state.did,
          controller_id:this.state.remoterID,
          "key_id": key_id
        };

        MIRequestServer.Post_SendkeyCode(param,
          function(response){ 
              if((response.code !=undefined) &&(response.code==0)){
                // self.refs.toast.showMessage(response.message);
              }
              
          },function(error){
            console.log('Post_SendkeyCode-error---'+JSON.stringify(error));
          });  
      }

  }

  isButtonEnabled(event) {

      var key_id = undefined;
      this.state.allKeys.forEach(element => {
          if(element.name==event){
            key_id = element.id;
          }
      });

      if(key_id!=undefined){
        return true;
      }else{
        return false;
      }

  }

  componentWillMount() {
     /*后期改成 controller_id */
     var param  = {"did": this.state.did};
     var self = this;
 
     MIRequestServer.Post_GetAllRemoterkey(param,
       function(response){
          
           if((response.result.keys)&&(response.result.keys!=undefined)){
             var allKeys = response.result.keys;
             self.setState({ allKeys:allKeys});
           }
 
       },function(error){
          self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
       });  
    
  }

  componentWillUnmount() {

  }

  showMenuView(){
    return (
        <View style={styles.BottomMenuView}>
            <View style={styles.middleButtonView}>              
                <View style={styles.threeButtonView}>
                      <Button  onPress={()=>{this.onPressButton('MENU')}} enabled={this.isButtonEnabled('MENU')}  titleMarginTop={5} shock ={true}  imageNormal="NewControllerImage/tv_menu_normal.png" imageHighlight='NewControllerImage/tv_menu_press.png' imageWidth={60} imageHeight={60} />
                </View>
                <View style={styles.threeButtonView}>  
                      <Button  onPress={()=>{this.onPressNumberButton('')}}  shock ={true}   imageNormal="NewControllerImage/tv_number_normal.png" imageHighlight='NewControllerImage/tv_number_press.png' imageWidth={60} imageHeight={60}/>
                </View> 
                <View style={styles.threeButtonView}>
                      <Button  onPress={()=>{this.onPressButton('BACK')}} enabled={this.isButtonEnabled('BACK')}  titleMarginTop={5} shock ={true} imageNormal="NewControllerImage/tv_back_normal.png" imageHighlight='NewControllerImage/tv_back_press.png' imageWidth={60} imageHeight={60} />
                </View> 
            </View>
            <View style={styles.directionView}>
                  <View style={styles.directionContentView}>
                      <DirectionView style={[styles.directionContentView,{'width':210,'height':210}]}
                       width={210} height={210}
                       dataSource={this.state.allKeys}
                       onPressButton={(event)=>{this.onPressButton(event)}}
                       />
                  </View>
            </View>
            <View style={styles.BottomView}>
                <View style={styles.BottomLeftView}>
                          <Button  onPress={()=>{this.onPressButton('VOL+')}} shock ={true}  enabled={this.isButtonEnabled('VOL+')} imageNormal="NewControllerImage/tv_vol+_top_normal.png" imageHighlight='NewControllerImage/tv_vol+_top_press.png' imageWidth={70} imageHeight={71}/>
                          <Button  onPress={()=>{this.onPressButton('VOL-')}} shock ={true}  enabled={this.isButtonEnabled('VOL-')} imageNormal="NewControllerImage/tv_vol-_bottom_normal.png" imageHighlight='NewControllerImage/tv_vol-_bottom_press.png' imageWidth={70} imageHeight={71}/>
                </View>
                <View style={styles.BottomMiddleView}>

                          <Button  style={styles.bottomMoreButton} onPress={()=>{this.onPressExtendButton('EXTENSION')}} enabled={this.isEnableExtendButton()} shock ={true} imageNormal="NewControllerImage/tv_extend_normal_special.png" imageHighlight='NewControllerImage/tv_extend_press_special.png' imageWidth={60} imageHeight={60} />
                </View>
                <View style={styles.BottomRightView}>
                          <Button  onPress={()=>{this.onPressButton('CH+')}} shock ={true}  enabled={this.isButtonEnabled('CH+')} imageNormal="NewControllerImage/tv_ch+_top_normal.png" imageHighlight='NewControllerImage/tv_ch+_top_press.png' imageWidth={70} imageHeight={71}/>
                          
                          <Button  onPress={()=>{this.onPressButton('CH-')}} shock ={true}  enabled={this.isButtonEnabled('CH-')} imageNormal="NewControllerImage/tv_ch-_bottom_normal.png" imageHighlight='NewControllerImage/tv_ch-_bottom_press.png' imageWidth={70} imageHeight={71}/>
                </View>
            </View>
          </View>
    );
  }

  showNumberView(){
    return (
      <TVExtendView style={styles.extendButtonView}
       onPressBackButton={()=>this.onPressNumberButton()}
       onPressButton={(event)=>this.onPressButton(event)}
       dataSource={this.state.allKeys}
       />
    );
  }

  deal_ExtendViewData(allKeys){

      var bindKeyArray =['POWER','INPUT','HOMEPAGE','MENU',
      'BACK','VOL+','VOL-','CH+','CH-','0','1','2','3','4','5','6','7','8','9',
      'NAVIGATE_UP','NAVIGATE_DOWN','NAVIGATE_LEFT','NAVIGATE_RIGHT','OK','--/-'];
      var NewAllKeys = allKeys.slice(0);
      var deleteArray=[];

      NewAllKeys.forEach((element,index) => {
          var isEqual = false;
          var sourceName = element.name;

          for(let i=0;i<bindKeyArray.length;i++){
              var key = bindKeyArray[i];
              if(key ==sourceName ){
                  isEqual = true; 

                  deleteArray.push(element);
              }
          }
      }); 


      deleteArray.forEach((element) => {

        let index = NewAllKeys.indexOf(element);      
        NewAllKeys.splice(index,1);
      });
      if(NewAllKeys.length>0){
        this.enableExtendButton =true;
      }
      return NewAllKeys;  
  }

  isEnableExtendButton(){
    return this.enableExtendButton;
  }

  onPressExtendButton(){
    this.setState({isShow:true});    
  }

  onPressDissmissButton(){
    this.setState({isShow:false});
  }          

  
}

const sectionHeght =80;
const sectionContentWidth =  screenWidth-2*20;
const ButtonViewWidth=  sectionContentWidth/3.0;
const ButtonContentViewWidth = 105;
const imageViewWidth = 240;
const imageViewHeight = imageViewWidth;
const BottomViewHeight =160;
const directionHeight = (screenHeight-NavigatorBarHeight)-(2*sectionHeght)-(BottomViewHeight)-SafeBottomHeight;

var styles = StyleSheet.create({
  containerAll: {
    flex:1,
  },
  backgroundImage:{
    width:screenWidth,
    height:screenHeight,
  },
  TopMenuView:{
    height:sectionHeght,
    width:sectionContentWidth,
    alignItems:'center',
    alignSelf:'center',
  },
  BottomMenuView:{
    height:screenHeight- NavigatorBarHeight-sectionHeght -SafeBottomHeight,
    marginBottom:SafeBottomHeight,
    width:screenWidth,
  },
  extendButtonView:{
    backgroundColor:'#ffff00',
  },
  BottomView:{
    flexDirection:'row',
    alignSelf:'center',
    width:sectionContentWidth,
    height:BottomViewHeight,
  },
  BottomLeftView:{
    width:(sectionContentWidth*3)/10,
    flexDirection:'column',
    justifyContent:'flex-end',
  },
  BottomMiddleView:{
    width:(sectionContentWidth*4)/10,
    flexDirection:'column',
    justifyContent:'flex-end',
  },
  BottomRightView:{
    width:(sectionContentWidth*3)/10,
    flexDirection:'column',
    justifyContent:'flex-end',
  },
  bottomMoreButton:{
    marginBottom:10,
  },
  scrollContentView:{
    flexDirection:'column',
    marginTop:0,
    width:screenWidth,
    height:screenHeight-NavigatorBarHeight,
  },
  directionView:{
    height:directionHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  directionContentView:{
    width:imageViewWidth,
    height:imageViewWidth,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  middleButtonView:{
    marginTop:0,
    flexDirection:'row',
    width:sectionContentWidth,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
  },
  threeButtonView:{
    flexDirection:'row',
    width:ButtonViewWidth,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
    marginBottom:10,
  },
});

const KEY_OF_MAINPAGE = 'TVBoxVC';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: TVBoxVC,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#ffffff',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
    return (
      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
        <ImageButton
          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
          onPress={() => {
                if (index === 0) {
                  MHPluginSDK.closeCurrentPage();
                } else {
                  navigator.pop();
                }
          }}
          style={[{width:29, height:29, tintColor: '#ffffff'}]}
        />
      </View>
    );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{width:29, height:29, tintColor: '#ffffff'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: TVBoxVC,
  route: route,
}
