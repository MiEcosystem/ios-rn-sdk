'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  Dimensions,
  TouchableOpacity,
  Platform,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var NavigatorView = require('../../MainV2/ToolModel/NavigatorView');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');

const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);

class CameraBoxVC extends React.Component {
  constructor(props, context) {
    super(props, context);
    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);
    
    this.state={
      did: deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      remoterID:this.props.remoterID,
      isShow:false,
      allKeys:[],
    };
    this.enableExtendButton =false;
    console.log('--------CameraBoxVC-this.props-------------'+JSON.stringify(this.state));
  }

  render() {

    return (
      <View style={styles.containerAll} >
        <MessageToast ref='toast'/>
        <NormalExtendView isShow={this.state.isShow} 
          onPressButton={(event)=>this.onPressButton(event)} 
          onPressDissmissButton={(event)=>this.onPressDissmissButton(event)}
          dataSource ={this.deal_ExtendViewData(this.state.allKeys)} 
        />
        <Image style={[styles.backgroundImage,{'position':'absolute',width:screenWidth,height:screenHeight}]}
              source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewControllerImage/normal_bg.png'}}
              /> 
            <NavigatorView ref='navigator' title={route.title} />  
            <View style={styles.directionView}>
                  <View style= {styles.directionContentView}>
                      <View style={styles.directionTopView}>
                      </View>
                      <View style={styles.directionMiddleView}>
                          <Button  onPress={()=>{this.onPressButton('P_KEY')}}  enabled={this.isButtonEnabled('P_KEY')}  imageWidth={140}  imageHeight={140} imageNormal="NewControllerImage/camera_shutter_normal.png" imageHighlight="NewControllerImage/camera_shutter_press.png"/>
                      </View>
                      <View style={styles.directionBottomView}>
                          <Button  onPress={()=>{this.onPressExtendButton('EXTENSION')}} enabled={this.isEnableExtendButton()}  imageWidth={80}  imageHeight={80} imageNormal="NewControllerImage/camera_extend_normal.png" imageHighlight="NewControllerImage/camera_extend_press.png"/>
                      </View>
                  </View>
            </View>
      </View>
    );
  }

  onPressButton(event) {

    this.refs.navigator.show();
    var key_id = undefined;
    this.state.allKeys.forEach(element => {
      
        if(element.name==event){
          key_id = element.id;
        }
    });
    console.log('key_id:'+key_id +'\n'+'event:'+event);

    if(key_id!=undefined){
     
      var self = this;
      var param  = {
        "did":this.state.did,
        controller_id:this.state.remoterID,
        "key_id": key_id
      };

      MIRequestServer.Post_SendkeyCode(param,
        function(response){
          if((response.code !=undefined) &&(response.code==0)){
            // self.refs.toast.showMessage(response.message);
          }
            
        },function(error){
          console.log('Post_SendkeyCode-error---'+JSON.stringify(error));
        });  
    }

  }

  isButtonEnabled(event) {

    var key_id = undefined;
    this.state.allKeys.forEach(element => {
        if(element.name==event){
          key_id = element.id;
        }
    });

    if(key_id!=undefined){
      return true;
    }else{
      return false;
    }
    
  }

  componentWillMount() {
     /*后期改成 controller_id */
     var param  = {"did": this.state.did};
     var self = this;
 
     MIRequestServer.Post_GetAllRemoterkey(param,
       function(response){
          
           if((response.result.keys)&&(response.result.keys!=undefined)){
             var allKeys = response.result.keys;
             self.setState({ allKeys:allKeys});
           }
 
       },function(error){
         self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
       });  
    
  }

  componentWillUnmount() {
  }

  deal_ExtendViewData(allKeys){

      var bindKeyArray =['P_KEY',];
      var NewAllKeys = allKeys.slice(0);
      var deleteArray=[];
      NewAllKeys.forEach((element,index) => {
          var isEqual = false;
          var sourceName = element.name;

          for(let i=0;i<bindKeyArray.length;i++){
              var key = bindKeyArray[i];
              if(key ==sourceName ){
                isEqual = true; 
                deleteArray.push(element);

              }
          }
      }); 
      deleteArray.forEach((element) => {

        let index = NewAllKeys.indexOf(element);      
        NewAllKeys.splice(index,1);
      });
      
      if(NewAllKeys.length>0){
        this.enableExtendButton =true;
      }
      return NewAllKeys;  
  }

  isEnableExtendButton(){
    return this.enableExtendButton;
  }

  onPressExtendButton(){
    this.setState({isShow:true});    
  }

  onPressDissmissButton(){
    this.setState({isShow:false});
  }          
}


const directionHeight = screenWidth*0.8;
const centerButtonWidth = 150;
const bottomButtonWidth = 80;

var styles = StyleSheet.create({
    containerAll: {
      flex: 1,
      marginTop: 0,
    },
    backgroundImage:{
      width:screenWidth,
      height:screenHeight,
    },
    directionView:{
      alignItems:'center',
      justifyContent:'center',
      marginTop:0,
      height:screenHeight- NavigatorBarHeight,
    },
    directionContentView:{
      width:300,
      height:300,
      flexDirection:'column',
      justifyContent:'center',
      alignItems:'center',
      alignSelf:'center',
    },
    directionTopView:{
      flex:3,
      alignItems:'center',
      height:directionHeight/3,
    },
    directionMiddleView:{
      flex:4,
      flexDirection:'row',
      height:centerButtonWidth,
      width:centerButtonWidth,
      justifyContent:'center',
      alignItems:'center',
      alignSelf:'center',
    },
    directionBottomView:{
      flex:3,
      marginTop:140,
      justifyContent:'center',
      height:bottomButtonWidth,
      width:bottomButtonWidth,
      alignSelf:'center',
    },
});

const KEY_OF_MAINPAGE = 'CameraBoxVC';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};


// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: CameraBoxVC,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#ffffff',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
    return (
      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
        <ImageButton
          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
          onPress={() => {
                if (index === 0) {
                  MHPluginSDK.closeCurrentPage();
                } else {
                  navigator.pop();
                }
          }}
          style={[{width:29, height:29, tintColor: '#ffffff'}]}
        />
      </View>
    );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{width:29, height:29, tintColor: '#ffffff'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: CameraBoxVC,
  route: route,
}
