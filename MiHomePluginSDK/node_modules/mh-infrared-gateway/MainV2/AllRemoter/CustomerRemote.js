'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  ListView,
  TextInput,
  PixelRatio,
  StatusBar,
  Dimensions,
  TouchableOpacity,
  Platform,
  ScrollView,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var CustomButtonView  = require('../../MainV2/ToolModel/CustomButtonView');
var StudyRemoter = require('../../MainV2/StudyRemoter/StudyRemoter');


const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);
var learnButtonArray= [];
var currentSelectIndex ;

class CustomerRemote extends React.Component {
  constructor(props, context) {
    super(props, context);

    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);
    var dataSource = new ListView.DataSource({rowHasChanged: (r1, r2)=>r1!==r2});
    this.state ={
      did:deviceId,
      remoterID:this.props.remoterID,
      showBottomView:false,
      dataSource:dataSource,
      allKeys:[],
    };
    console.log('--------CustomerRemote-this.props-------------'+JSON.stringify(this.state));
   
  }

  render(){
     return(
      <View style={styles.containerAll}>
          <MessageToast ref='topToast'/>
          <ScrollView style={[styles.scrollContentView,{}]}
            horizontal={false}
            key={'customerScrollView'}
            Vertical={true}
            scrollEnabled= {true}  >     
              <View style={[styles.contentView,{height:this.getMaxContentViewHeight(),marginLeft:10,marginRight:10,}]} >     
                {this.renderAllItem()}
              </View>
          </ScrollView>
      </View>
     );
  }

  /* 渲染子方法 */
  renderAllItem() {
      let dataSource = this.state.allKeys;

      if(dataSource==undefined){return;}

      var allItemDate = [];
      for(var i =0 ;i<dataSource.length;i++){
        let model = dataSource[i];
        let display_name = dataSource[i].display_name;
        let name = dataSource[i].name;
        allItemDate.push(
          <View style ={styles.columnContentView} key={JSON.stringify(name)} >
                <View style ={styles.columnItemBgView} >
                    <TitleButton style={styles.buttonView} 
                    key ={display_name+i} onPress ={()=> this.onPressButton(model.id)} 
                    ButtonHighlightColor='#C0C0C0'
                    title ={display_name}  titleSize={15} textColor="#2c2c2c" >
                    </TitleButton>
                </View>
          </View>
        );
      }
      return allItemDate;
  }

  getMaxContentViewHeight(){

      var height;
      var dataSource = this.state.allKeys;
      if(dataSource!=undefined){
          var count;
          if(dataSource.length%3!=0){
            count = (dataSource.length/3) +1;
          }else{
            count = dataSource.length/3;
          }
          height = count * (columnContentViewHeight);
      }
      return height;
  }

  onPressButton(key_id) {

      if(key_id!=undefined){
      
        var self = this;
        var param  = {
          "did":this.state.did,
          controller_id:this.state.remoterID,
          "key_id": key_id
        };

        MIRequestServer.Post_SendkeyCode(param,
          function(response){
              if((response.code !=undefined) &&(response.code==0)){
                self.refs.topToast.showMessage(response.message);
              }
              
          },function(error){
              self.refs.topToast.showMessage(JSON.stringify(error));
          });  
      }

  }
  
  /* 页面出现*/
  componentWillMount() {
      /*后期改成 controller_id */
      var param  = {"did": this.state.did};
      var self = this;
      MIRequestServer.Post_GetAllRemoterkey(param,
        function(response){
          
            if((response.result.keys)&&(response.result.keys!=undefined)){
              var allKeys = response.result.keys;
              self.setState({allKeys:allKeys});
            }
        },function(error){
            self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
        });  
  }

  }


  const marginWidth = 10;
  const itemWidth = (screenWidth -(4 * marginWidth))/3.0;
  const itemHeight = itemWidth * 0.4;
  const columnContentViewWidth = screenWidth/3;
  const columnContentViewHeight= itemWidth*0.5;
  const topViewHeight = 100;
  const bottomViewHeight = 180;

  var styles = StyleSheet.create({
    containerAll: {
      flex:1,
      marginTop:0,
      backgroundColor:'#f8f8f8',
      alignItems:'center',
      alignSelf:'center',
      flexDirection: 'column',
    },
    bottomView:{
      width:screenWidth,
      height:bottomViewHeight,
      alignItems:'center',
      alignSelf:'center',
      justifyContent: 'center',
    },
    bottomContentView:{
      width:screenWidth-2*20,
      height:bottomViewHeight-2*20,
      backgroundColor:'#00bc9c',
    },
    addButton:{
      flex:1,
      width:screenWidth-2*20,
      height:bottomViewHeight-2*20,
    },
    scrollContentView:{
      width:screenWidth,
      marginTop:NavigatorBarHeight,
      height:screenHeight-NavigatorBarHeight,
      backgroundColor:'#ffffff',
    },
    contentView:{
      marginTop:0,
      flexDirection:'row',
      flexWrap:'wrap',
      justifyContent:'flex-start',
      backgroundColor:'#ffffff',
    },
    columnContentView:{
      width:columnContentViewWidth,
      height:columnContentViewHeight,
      justifyContent:'center',
      alignItems:'center',
      alignSelf:'center',
    },
    columnItemBgView:{
      width:itemWidth,
      height:itemHeight,
      justifyContent:'center',
      alignItems:'center',
      alignSelf:'center',
      padding:marginWidth,
    },
    buttonView:{
      width:itemWidth,
      height:itemHeight,
      borderWidth:1,
      borderColor:'#e2e2e2',
      borderRadius:5,
    },
    
  });
  
  const KEY_OF_MAINPAGE = 'CustomerRemote';
  
  var openMorePage = function (navigator) {
    navigator.push(Setting.route);
  };


  
  // 每个页面export自己的route
  var route = {
    key: KEY_OF_MAINPAGE,
    title: MHPluginSDK.deviceName,
    component: CustomerRemote,
    navLeftButtonStyle: {
      tintColor:'#ffffff',
    },
    navTitleStyle: {
      color:'#000000',
    },
    navBarStyle: {
      backgroundColor:'#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
                  if (index === 0) {
                    MHPluginSDK.closeCurrentPage();
                  } else {
                    navigator.pop();
                  }
            }}
            style={[{width:29, height:29, tintColor: '#000000'}]}
          />
        </View>
      );
    },
    renderNavRightComponent: function(route, navigator, index, navState) {
      if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
      {
        return (
          <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
            <ImageButton
              source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
              onPress={() => {
                openMorePage(navigator);
              }}
              style={[{width:29, height:29, tintColor: '#000000'}]}
            />
          </View>
        );
      }
      else {
        return null;
      }
    },
  }
  
  module.exports = {
    component: CustomerRemote,
    route: route,
  }
  