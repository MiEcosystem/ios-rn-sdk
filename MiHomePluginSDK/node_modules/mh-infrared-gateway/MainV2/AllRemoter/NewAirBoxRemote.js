'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  Dimensions,
  ScrollView,
  StatusBar,
  TouchableOpacity,
  Platform,
  Modal,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var LeftIconButton = require('../../CommonModules/LeftIconButton');
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var { Temperature, airMode , windSpeed, windDirection, scanWind, sleepMode} = require('../../MainV2/MIRequestServer/AirStateModel');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var NavigatorView = require('../../MainV2/ToolModel/NavigatorView');
var NewAirStateManager  = require('../../MainV2/MIRequestServer/AirState/NewAirStateManager').NewAirStateManager;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);
var new_AirStateManager;

class NewAirBoxRemote extends React.Component {
  constructor(props, context) {
    super(props, context);
    var deviceId =  (props.did!=undefined)?(props.did):(MHPluginSDK.deviceId);

    this.state = {
      did: deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      requestStatus: false,
      isOnline:false,
      isModal:false,

      enablePower:false,
      powerState:false,
      temperature:undefined,
      airMode:{},                  //空调模式
      windSpeed:{},                //风速
      windDirection:{},            //风向
      scanWind:{},                 //扫风模式
      sleepMode:{},                //睡眠模式
      timerMode:{},                //睡眠模式
    };

    new_AirStateManager = new NewAirStateManager();
    var self = this;
    MHPluginSDK.getDevicePropertyFromMemCache(['isOnline'],(response)=>{

      self.isOnline== response.isOnline;
      self.setState({isOnline:response.isOnline});
    });
    console.log('--------NewAirBoxRemote-this.props-------------');
  }


  render() {

    return(
      <View style={styles.mainContainer}>
            <MessageToast ref='toast'/>
           
            <Image style={[styles.image,{'position':'absolute',width:screenWidth,height:screenHeight}]}
            source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_bg_online.png'}}
            />
            <View style={styles.scrollContentView}>
                <NavigatorView ref='navigator' title={route.title} />
                {/* 空调中间显示View */}
                {
                  (this.state.isOnline==true)?(this.onLine_centerView()):(this.offLine_centerView())
                }
                <View style={styles.bottomMenuView}>
                    <View style={styles.middleButtonView}>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.PressHotButton.bind(this)} enabled={this.isButtonEnabled('HOT')} title ={LocalizedStrings.ir_controller_heating_text} imageNormal="NewAirControllerImage/air_hot_button_normal.png" imageHighlight="NewAirControllerImage/air_hot_button_press.png"   textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.PressCoolButton.bind(this)} enabled={this.isButtonEnabled('COOL')}  title ={LocalizedStrings.ir_controller_cool_text} imageNormal="NewAirControllerImage/air_cool_button_normal.png" imageHighlight="NewAirControllerImage/air_cool_button_press.png" textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.onPressWindSpeedButton.bind(this)} enabled={this.isButtonEnabled('SPEED')}  title ={LocalizedStrings.wind_speed} imageNormal="NewAirControllerImage/air_scanWind_button_normal.png" imageHighlight="NewAirControllerImage/air_scanWind_button_press.png"  textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10}  />
                        </View>
                    </View>
                    <View style={styles.middleButtonView}>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.PressAutoButton.bind(this)} enabled={this.isButtonEnabled('AUTO')} title ={LocalizedStrings.wind_speed_auto} imageNormal="NewAirControllerImage/air_auto_button_normal.png" imageHighlight="NewAirControllerImage/air_auto_button_press.png"   textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.PressWetButton.bind(this)} enabled={this.isButtonEnabled('WET')} title ={LocalizedStrings.ac_mode_dry} imageNormal="NewAirControllerImage/air_wet_button_normal.png" imageHighlight="NewAirControllerImage/air_wet_button_press.png"  textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button  onPress={this.PressWindButton.bind(this)} enabled={this.isButtonEnabled('WIND')}  title ={LocalizedStrings.ac_mode_fan} imageNormal="NewAirControllerImage/air_wind_button_normal.png" imageHighlight="NewAirControllerImage/air_wind_button_press.png" textColor={'#ffffff'} style={{marginBottom:8}} textMarginTop={10} />
                        </View>

                    </View>
                    <View style={styles.middleButtonView}>
                        <View style={styles.threeButtonView}>
                        </View>
                        <View style={styles.threeButtonView}>
                            <Button onPress={this.onPressPowerButton.bind(this)} enabled={this.isButtonEnabled('POWER')}  imageNormal="NewAirControllerImage/air_power_normal.png" imageHighlight="NewAirControllerImage/air_power_press.png"  style={{marginBottom:8}} imageWidth={80} imageHeight={80}  />
                        </View>
                        <View style={styles.threeButtonView}>
                        </View>
                    </View>
             </View>
          </View>
      </View>
    );
  }

  onLine_centerView(){
    
    var currentTemperature = (this.state.temperature!=undefined)?(this.state.temperature +'°'):('');
    return (
      <View style={styles.topView}>
              <Image style={[styles.image,{'position':'absolute',width:topContentViewWidth,height:topContentViewHeight}]}
              source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_center_bg_online.png'}}
              />
              <View style={styles.topContentView}>
                    <View style={styles.topLeftView}>
                    <Button onPress={this.onPressTemperatureReduceButton.bind(this)}
                    key='TEMP-1111'
                    enabled={this.isButtonEnabled('TEMP-')} 
                    imageNormal="NewAirControllerImage/air_temp-_normal_online.png" 
                    imageHighlight="NewAirControllerImage/air_temp-_normal_online.png"  
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
                    {/* 中间显示View */}
                    <View style={styles.topMiddleView}>
                          <View style={styles.middleTopView}>  
                          </View>
                          <View style={styles.middleCenterView}>
                                <Text style={{fontSize:50,color:'#ffffff'}}>{currentTemperature}</Text>
                          </View>
                          <View style={styles.middleBottomView}>                                                      
                                <View style={styles.middleBottomImage}>                                                      
                                    <Image style={[styles.image,{width:showImageHeight,height:showImageHeight}]}
                                    source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/'+this.state.airMode.imageName }}
                                    />
                                </View>
                                <View style={styles.middleBottomImage}>  
                                    <Image style={[styles.image,{width:showImageHeight,height:showImageHeight}]}
                                    source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/'+ this.state.windSpeed.imageName }}
                                    />                                                    
                                </View>
                          </View>
                    </View>
                    <View style={styles.topRightView}>
                    <Button onPress={this.onPressTemperatureAddButton.bind(this)} 
                    key='TEMP-2222'
                    enabled={this.isButtonEnabled('TEMP+')} 
                    imageNormal="NewAirControllerImage/air_temp+_normal_online.png" 
                    imageHighlight="NewAirControllerImage/air_temp+_normal_online.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
              </View>
          </View>

    );

  }

  offLine_centerView(){
    
    var currentTemperature = (this.state.temperature!=undefined)?(this.state.temperature +'°'):('');
    return (
      <View style={styles.topView}>
              <Image style={[styles.image,{'position':'absolute',width:topContentViewWidth,height:topContentViewHeight}]}
              source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/air_center_bg_offline.png'}}
              />
              <View style={styles.topContentView}>
                    <View style={styles.topLeftView}>
                    <Button onPress={this.onPressTemperatureReduceButton.bind(this)}
                    enabled={this.isButtonEnabled('TEMP-')} 
                    key='TEMP-3333'
                    imageNormal="NewAirControllerImage/air_temp-_normal_offline.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
                    {/* 中间显示View */}
                    <View style={styles.topMiddleView}>
                          <View style={styles.middleTopView}>  
                          </View>
                          <View style={styles.middleCenterView}>
                                <Text style={{fontSize:50,color:'#ffffff'}}>{currentTemperature}</Text>
                          </View>
                          <View style={styles.middleBottomView}>                                                      
                                <View style={styles.middleBottomImage}>                                                      
                                    <Image style={[styles.image,{width:showImageHeight,height:showImageHeight}]}
                                    source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/'+this.state.airMode.imageName }}
                                    />
                                </View>
                                <View style={styles.middleBottomImage}>  
                                    <Image style={[styles.image,{width:showImageHeight,height:showImageHeight}]}
                                    source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'NewAirControllerImage/'+ this.state.windSpeed.imageName }}
                                    />                                                    
                                </View>
                          </View>
                    </View>
                    <View style={styles.topRightView}>
                    <Button onPress={this.onPressTemperatureAddButton.bind(this)} 
                    key='TEMP-4444'
                    enabled={this.isButtonEnabled('TEMP+')} 
                    imageNormal="NewAirControllerImage/air_temp+_normal_offline.png" 
                    textColor={'#ffffff'} style={{marginBottom:8}}  />
                    </View>
              </View>
          </View>
    );

  }

  componentWillMount() {
    var self = this;
    var param ={
      "did": this.state.did
    };

    MIRequestServer.Post_GetAirDeviceConditionerFunction(param,
      function(response){

          if((response.result.modes!=undefined)&&(response.result.modes.length>0)){
            new_AirStateManager.instatceWithModel(response.result.modes);
            self.setState({enablePower:true,requestStatus:true});
          }
      },function(error){

        self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
      });  

  }

  componentDidMount() {
  }

  componentWillUnmount() {
  }
 

  /*  电源 */
  onPressPowerButton() {
    
    this.refs.navigator.show();
    if(this.state.enablePower ==false){return;}
    var UIstate = new_AirStateManager.PressPowerButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var Air_PowerStatus = new_AirStateManager.getPowerCurrentState();
    this.onPressPowerSwitchButton(Air_PowerStatus.powerStatus);
  }

  /* 温度加 */
  onPressTemperatureAddButton() {
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressTempeatureAddButton();
    console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }

  /* 温度减 */
  onPressTemperatureReduceButton() {
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressTempeatureeReduceButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }

  /* 制冷*/
  PressCoolButton(){
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressCoolButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }
  
  /* 制热*/
  PressHotButton(){
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressHotButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  } 
  
  /* 自动*/
  PressAutoButton(){
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressAutoButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }

  /* 送风*/
  PressWindButton(){
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressWindButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }

  /* 除湿*/
  PressWetButton(){
    
    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressWetButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }


  /* 风速 */
  onPressWindSpeedButton() {

    this.refs.navigator.show();
    var UIstate = new_AirStateManager.PressSpeedButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    if(UIstate ==undefined){return;};
    this.setState(UIstate);
    var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    this.onPressButtonWithKey(sendCurrentState);
  }

  /* 开关发送 */
  onPressPowerSwitchButton(is_ON) {

    var self = this;
    var param ;
    if (is_ON==true){
        param ={
          "did": this.state.did,
          "ac_key": 'power_on',
        };
    }else{
         param ={
          "did": this.state.did,
          "ac_key": 'power_off',
        };
    }

    MIRequestServer.Post_SendkeyCode(param,
      function(response){
        if((response.code !=undefined) &&(response.code==0)){
        }
          
      },function(error){
        // self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
      });  
  }

  /* 按键发送 */
  onPressButtonWithKey(modelDic) {


      console.log('-------------modelDic--------------'+JSON.stringify(modelDic));

      var self = this;
      var mode = (modelDic.mode!=undefined)?('M'+modelDic.mode):('');
      var temperature = (modelDic.temperature!=undefined)?('_T'+modelDic.temperature):('');
      var speed = (modelDic.speed!=undefined)?('_S'+modelDic.speed):('');
      var ac_key = mode +temperature +speed;

      var param ={
        "did": this.state.did,
        "ac_key": ac_key,
      };
      MIRequestServer.Post_SendkeyCode(param,
        function(response){
          if((response.code !=undefined) &&(response.code==0)){
          }
            
        },function(error){
          // self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
        });  
  }

  /* --------------------------------------------------------------- */
  /*  暂时废弃不用  模式*/
  onPressModeButton() {

    // var UIstate = new_AirStateManager.PressModeButton();
    // console.log('UIstate--------------'+JSON.stringify(UIstate));
    // this.setState(UIstate);
    // var  sendCurrentState =   new_AirStateManager.getCurrentAllState();
    // this.onPressButtonWithKey(sendCurrentState);
  }
  

  /* private 风向 */
  onPressWindSpeedDirectionButton() {
  }

  /* private 扫风 */
  onPressScanWindButton() {
  }

  /*  private定时 */
  onPressTimerButton() {
  }

  /* private 睡眠 */
  onPressSleepButton() {
  }

  /*  更多功能 */
  onPressMoreExtendButton() {
    this.setState({isModal:true});
  }

  isButtonEnabled(event) {

      if(event=='POWER'){     return true;
      }
      else if(event=='COOL'){ return new_AirStateManager.isEnableCoolButton();
      }
      else if(event=='HOT'){  return new_AirStateManager.isEnableHotButton();
      }
      else if(event=='AUTO'){ return new_AirStateManager.isEnableAutoButton();
      }
      else if(event=='WIND'){ return new_AirStateManager.isEnableWindButton();
      }
      else if(event=='WET'){  return new_AirStateManager.isEnableWetButton();
      }
      else if(event=='SPEED'){  return true;
      }
      else if(event=='TEMP+'){ return true;
      }
      else if(event=='TEMP-'){ return true;
      }
      else{
        return false;
      }
    
  }

 
}


const sectionHeght =(screenHeight>568)?(100):(80);
const sectionContentWidth=  screenWidth- 20*2;
const topViewHeight =(screenHeight>568)?(300):(260);
const topContentViewWidth = (screenHeight>568)?(300):(260);
const topContentViewHeight = (screenHeight>568)?(300):(260);
const topLeftHeight = 80;
const centerViewHeight = 50;
const showImageHeight = 25;
const imageViewWidth = 240;
const imageViewHeight = imageViewWidth;
const height30 = 30;
const bottomViewMarginTop = (screenHeight-NavigatorBarHeight-SafeBottomHeight)-(sectionHeght*3)-(topContentViewHeight)-10;

var styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
  },
  scrollContentView:{
    marginTop:0,
    width:screenWidth,
    height:screenHeight-NavigatorBarHeight-SafeBottomHeight,
    marginBottom:SafeBottomHeight,
  },
  topView:{
    height:topViewHeight,
    alignSelf:'center',
    justifyContent:'center',
  },
  topContentView:{
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    width:topContentViewWidth,
    height:topContentViewHeight,
    // backgroundColor:'#00ff00',
  },
  topLeftView:{
    height:topLeftHeight,
    width:topLeftHeight,
    // backgroundColor:'#0ff',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  topMiddleView:{
    height:topLeftHeight*2,
    width:topLeftHeight*2,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  topRightView:{
    height:topLeftHeight,
    width:topLeftHeight,
    // backgroundColor:'#0ff',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  bottomMenuView:{
    marginTop:bottomViewMarginTop,
    width:sectionContentWidth,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  middleTopView:{
    // backgroundColor:'#00ff00',
    height:height30,
  },
  middleCenterView:{
    // backgroundColor:'#ff0000',
    height:centerViewHeight,
    alignSelf:'center',
    justifyContent:'center',
  },
  middleBottomView:{
    marginTop:0,
    // backgroundColor:'#0ff',
    height:height30,
    flexDirection:'row',
    alignSelf:'center',
  },
  middleBottomImage:{
    width:30,
    height:30,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  middleButtonView:{
    flexDirection:'row',
    width:sectionContentWidth,
    height:sectionHeght,
    marginBottom:3,
  },
  threeButtonView:{
    flexDirection:'row',
    width: sectionContentWidth/3.0,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
  },
  fourButtonView:{
    flexDirection:'row',
    width:sectionContentWidth/4,
    height:sectionHeght,
    alignItems:'center',
    alignSelf:'center',
    justifyContent:'center',
  },

});

const KEY_OF_MAINPAGE = 'NewAirBoxRemote';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: NewAirBoxRemote,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#ffffff',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
    return (
      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
        <ImageButton
          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
          onPress={() => {
                if (index === 0) {
                  MHPluginSDK.closeCurrentPage();
                } else {
                  navigator.pop();
                }
          }}
          style={[{width:29, height:29, tintColor: '#ffffff'}]}
        />
      </View>
    );
   
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if ((MHPluginSDK.userId == MHPluginSDK.ownerId)&&(index==0)) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{width:29, height:29, tintColor: '#ffffff'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}
module.exports = {
    component:NewAirBoxRemote,
    route: route,
}
