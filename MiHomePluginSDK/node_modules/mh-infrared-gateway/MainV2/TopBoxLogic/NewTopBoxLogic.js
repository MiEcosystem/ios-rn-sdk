'use strict';

var React = require('react-native');

var ImageButton = require('../../CommonModules/ImageButton');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var MatchTool = require('../../MainV2/ConstDefine/matchTool').MatchTool;
var NewMatchRemoter = require('../../MainV2/MatchRemoter/NewMatchRemoter');
var GateWayRemoter = require('../../MainV2/GateWay/GateWayRemoter');
var ProvinceList = require('../../MainV2/TopBoxLogic/TopBox/ProvinceList');
var CityList = require('../../MainV2/TopBoxLogic/TopBox/CityList');
var CityAreaList = require('../../MainV2/TopBoxLogic/TopBox/CityAreaList');
var IPTVBrandList = require('../../MainV2/TopBoxLogic/IPTVBrand/IPTVBrandList');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var { DEVICE_MODEL } = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;

var {
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Image,
    Platform,
    AlertIOS,
    Dimensions,
    TouchableHighlight,
    Component,
    ActivityIndicatorIOS,
    PixelRatio,
} = React;


import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MHMapLocation = NativeModules.MHMapLocation;
var MHMapSearch = NativeModules.MHMapSearch;
var subscription;
var brandIdMap = {};

class NewTopBoxLogic extends Component {
    constructor(props) {
        super(props);
        var newDataSource = {
            "index": {
                "foregroundColor": "#666666",
            },
            "sections": []
        };
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            selectGateWayID: '',
            select_GateWayId: this.props.select_GateWayId,
            requestStatus: false,
            clicked: 'none',
            devMode: MHPluginSDK.devMode,
            showBackView: false,
            dataSource: newDataSource,
            lineups: [],
            area_id: '',                            //区域ID
            city_id: '',                            //城市ID
        };
    }

    /* 1.0*/
    componentDidMount() {
        var self = this;
        MHMapLocation.reLocationWithReGeocode(false, (location, regeocode, error) => {
            // console.log(location);
            if ((location != undefined) && (location != {})) {

                MHMapSearch.reGeocodeSearch(location, (isSuccess, json) => {
                    if (isSuccess) {
                        console.log('----MHMapSearch.reGeocodeSearch----------' + JSON.stringify(json));
                        self.getCurrentCityInfo_DataSource(json)
                    }
                    else { alert('操作失败') }
                });

            }
        });

    }

    /* 2.0*/
    triggerRefreshUI() {
        var dataSource = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });
        this.state.dataSource = dataSource.cloneWithRows(this.state.lineups);
    }

    /* 3.0渲染*/
    render() {
        //如果存在遥控器
        this.triggerRefreshUI();

        if (this.state.requestStatus == false) {

            return (
                <View style={styles.container}>
                    <ActivityIndicatorIOS
                        animating={true}
                        style={[styles.centering, { height: 80 }]}
                        size="small" />
                </View>
            );
        } else {

            return (
                <View style={styles.mainContainer}>
                    <MessageToast ref='toast' />
                    <View style={styles.deviceListView}>
                        <ListView style={styles.remoterList}
                            enableEmptySections={true}
                            dataSource={this.state.dataSource}
                            renderRow={this._renderRow.bind(this)}
                            automaticallyAdjustContentInsets={false} />
                    </View>
                </View>
            );

        }





    }


    /* 1.获取当前城市area_id */
    getCurrentCityInfo_DataSource(Model) {
        /* {"title":"上海市","subTitle":"上海市徐汇区虹梅路街道上海虹金塑料厂综合大楼漕宝路401号园区"} */
        var self = this;
        var param;
        if ((Model != undefined) && (Model != {})) {
            if (Model.subTitle != undefined) {

                param = this.deal_LocationStr(Model.subTitle);
            }
        }

        if (param == undefined) {
            alert('无法获取当前定位信息');
            return;
        }

        var province = (param.province != undefined) ? (param.province) : ('')
        var city = (param.city != undefined) ? (param.city) : ('')
        var area = (param.area != undefined) ? (param.area) : ('');
        this.currentCityInfoStr = LocalizedStrings.ir_match_location_format + province + city + area;

        MIRequestServer.Post_GetCurrentCityInfo(param,
            function(response) {

                if (response.result != undefined) {
                    self.setup_DataSource(response.result);
                }
            }, function(error) {
                self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
            });
    }

    /* 2.处理地理编码获取的位置信息-字符串*/
    deal_LocationStr(str) {
        var reg = /(省|市|区|县)/;
        var array = str.split(reg);
        var province; var city; var area; var county;

        array.forEach((element, index) => {
            if (element == '省') {

                province = (province == undefined) ? (array[index - 1] + array[index]) : (province);
            } else if (element == '市') {

                city = (city == undefined) ? (array[index - 1] + array[index]) : (city);
            } else if (element == '区') {

                area = (area == undefined) ? (array[index - 1] + array[index]) : (area);
            } else if (element == '县') {

                county = (county == undefined) ? (array[index - 1] + array[index]) : (county);
            }
        });

        var param = {
            "province": province,
            "city": city,
            "area": area,
        };
        return param;
    }

    /* 3.获取列表显示信息*/
    setup_DataSource(resultModel) {
        /* {"area_id":310104,"city_id":310100} */

        console.log(' setup_DataSource(resultModel )------------------------' + JSON.stringify(resultModel));
        var param;
        var self = this;
        if (resultModel.area_id != undefined) {
            param = { "area_id": resultModel.area_id };
        }

        MIRequestServer.Post_GetCurrentCityOperatorList(param,
            function(response) {

                if (response.result != undefined) {
                    if (response.result.lineups != undefined) {

                        response.result.lineups.unshift(self.addTitleData());
                        self.setState({
                            lineups: response.result.lineups,
                            area_id: resultModel.area_id,
                            city_id: resultModel.city_id,
                            requestStatus: true
                        });
                    }
                }

            }, function(error) {
                self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
            });
    }

    addTitleData() {
        var model = {
            "AreaId": 0,
            "Name": this.currentCityInfoStr,
            "SpId": undefined,
            "Rank": undefined,
            "SpType": undefined,
            "Id": undefined
        };
        return model;
    }

    /* 列表一行，用来展示一个遥控器*/
    _renderRow(rowData, sectionID, rowID) {
        /*
          {"AreaId":0,"Name":"上海联通IPTV(百视通小红R3300-M适用)","SpId":2930,"Rank":0,"SpType":1,"Id":"QVzwzkZDQgwT"}
        */
        rowData.sectionID = sectionID;
        rowData.rowID = rowID;
        if (rowData.SpId == undefined) {
            /*顶部的view*/
            return (
                <TouchableHighlight underlayColor='#838383' onPress={() => this._pressRow(rowData)} >
                    <View>
                        <View style={styles.currentLocationRowCell}>
                            <View style={[styles.leftIconView, {}]}>
                                <Image style={[styles.leftImage]}
                                    source={{ isStatic: !MHPluginSDK.devMode, uri: MHPluginSDK.basePath + 'NewControllerImage/brand_location.png' }} />
                            </View>
                            <View style={styles.currentLocationRowContentCell}>
                                <Text style={styles.remoterName}>{rowData.Name}</Text>
                            </View>
                        </View>
                        <View style={styles.separator}></View>
                    </View>
                </TouchableHighlight>
            );

        } else {
            return (
                <TouchableHighlight underlayColor='#838383' onPress={() => this._pressRow(rowData)} >
                    <View>
                        <View style={styles.remoterListRowCell}>
                            <Text style={styles.remoterName}>{rowData.Name}</Text>
                        </View>
                        <View style={styles.separator}></View>
                    </View>
                </TouchableHighlight>
            );
        }
    }

    /* 点击一行 */
    _pressRow(rowData) {


        /* 逻辑处理 {
           "AreaId": 0,1
           "Name": "上海联通IPTV(百视通小红R3300-M适用)",
           "SpId": 2930,
           "Rank": 0,
           "SpType": 1,
           "Id": "QVzwzkZDQgwT"
         }
        */
        var self = this;
        var row = rowData.rowID;
        var deviceModel = DEVICE_MODEL.STB;
        var deviceType = deviceModel.id;
        var SpType = rowData.SpType;
        var sp_id = rowData.SpId;
        const default_GateWayID = this.state.select_GateWayId;
        this.lineup_id = rowData.Id;/* 添加遥控器的时候用到 用于频道切换*/
        console.log('_pressRow------rowData:' + JSON.stringify(rowData));


        if (row == 0) {
            this.province_Logic();

        } else if (SpType == 1) { /* IPTV 需要选择品牌  选品牌->匹配页面*/


            this.props.navigator.push({
                ...IPTVBrandList.route,
                passProps: {
                    deviceType: deviceType,
                    select_GateWayId: default_GateWayID,
                    selectBrandEvent: function(brand_Id, selectGateWayID) {
                        console.log('IPTV---------brand_Id：' + brand_Id + '-----------selectGateWayID：' + default_GateWayID);

                        self.pushTo_IPTV_MatchRemoter(brand_Id, default_GateWayID);
                    }
                }
            });

        } else if (SpType == 0) { /* 直接对码页面 卫星机顶盒类型 */

            self.pushTo_SP_MatchRemoter(sp_id, default_GateWayID);
        }
    }


    /* 1.选择省份*/
    province_Logic() {
        var self = this;
        this.props.navigator.push({
            ...ProvinceList.route,
            passProps: {
                selectedRow: function(ObjectMode) {/*跳转城市 选择*/

                    self.province_Logic_two(ObjectMode);
                }
            }
        });
    }
    /* 2.选择城市*/
    province_Logic_two(ObjectMode) {
        var province_id = ObjectMode.id;


        var self = this;
        this.props.navigator.push({
            title: '匹配',
            ...CityList.route,
            passProps: {
                province_id: province_id,
                selectedRow: function(model) {/*跳转城市 选择*/

                    self.province_Logic_three(model);
                }
            }
        });
    }
    /*3.选择城市区域获取城市ID*/
    province_Logic_three(model) {

        var city_id = model.id;
        var city_name = model.jsTitle;
        console.log('province_Logic_three----------------------------' + JSON.stringify(model));

        var self = this;
        this.props.navigator.push({
            ...CityAreaList.route,
            passProps: {
                city_id: city_id,
                city_name: city_name,
                selectedRow: function(data) {

                    self.currentCityInfoStr = LocalizedStrings.ir_match_location_format + data.name;
                    self.setup_DataSource(data);
                }
            }
        });
    }


    /* */
    pushTo_SP_MatchRemoter(sp_id, selectGateWayID) { /*运营商 isSetTopTV 为true，和运营商id，城市id和网关ID*/

        var deviceType = DEVICE_MODEL.STB.id;
        // console.log('pushTo_SP_MatchRemoter-----------------------'+JSON.stringify({
        //   deviceType:deviceType,
        //   selectDeviceId:selectGateWayID,
        //   sp_id:sp_id,
        //   city_id:this.state.city_id,
        //   isSetTopTV:true,
        // }));

        this.props.navigator.push({
            title: '匹配',
            ...NewMatchRemoter.route,
            passProps: {
                deviceType: deviceType,
                selectDeviceId: selectGateWayID,
                sp_id: sp_id,
                city_id: this.state.city_id,
                lineup_id: this.lineup_id,
                isSetTopTV: true,
            }
        });
    }

    /* */
    pushTo_IPTV_MatchRemoter(brand_id, selectGateWayID) { /*普通IPTV 只需要一个品牌ID 的入参 ，和isIPTV 的判断*/

        var deviceType = DEVICE_MODEL.STB.id;
        // console.log('pushTo_IPTV_MatchRemoter-----------------------'+JSON.stringify({
        //   deviceType:deviceType,
        //   selectDeviceId:selectGateWayID,
        //   sp_id:sp_id,
        //   city_id:this.state.city_id,
        //   isSetTopTV:true,
        // }));
        this.props.navigator.push({
            title: '匹配',
            ...NewMatchRemoter.route,
            passProps: {
                deviceType: deviceType,
                selectDeviceId: selectGateWayID,
                brand_id: brand_id,
                lineup_id: this.lineup_id,
                isIPTV: true,
            }
        });
    }

};

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);
const KEY_OF_MAINPAGE = 'NewTopBoxLogic';
const CellHeight = 60;

var styles = StyleSheet.create({
    centering: {
        flex: 1,
        flexDirection: 'column',
        alignSelf: 'stretch',
        justifyContent: 'center',
    },
    container: {
        flex: 1,
        alignSelf: 'center',
        backgroundColor: '#f8f8f8',
    },
    mainContainer: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: '#f8f8f8',
    },
    deviceListView: {
        flex: 1,
        height: screenHeight - NavigatorBarHeight,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 0,
        marginTop: NavigatorBarHeight,
        backgroundColor: '#ffffff',
    },
    remoterListRowCell: {
        flexDirection: 'row',
        padding: 22,
        height: CellHeight,
    },
    currentLocationRowCell: {
        flexDirection: 'row',
        height: CellHeight,
        backgroundColor: '#C0C0C0',
    },
    currentLocationRowContentCell: {
        width: screenWidth - 60,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        flexDirection: 'row',
    },
    leftIconView: {
        width: 40,
        height: CellHeight,
        justifyContent: 'center',
        alignItems: 'center',
        alignItems: 'center',
    },
    leftImage: {
        width: 16,
        height: 19.2,
    },
    remoterList: {
        alignSelf: 'stretch',
    },
    remoterName: {
        fontSize: 15,
        opacity: 0.7,
        alignSelf: 'center',
        color: '#000000',
        marginLeft: 5,
    },
    separator: {
        height: 0.5,
        backgroundColor: 'rgba(0, 0, 0, 0.2)',
        marginLeft: 20,
        marginRight: 20
    },

});


var route = {
    key: KEY_OF_MAINPAGE,
    title: LocalizedStrings.set_top_box_list,
    component: NewTopBoxLogic,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#808080',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {
        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );
    },
    renderNavRightComponent: function(route, navigator, index, navState) {
        if (MHPluginSDK.userId == MHPluginSDK.ownerId) // 非分享设备
        {
            return null;
        }
        else {
            return null;
        }
    },
}


module.exports = {
    component: NewTopBoxLogic,
    route: route
};
