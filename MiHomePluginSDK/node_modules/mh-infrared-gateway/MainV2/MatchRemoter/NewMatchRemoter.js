var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var ImageButton = require('../../CommonModules/ImageButton');
var TitleButton = require('../../CommonModules/TitleButton');
var Button = require('../../CommonModules/Button');
var { MODEL_WITH_TYPE } = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var { TYPE_WITH_MODEL, DEVICE_MODEL } = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var ButtonModelFactory = require('../../MainV2/ConstDefine/ButtonModelFactory').ButtonModelFactory;
var DeviceFactory = require('../../MainV2/ConstDefine/DeviceFactory').DeviceFactory;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var Customer_studyRemoter = require('../../MainV2/AllStudyRemoter/Customer_studyRemoter');

var {
    PixelRatio,
    Platform,
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Animated,
    Easing,
    Dimensions,
    Image,
    TouchableHighlight,
    Component,
    ScrollView,
} = React;


const SPRING_CONFIG = { tension: 2, friction: 3 };

/* 自定义按钮组件 */
var NormalButtonView = React.createClass({
    render: function() {

        var model = this.props.model;
        var name, buttonModel, imageNormal, imagePress, display_name;

        if ((model != undefined) && (model != {})) {
            if (model.key != undefined) {
                if (model.key.name != undefined) {
                    name = model.key.name;
                    buttonModel = ButtonModelFactory.GetButtonImage_WithName(name);
                    imageNormal = '/MatchImage/' + buttonModel.imageNormal;
                    imagePress = '/MatchImage/' + buttonModel.imagePress;
                    display_name = model.key.display_name;
                }
            }
        }

        return (
            <View style={styles.buttonContentView}>
                <Button
                    style={styles.Button}
                    onPress={() => { this.onPress(this.props.model) }}
                    style={{ marginRight: 50 / 2.0 }}
                    imageWidth={100}
                    imageHeight={100}
                    imageNormal={imageNormal}
                    imageHighlight={imagePress} />
                <Text style={{ marginTop: 5, }}>{display_name}</Text>
            </View>
        );
    },

    onPress(event) {
        if (this.props.touchEvent != undefined) {
            this.props.touchEvent(event);
        }
    }


});

/* 空调按钮view  数据模型不太一样*/
var AriBoxButtonView = React.createClass({
    render: function() {
        var model = this.props.model;
        var name, buttonModel, imageNormal, imagePress, display_name;

        if ((model != undefined) && (model != {})) {
            if (model.key != undefined) {
                if (model.key.ac_key != undefined) {
                    name = model.key.ac_key;
                    buttonModel = ButtonModelFactory.Air_GetButtonImage_WithName(name);
                    imageNormal = '/MatchImage/' + buttonModel.imageNormal;
                    imagePress = '/MatchImage/' + buttonModel.imagePress;
                    display_name = buttonModel.display_name;
                }
            }
        }


        return (
            <View style={styles.buttonContentView}>
                <Button
                    style={styles.Button}
                    onPress={() => { this.onPress(this.props.model) }}
                    style={{ marginRight: 50 / 2.0 }}
                    imageWidth={100}
                    imageHeight={100}
                    imageNormal={imageNormal}
                    imageHighlight={imagePress} />
                <Text style={{ marginTop: 5, }}>{display_name}</Text>
            </View>
        );
    },

    onPress(event) {
        if (this.props.touchEvent != undefined) {
            this.props.touchEvent(event);
        }
    }


});

/*-----------------------------------------------------------------------------*/

var deviceName = '';

class NewMatchRemoter extends Component {
    constructor(props) {
        super(props);
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            deviceType: this.props.deviceType,//设备类型
            selectDeviceId: this.props.selectDeviceId,//网关id
            rawDataArray: [],                 //原始数据数组
            remoterArray: [],                 //总计套 数据
            currentSelectModel: {},           // 当前显示在页面的model 
            translateY: new Animated.Value(screenHeight),
            device_Factory: new DeviceFactory(),

            brand_id: this.props.brand_id,       /* 1.品牌ID (普通) */
            /*----------------------------------------------------*/
            isSetTopTV: this.props.isSetTopTV,   /* 2.卫星机顶盒（ 是否）*/
            sp_id: this.props.sp_id,             /* 2.指定运营商ID*/
            city_id: this.props.city_id,         /* 2.城市ID*/
            /*----------------------------------------------------*/
            isIPTV: this.props.isIPTV,           /* 3.IPTV （ 是否）*/
            lineup_id: this.props.lineup_id,     /* 2 和 3 在添加遥控器都会用到*/
            /*----------------------------------------------------*/
            /* 测试 */
            opticity: new Animated.Value(1),
            contentMarginLeft: new Animated.Value(0),
            contentMarginRight: new Animated.Value(0),
        };

        console.log('----NewaMatchRemoter----this.state------------' + JSON.stringify(this.state));
        this.stacks_Array = [];
        this.isEnableClick = true;
    }

    componentWillMount() {
        this.setup_Data();

        var device_Model = this.state.device_Factory.GetDeviceModel_WithType(this.state.deviceType);
        if (device_Model != undefined) {
            deviceName = device_Model.China_name;
        }

    }

    /* 1.请求数据*/
    setup_Data() {


        /* 3.指定运营商的  所有遥控器ID (卫星电视机顶盒)*/
        if (this.state.isIPTV == true) {
            console.log('2.指定运营商的  所有遥控器ID');
            this.getDataSourceWith_setTop_ID();
        }

        /* 2.卫星电视机顶盒  （IPTV）*/
        else if (this.state.isSetTopTV == true) {
            console.log('2.卫星电视机顶盒');
            this.getDataSourceWith_Operator_ID();
        }

        /* 1.某品牌 某类型的 所有遥控器ID*/
        else if (this.state.brand_id != undefined) {
            console.log('1.某品牌 某类型的 所有遥控器ID');
            this.getDataSourceWith_Brand_ID();
        }
    }

    /* 1.1 获取某品牌 某设备类型下的 匹配遥控器ID*/
    getDataSourceWith_Brand_ID() {

        if (this.state.deviceType == undefined) {
            // this.refs.toast.showMessage('缺少--设备类型参数');
            return;
        }
        if (this.state.brand_id == undefined) {
            // this.refs.toast.showMessage('缺少--品牌ID参数');
            return;
        }

        var self = this;
        var URL = 'https://cdn.cnbj1.fds.api.mi-img.com/irservice/match/v2/category/' + this.state.deviceType + '/brand/' + this.state.brand_id;
        console.log('--1111---URL----' + URL);
        fetch(URL, {
            method: 'GET',
        })
            .then((response) => response.json())
            .then((response) => {
                var nodes = response.nodes;
                self.deal_data(nodes);
                console.log('-------success------------' + JSON.stringify(nodes));
            })
            .catch((error) => {
                console.log('-------error------------' + JSON.stringify(error));
            });

    }

    /* 1.2 获取指定运营商 匹配遥控器ID  (卫星电视机顶盒)*/
    getDataSourceWith_Operator_ID() {

        var self = this;
        var URL = 'https://cdn.cnbj1.fds.api.mi-img.com/irservice/match/v2/city/' + this.state.city_id + '/sp/' + this.state.sp_id;
        console.log('---2222--URL----' + URL);
        fetch(URL, {
            method: 'GET',
        })
            .then((response) => response.json())
            .then((response) => {
                var nodes = response.nodes;
                self.deal_data(nodes);
                console.log('-------success------------' + JSON.stringify(nodes));
            })
            .catch((error) => {
                console.log('-------error------------' + JSON.stringify(error));
            });

    }

    /* 1.3 获取指定品牌IPTV 匹配遥控器ID （IPTV）*/
    getDataSourceWith_setTop_ID() {

        var self = this;
        var URL = 'https://cdn.cnbj1.fds.api.mi-img.com/irservice/match/v2/iptv/' + this.state.brand_id;
        console.log('---3333--URL----' + URL);
        fetch(URL, {
            method: 'GET',
        })
            .then((response) => response.json())
            .then((response) => {
                var nodes = response.nodes;
                self.deal_data(nodes);
                console.log('-------success------------' + JSON.stringify(nodes));
            })
            .catch((error) => {
                console.log('-------error------------' + JSON.stringify(error));
            });

    }

    /* 2。渲染方法 */
    render() {
        let molecule = '';
        let Denominator = '';
        if (this.state.currentSelectModel != undefined) {
            molecule = this.state.currentSelectModel.cursor
            Denominator = this.state.currentSelectModel.total
        }

        return (
            <View style={styles.containerAll}>
                <MessageToast ref='toast' />
                <View style={styles.contentView}>
                    <View style={styles.titleTopView}>
                        <Text style={styles.topTitle}>{LocalizedStrings.ir_add_ic_description}</Text>
                    </View>
                    <View style={styles.titleMiddleView}>
                        <Text style={styles.middleTitle}>{LocalizedStrings.ir_confirm_button_description_after}</Text>
                        <Text style={styles.middleTitle}>{LocalizedStrings.ir_confirm_button_confirm}{deviceName}{LocalizedStrings.ir_confirm_button_response}</Text>
                    </View>
                    <View style={styles.titleMiddleView}>
                        <Text style={styles.topTitle}>{LocalizedStrings.ir_add_ic_test_btn_num}({molecule}/{Denominator})</Text>
                    </View>
                    <View style={styles.scrollContentView}>
                        <View style={[styles.leftButtonView]}>
                            <Button style={[styles.Button, { opacity: this.isOptiCity_LeftButton() }]}
                                key='leftButton'
                                enabled={this.isEnableLeftButton()} onPress={() => { this.onPressLeftButton() }}
                                style={{ marginRight: 50 / 2.0 }} imageWidth={50} imageHeight={50} i
                                imageNormal="/NewAirControllerImage/match_left_normal.jpg"
                                imageHighlight="/NewAirControllerImage/match_left_press.jpg" />
                        </View>
                        <View style={styles.scrollView}>
                            <View style={[styles.scrollView, {}]}>
                                <Animated.View style={[{ opacity: this.state.opticity, left: this.state.contentMarginLeft, right: this.state.contentMarginRight }, styles.AnimateView]} >
                                    {
                                        this.handleContentButton()
                                    }
                                </Animated.View>
                            </View>
                        </View>
                        <View style={[styles.rightButtonView]}>
                            <Button style={[styles.Button, { opacity: this.isOptiCity_RightButton() }]}
                                enabled={this.isEnableRightButton()} onPress={() => { this.onPressRightButton() }}
                                key='rightButton'
                                style={{ marginRight: 50 / 2.0 }} imageWidth={50} imageHeight={50}
                                imageNormal="/NewAirControllerImage/match_right_normal.jpg"
                                imageHighlight="/NewAirControllerImage/match_right_press.jpg" />
                        </View>
                    </View>
                </View>

                {/* 隐藏于底部的view */}
                <Animated.View style={[styles.bootView,
                { top: this.state.translateY }]} >
                    <View style={styles.bottView_topView}>
                        <Text style={{ fontSize: 16 }}>{LocalizedStrings.device_is_response}</Text>
                    </View>
                    <View style={styles.bottView_bottomView}>
                        <View style={styles.bootButtonView}>
                            <TitleButton style={styles.bottomButton} onPress={() => this.onPressCancelButton()} titleSize={17} title={LocalizedStrings.match_cancel_button} />
                        </View>
                        <View style={styles.bootButtonView}>
                            <TitleButton style={styles.bottomButton} onPress={() => this.onPressOkButton()} titleSize={17} title={LocalizedStrings.match_ok_button} />
                        </View>
                    </View>
                </Animated.View>
            </View>
        );
    }

    /* 3.处理数据*/
    deal_data(dataArray) {
        /* 数据格式
        {   "id": 1,
            "key": {
                "id": 1,
                "name": "POWER",
                "display_name": "电源"
            },
            "controller_id": 3757,
            "count": 1,
            "cursor": 1,
            "total": 1,
            "matched": 2,
            "mismatched": null}
        */
        if (dataArray.length > 0) {

            var currentModel = dataArray[0];
            this.push_stacks(currentModel.id);
            this.setState({ currentSelectModel: currentModel, rawDataArray: dataArray })
            console.log('deal_data-----currentModel------' + JSON.stringify(currentModel));
        }
    }

    /* 4.渲染内部的view */
    handleContentButton() {

        var model = this.state.currentSelectModel
        console.log('------ handleContentButton----------' + JSON.stringify(model));
        /* 根据给到的值 判断是有状态还是无状态*/
        var isStateless = false;
        if ((model != undefined) && (model != {})) {
            if (model.key != undefined) {
                if ((model.key.ac_key != undefined) && (model.key.id == undefined)) {

                    isStateless = true;
                }
            }
        }

        if (isStateless == true) {/*空调*/
            var element = <AriBoxButtonView model={model} key={JSON.stringify(model)} touchEvent={(event) => this.airBoxButton_touchEvent(event)} />;
        } else {
            var element = <NormalButtonView model={model} key={JSON.stringify(model)} touchEvent={(event) => this.normalButton_touchEvent(event)} />;
        }
        return element;
    }

    /* 查找匹配的情况下对应的 match  */
    findMatch_WithModelID() {

        var model = this.state.currentSelectModel;
        var matched = model.matched;
        var matchModel;
        var rawDataArray = this.state.rawDataArray;
        // console.log('-------rawDataArray JSON-------'+JSON.stringify(rawDataArray) );
        // console.log('-------rawDataArray.length-------'+rawDataArray.length );
        rawDataArray.forEach(element => {
            if (matched == element.id) { /* 匹配该数据*/
                matchModel = element;
                console.log('----findMatch_WithModelID---matched-------' + matched + '----model.matched-------' + element.id);
                return;
            }
        });

        if (matchModel != undefined) {
            console.log('-findMatch_WithModelID------newMatchModel-----------------------' + JSON.stringify(matchModel));
            this.moving_to_Left();
            this.push_stacks(matchModel.id);
            this.setState({ currentSelectModel: matchModel });
        }
    }

    /* 查找不匹配的情况下的  mismatched */
    findMismatched_WithModelID() {

        var model = this.state.currentSelectModel;
        var mismatched = model.mismatched;
        var mismatchModel;
        var rawDataArray = this.state.rawDataArray;
        // console.log('-------rawDataArray JSON-------'+JSON.stringify(rawDataArray) );
        // console.log('-------rawDataArray.length-------'+rawDataArray.length );

        rawDataArray.forEach(element => {
            if (mismatched == element.id) { /* 匹配该数据*/
                mismatchModel = element;

                console.log('--findMismatched_WithModelID-----matched-------' + mismatched + '----model.matched-------' + element.id);
                return;
            }
        });


        if (mismatchModel != undefined) {
            console.log('---findMismatched_WithModelID----newMatchModel-----------------------' + JSON.stringify(mismatchModel));
            this.moving_to_Left();
            this.push_stacks(mismatchModel.id);
            this.setState({ currentSelectModel: mismatchModel });
        }

    }

    /* 跳转到特定model 用于返回*/
    findPreviousModel_WithIndex(currentModel_Index) {

        if (currentModel_Index == undefined) { return; }
        let matchModel;
        let rawDataArray = this.state.rawDataArray;
        rawDataArray.forEach(element => {
            if (currentModel_Index == element.id) { /* 匹配该数据*/
                matchModel = element;
                console.log('-------matched-------' + currentModel_Index + '----model.matched-------' + element.id);
                return;
            }
        });


        if (matchModel != undefined) {
            console.log('-------newMatchModel-----------------------' + JSON.stringify(matchModel));
            this.setState({ currentSelectModel: matchModel });
        }
    }

    /* 否按钮 */
    onPressCancelButton(event) {
        /* 点击否，切换到下一套*/

        var mismatched = this.state.currentSelectModel.mismatched;
        if (mismatched == null) { /*最后一个 添加*/

            this.push_CustomerRemoter();
            this.refs.toast.showMessage(LocalizedStrings.ir_single_match_failed);
        } else { /*  还有值的情况 */
            console.log('--------onPressCancelButton--not mismatched--------');
            this.onPressRightButton();
        }
    }

    /* ok 按钮*/
    onPressOkButton(event) {
        /* 数据格式
        { "id": 5,
            "key": {
                "id": 1,
                "name": "POWER",
                "display_name": "电源"
            },
            "controller_id": 4586,
            "count": 27,
            "matched": null,
            "mismatched": 6 }
        */
        this.showBottomView(false);
        var matched = this.state.currentSelectModel.matched;
        if ((matched == null) || (matched == undefined)) { /*最后一个 添加*/
            console.log('--------openNewRemoter_Success----------');
            this.openNewRemoter_Success();
        } else {
            /*  还有值的情况 */
            console.log('--------findMatch_WithModelID----------');
            this.findMatch_WithModelID();
        }
    }

    /* 触摸按钮事件 */
    normalButton_touchEvent(event) {
        /*发送红外码键值*/
        this.normalButton_onPressButton(event);
        console.log('-touchEvent--------------------' + JSON.stringify(event));
        this.showBottomView(true);
    }

    airBoxButton_touchEvent(event) {
        /*发送红外码键值*/
        this.airBoxButton_onPressButton(event);
        console.log('-touchEvent--------------------' + JSON.stringify(event));
        this.showBottomView(true);
    }

    /* 普通发码*/
    normalButton_onPressButton(event) {

        var key_id, controller_id;
        var self = this;
        if ((event != undefined) && (event.key != undefined)) {
            if (event.key.id != undefined) {
                key_id = event.key.id;
                controller_id = event.controller_id;
            }
        }

        if (key_id != undefined) {
            var param = {
                "did": this.state.selectDeviceId,
                controller_id: controller_id,
                "key_id": key_id
            };

            console.log('param--------------------' + JSON.stringify(param));
            MIRequestServer.Post_SendMatchkeyCode(param,
                function(response) {
                    console.log('Post_SendMatchkeyCode' + JSON.stringify(response));

                }, function(error) {
                    console.log('normalButton_onPressButton---error---' + JSON.stringify(response));
                });
        }

    }

    /* 有状态空调发码*/
    airBoxButton_onPressButton(event) {

        var ac_key, controller_id;
        var self = this;
        if ((event != undefined) && (event.key != undefined)) {
            if (event.key.ac_key != undefined) {
                ac_key = event.key.ac_key;
                controller_id = event.controller_id;
            }
        }

        if (ac_key != undefined) {

            var param = {
                "did": this.state.selectDeviceId,
                controller_id: controller_id,
                "ac_key": ac_key,
            };
            MIRequestServer.Post_SendMatchkeyCode(param,
                function(response) {
                    if ((response.code != undefined) && (response.code == 0)) {
                        console.log('airBoxButton_onPressButton--success--' + JSON.stringify(response));
                    }

                }, function(error) {

                    console.log('airBoxButton_onPressButton---' + JSON.stringify(error));
                });
        }

    }


    /* 跳转到自定义遥控器*/
    push_CustomerRemoter() {

        this.props.navigator.push({
            ...Customer_studyRemoter.route,
            passProps: {
                selectGateWay_ID: this.state.selectGateWay_ID,
            }
        });

    }


    /* 成功添加*/
    openNewRemoter_Success() {

        if (this.isEnableClick == false) { /*该方法和参数 避免创建多个重复遥控器*/
            return;
        }
        this.isEnableClick = false;

        /*发送接口，添加遥控器*/
        var self = this;
        /* 设备model */
        var modelID = MODEL_WITH_TYPE[this.state.deviceType];
        console.log('this.state.deviceType-----------------------' + this.state.deviceType);
        console.log('modelID-----------------------' + JSON.stringify(modelID));


        var currentRemoterModel = this.state.currentSelectModel;
        /*  currentRemoterModel 数据类型；
            {"id":2595,"type":1,"frequency":38000}
        */
        /* 当前遥控器ID */
        var currentRemoterID = currentRemoterModel.controller_id;
        /* 设备deviceID */
        var deviceId = MHPluginSDK.deviceId;
        /* 设备分类*/
        var category = TYPE_WITH_MODEL[MHPluginSDK.deviceModel];
        /* 设备默认名称 */
        var deviceName = "设备";

        /* 如果这个matchRemoter 是其它遥控器插件  选择了网关设备 则用选择的网关ID*/
        if (this.state.selectDeviceId != undefined) {
            deviceId = this.state.selectDeviceId;
            console.log('this.state.selectDeviceId:' + this.state.selectDeviceId);
        }

        /* 如果通过props 传入了deviceType 则用*/
        if (this.state.deviceType != undefined) {
            category = this.state.deviceType;
            var deviceModel = this.state.device_Factory.GetDeviceModel_WithType(category);
            deviceName = deviceModel.China_name;
            modelID = deviceModel.model;
            console.log('如果通过props 传入了deviceType---category:' + category + '---deviceName:' + deviceName + '----modelID:' + modelID);
        }

        var param = {
            "parent_id": deviceId,
            "category": category,
            "controller_id": currentRemoterID,
            "name": deviceName,
            'lineup_id': this.state.lineup_id,
        };
        MIRequestServer.Post_AddRemoter(param,
            function(response) {

                if (response.result.did != undefined) {
                    var result = response.result;
                    self.isEnableClick = true;
                    self.openSuccessPage(modelID, result.did);
                }

            }, function(error) {
                self.isEnableClick = true;
                console.log('openNewRemoter_Success----' + JSON.stringify(error));
            });
    }

    /* 单独跳转的function */
    openSuccessPage(deviceMode, deviceId) {
        /* 第一个参数是model 字符串 */
        /* 第二个参数是设备did */
        MHPluginSDK.openConnectSucceedPage(deviceMode, deviceId);
    }

    /* 上一页*/
    onPressLeftButton(event) {

        var self = this;
        let arrayLength = this.stacks_Array.length;
        let index = arrayLength - 2;
        console.log('------onPressLeftButton------index--------------' + JSON.stringify(index));
        console.log('------onPressLeftButton------this.stacks_Array--------------' + JSON.stringify(this.stacks_Array));
        if (index >= 0) {
            var currentRemoterModel = this.stacks_Array[index];
            console.log('------onPressLeftButton------currentRemoterModel--------------' + JSON.stringify(currentRemoterModel));
            self.findPreviousModel_WithIndex(currentRemoterModel);
            self.pop_stacks(currentRemoterModel);
            self.moving_to_Left();
            self.showBottomView(false);
        }
        else {
            /* 归 0 处理 */
            self.refs.toast.showMessage('已经到前面一套遥控器了');
        }
    }

    /* 下一页 */
    onPressRightButton() {

        var self = this;
        if (this.state.currentSelectModel != undefined) {
            if ((this.state.currentSelectModel.mismatched != undefined) && (this.state.currentSelectModel.mismatched != null)) {

                this.findMismatched_WithModelID();
                self.moving_to_Right();
                self.showBottomView(false);
            }
            else if (this.state.currentSelectModel.mismatched == null) {
                self.refs.toast.showMessage('已经到最后一套遥控器了');
            }
        }
    }

    /* 向右滑动一次，压栈push */
    push_stacks(index_ID) {
        if (index_ID == undefined) { return };

        let index = this.stacks_Array.indexOf(index_ID);
        if (index == (-1)) {
            this.stacks_Array.push(index_ID);
        }
        // console.log('stacks_Array-push--------------'+JSON.stringify(this.stacks_Array));
    }

    /* 向左滑动一次，出栈pop */
    pop_stacks(index_ID) {

        if (index_ID == undefined) { return };
        let index = this.stacks_Array.indexOf(index_ID);
        if (index != (-1)) {

            this.stacks_Array.pop(index_ID);
        }
        // console.log('stacks_Array--pop-------------'+JSON.stringify(this.stacks_Array));
    }

    /*  左右侧 按钮 展示和状态*/
    isEnableLeftButton() {

        let result = false;
        let length = this.stacks_Array.length;
        if (length > 0) {
            result = true;
        }
        return true;
    }

    isEnableRightButton() {
        var result = false;
        if (this.state.currentSelectModel != undefined) {
            if (this.state.currentSelectModel.matched != null) {
                result = true;
            }
        }
        return result;
    }

    /* 是否显示 左右按钮 */
    isOptiCity_LeftButton() {
        var status = this.isEnableLeftButton();
        var value = (status == true) ? (1) : (0);
        return value;
    }

    isOptiCity_RightButton() {
        var status = this.isEnableRightButton();
        var value = (status == true) ? (1) : (0);
        return value;
    }

    /* 是否显示底部view 动画*/
    showBottomView(isShow) {
        /*显示*/

        // this.setState({'title':currentTitle});
        if (isShow == true) {
            setTimeout(() => {
                Animated.timing(
                    this.state.translateY,
                    {
                        toValue: (screenHeight) - bootButtonViewHeight,
                    }
                ).start();
            }, 50);


        } else {
            /* 隐藏*/
            setTimeout(() => {
                Animated.timing(
                    this.state.translateY,
                    {
                        toValue: (screenHeight),
                    }
                ).start();
            }, 50);
        }

    }

    /* 左移动 动画*/
    moving_to_Left() {

        Animated.sequence([
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: -(buttonViewWidth / 2),
                    duration: 100,
                },
            ),
            Animated.timing(
                this.state.opticity,
                {
                    toValue: 0,
                    duration: 50,
                },
            ),
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: (buttonViewWidth / 2),
                    duration: 100,
                },
            ),
            Animated.timing(
                this.state.opticity,
                {
                    toValue: 1,
                    duration: 50,
                },
            ),
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: 0,
                    duration: 100,
                } ,
            ),
        ]).start();

    }

    /* 右移动 动画*/
    moving_to_Right() {

        Animated.sequence([
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: (buttonViewWidth / 2),
                    duration: 80,
                },
            ),
            Animated.timing(
                this.state.opticity,
                {
                    toValue: 0,
                    duration: 50,
                },
            ),
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: -(buttonViewWidth / 2),
                    duration: 100,
                },
            ),
            Animated.timing(
                this.state.opticity,
                {
                    toValue: 1,
                    duration: 50,
                },
            ),
            Animated.timing(
                this.state.contentMarginLeft,
                {
                    toValue: 0,
                    duration: 100,
                } ,
            ),
        ]).start();

    }

}


var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const KEY_OF_MAINPAGE = 'NewMatchRemoter';
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);

const buttonViewWidth = 150;
const buttonViewHeight = 150;
const bootButtonViewHeight = 120;
const bottomButtonWidth = (screenWidth / 2) - 40;
const bottomButtonHeight = 54;


var styles = StyleSheet.create({

    AnimateView: {
        position: 'absolute',
        // backgroundColor:'#ff0ff0',
        width: buttonViewWidth,
        height: buttonViewHeight,
    },
    containerAll: {
        flex: 1,
        backgroundColor: '#f8f8f8',
    },
    contentView: {
        marginTop: NavigatorBarHeight
    },
    titleTopView: {
        marginTop: 15,
        alignItems: 'center',
        alignSelf: 'center',
    },
    topTitle: {
        marginTop: 5,
        color: '#808080',
        fontSize: 15,
    },
    titleMiddleView: {
        marginTop: 20,
        alignItems: 'center',
        alignSelf: 'center',
    },
    middleTitle: {
        marginTop: 5,
        color: 'rgb(2,2,2)',
        fontSize: 19,
    },
    scrollContentView: {
        justifyContent: 'space-around',
        alignItems: 'center',
        alignSelf: 'center',
        marginTop: 40,
        flex: 1,
        width: screenWidth,
        height: 200,
        flexDirection: 'row',
    },
    scrollView: {
        height: buttonViewHeight,
        width: buttonViewWidth,
    },
    leftButtonView: {
        justifyContent: 'center',
        width: 80,
        height: 80,
    },
    rightButtonView: {
        justifyContent: 'center',
        width: 80,
        height: 80,
    },
    Button: {

    },
    buttonContentView: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        width: buttonViewWidth,
        height: buttonViewHeight,
    },
    bootView: {
        position: 'absolute',
        width: screenWidth,
        height: bootButtonViewHeight,
        backgroundColor: 'rgb(238,238,238)',
        flexDirection: 'column',
    },
    bottView_topView: {
        height: 40,
        width: screenWidth,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    bottView_bottomView: {
        marginTop: 15,
        width: screenWidth,
        justifyContent: 'space-around',
        flexDirection: 'row',
        alignItems: 'center',
        alignSelf: 'center',
    },
    bootButtonView: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        width: bottomButtonWidth,
        height: bottomButtonHeight,
        borderWidth: 1,
        borderColor: '#808080',
        borderRadius: 27,
    },
    bottomButton: {
        width: bottomButtonWidth,
        height: bottomButtonHeight - 2,
    }

});


var openMorePage = function(navigator) {
};

var route = {
    key: KEY_OF_MAINPAGE,
    title: LocalizedStrings.ir_add_ic_title_name,
    component: NewMatchRemoter,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#000000',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {
        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );
    },
}

module.exports = {
    component: NewMatchRemoter,
    route: route
};
