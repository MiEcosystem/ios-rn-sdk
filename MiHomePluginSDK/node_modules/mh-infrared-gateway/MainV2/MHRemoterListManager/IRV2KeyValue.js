//
//  基础数据：Key-》Value，用来存储遥控器要发送的码流键值对
//  MiHome
//
//  Created by Woody on 6/8/30.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
var {
    Component,
    ReactPropTypes
} = React;
var PropTypes = ReactPropTypes;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var mCount = 0;



/**
 * DeviceType类型
 **/
var MatchDeviceType = {
    "UNKNOWN": 0,
    "SET_TOP_BOX": 1,
    "TV": 2,
    "DVD": 3,
    "IPTV_BOX": 4,
    "PROJECTOR": 5,
    "FAN": 6,
    "AIR_CONDITIONER": 7,
    "PURIFIER": 8,
    "9": 9,
    "BOX": 10,
    "MI_CONTROLLER": 99,
    "CAMERA": 200,
    "AMPLIFIER": 201,
    "LAMP": 1000,
    "SOUND": 1001,
}

/**
 * 按键类型
 **/
var MatchKeyFromIRKeyType = {
    // 数字键

    /// 数字键0
    0: "0",
    /// 数字键1
    1: "1",
    /// 数字键2
    2: "2",
    /// 数字键3
    3: "3",
    /// 数字键4
    4: "4",
    /// 数字键5
    5: "5",
    /// 数字键6
    6: "6",
    /// 数字键7
    7: "7",
    /// 数字键8
    8: "8",
    /// 数字键9
    9: "9",

    // 其他常用键

    /// 开关 待机 开机 关机
    800: "power",
    /// 信号选择 av/tv
    801: "AV/TV",
    /// 信息显示
    802: "info",
    /// 回看
    803: "look_back",
    /// 静音
    804: "mute",
    /// 选台 -/—
    805: "digital",
    /// 返回
    806: "back",
    /// 频道加
    807: "ch+",
    /// 频道减
    808: "ch-",
    /// 音量加
    809: "vol+",
    /// 音量减
    810: "vol-",
    /// 温度加
    811: "temp+",
    /// 温度减
    812: "temp-",
    /// 放大 画面+
    813: "zoom+",
    /// 缩小 画面-
    814: "zoom-",
    /// 记忆键1
    815: "memory_key1",
    /// 记忆键2
    816: "memory_key2",
    /// 确定
    817: "ok",
    /// 上
    818: "up",
    /// 下
    819: "down",
    /// 左
    820: "left",
    /// 右
    821: "right",
    /// 菜单
    822: "menu",
    /// 退出
    823: "exit",
    /// 快进
    824: "rew",
    /// 快退
    825: "ff",
    /// 停/放
    826: "pause",
    /// 停止
    827: "stop",
    /// 上页
    828: "previous",
    /// 下页
    829: "next",
    /// 到顶
    830: "top",
    /// 到底
    831: "bottom",
    /// 模式
    832: "mode",
    /// 风量
    833: "wind_amount",
    /// 水平风向
    834: "wind_horizontal",
    /// 垂直风向
    835: "wind_vertical",
    /// 摇头
    836: "shake",
    /// 风类
    837: "wind_class",
    /// 风速
    838: "speed",
    /// 开仓 开关仓
    839: "open",
    /// 标题
    840: "title",
    /// 加十
    841: "ten_plus",
    /// 语言
    842: "language",
    /// 屏显
    843: "screen",
    /// 声道
    844: "track",
    /// 制式
    845: "standard",
    /// 字幕
    846: "sub_titles",
    /// 双画面
    847: "dual_screen",
    /// 画面冻结
    848: "freeze",
    /// 重置
    849: "reset",
    /// 视频
    850: "video",
    /// 慢放
    851: "step_slow",
    /// 主键
    852: "shutter1",
    /// 副键
    853: "shutter2",

    /// 连续上
    854: "continue_up",
    /// 连续下
    855: "continue_down",
    /// 连续右
    856: "continue_right",
    /// 连续左
    857: "continue_left",

    //新增的空调按键

    /// 风向
    870: "air_wind_direct",
    /// 灯光
    871: "air_light",
    /// 超强
    872: "air_super",
    /// 睡眠
    873: "air_sleep",
    /// 清新/换气
    874: "air_flash_air",
    /// 辅热
    875: "air_aid_hot",
    /// 定时
    876: "timer",
    /// 加湿
    877: "air_wet",
    /// 负离子
    878: "air_anion",
    /// 节能
    879: "air_power_saving",
    /// 舒适
    880: "air_comfort",
    /// 温度显示
    881: "air_temp_display",
    /// 一键冷
    882: "cool",
    /// 一键热
    883: "heat",

    //新增的投影仪 风扇 iptv遥控器按键

    /// 自动
    900: "auto",
    /// 信号
    901: "pjt_signal",
    /// 亮度
    902: "brightness",
    /// 电脑
    903: "pc",

    /// 冷风
    1000: "cool_wind",
    /// 首页
    1010: "home",
    /// 设置
    1011: "setting",
    /// dvd topup menu
    1012: "pop_menu",
    /// dvd top menu
    1013: "top_menu",
    /// 电源2
    1800: "power2",

    // ui布局按键

    /// 收藏
    // 2001 : "favorite",
    /// 数字
    // 2002 : "number",
    /// 自定义/扩展
    // 2003 : "custom",

    // 自定义键

    /// 自定义(圆形)
    '-100': "baseround",
    /// 自定义(椭圆)
    '-99': "baseoval",
    /// 自定义(正方)
    '-98': "basesquare",
    /// 自定义(红)
    '-97': "baseovalred",
    /// 自定义(橙)
    '-96': "baseovalorange",
    /// 自定义(黄)
    '-95': "baseovalyellow",
    /// 自定义(绿)
    '-94': "baseovalgreen",
    /// 自定义(蓝)
    '-93': "baseovalblue",
    /// 自定义(青)
    '-92': "baseovalcyan",
    /// 自定义(紫)
    '-91': "baseovalpurple",
    /// 记忆键
    '-90': "memorykey",

};

/**
 * 数据
 **/
class IRV2KeyValue {
    constructor(props) {
        // super(props);

        this.props = {
            /**
             * key
             */
            key: PropTypes.string,

            /**
             * head
             */
            head: PropTypes.string,

            /**
         * value
         */
            value: PropTypes.string,

            /**
             * freq
             */
            freq: PropTypes.number,
        }
    }

    static keyValueFromJson(jsonData) {
        var keyValue = new IRV2KeyValue();
        if (jsonData != undefined) {
            keyValue.props.key = jsonData.key;
            keyValue.props.value = jsonData.value;
            keyValue.props.freq = jsonData.freq;
        };
        return keyValue;
    }

    // 根据选择的key决定要返回对应的infrared数据
    static getInfraredFromKey(key, remoter) {
        for (var i = 0; i < remoter.keys.length; i++) {
            var infrared = remoter.keys[i];
            // console.log("----------------------",infrared);
            if (key == MatchKeyFromIRKeyType[infrared.type]) {
                return infrared;
            }
        };
    }







    static getSectionCount(originCode, maxLen) {
        var count = 1;
        if (originCode.length > maxLen) {
            count = Math.floor(originCode.length / maxLen);
            if ((originCode.length % maxLen) > 0) {
                count += 1;
            }
        }
        return count;
    }

    static getCodeOfSection(current, total, originCode, maxLen) {
        if (current < total - 1) {
            return originCode.substring(current * maxLen, maxLen);
        } else {
            return originCode.substring(current * maxLen);
        }
    }

    toJsonObject() {
        var jsonObj = {
            "key": this.props.key,
            "value": this.props.value,
            "freq": this.props.freq,
        }
        return jsonObj;
    }
}
module.exports.MatchKeyFromIRKeyType = MatchKeyFromIRKeyType;
module.exports.IRV2KeyValue = IRV2KeyValue;
