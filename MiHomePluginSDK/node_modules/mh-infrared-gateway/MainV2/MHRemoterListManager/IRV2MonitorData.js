//
//  复制的目标遥控器类
//  MiHome
//
//  Created by Woody on 6/8/30.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
var {
	Component,
	ReactPropTypes
} = React;
var IRV2KeyValue = require('../MHRemoterListManager/IRV2KeyValue').IRV2KeyValue;
var PropTypes = ReactPropTypes;


var IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX = 10;

/**
 * 遥控器码流数据类
 **/
class IRV2MonitorData {
	constructor(props) {
		// super(props);

		this.props = {
			/**
			* ID
			*/
			monitorID: PropTypes.string,

			/**
			* 时间戳
			*/
			timeStamp: PropTypes.string,

			/**
			* 包含设备”首页展示的按键“的码流数据
			* 每一项是一个IRV2KeyValue对象
			*/
			keyValueList: [],

			/**
			* 包含的”其它按键“码流数据
			* 每一项是一个IRV2KeyValue对象
			*/
			otherKeyValueList: [],

			/**
			* 包含设备”首页展示的按键“的码流数据
			* 每一项是一个IRV2KeyValue对象
			*/
			matchKeyValueList: [],

			sectionCount: 1,
		}
	}

	jsonObject() {
		var jsonArray = new Array();
		for (var i = 0; i < this.props.keyValueList.length; i++) {
			var keyValue = this.props.keyValueList[i];
			jsonArray.push(keyValue.toJsonObject());
		};

		var jobj = {
			"MonitorID": this.props.monitorID,
			"Timestamp": this.props.timeStamp,
			"KeyValues": jsonArray,
		}
		return jobj;
	}

	jsonObjectFrom(from) {
		var jsonArray = new Array();
		var count = 0;
		for (var i = from; i < this.props.keyValueList.length && count <= IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX; ++i) {
			var keyValue = this.props.keyValueList[i];
			jsonArray.push(keyValue.toJsonObject());
			++count;
		};

		var jobj = {
			"MonitorID": this.props.monitorID,
			"Timestamp": this.props.timeStamp,
			"KeyValues": jsonArray,
		}
		return jobj;
	}

	//如果KeyValue里面的数目大于最大值时，就要分成多个section
	sectionCount() {
		var keyValueCount = this.props.keyValueList.length;
		if (keyValueCount <= 0) {
			return 0;
		}
		var count = Math.floor(keyValueCount / IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX);
		if (keyValueCount % IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX) {
			count++;
		}
		return count;
	}

	static monitorFromJson(jsonData) {
		var monitor = new IRV2MonitorData();
		if (jsonData) {
			monitor.props.monitorID = jsonData.MonitorID;
			monitor.props.timeStamp = jsonData.Timestamp;
			var keyValues = new Array();
			for (var i = 0; i < jsonData.KeyValues.length; i++) {
				keyValues.push(IRV2KeyValue.keyValueFromJson(jsonData.KeyValues[i]));
			};
			monitor.props.keyValueList = keyValues;
		};
		monitor.props.sectionCount = monitor.sectionCount();
		return monitor;
	}

	static monitorFromJsonName(jsonData) {
		var monitor = new IRV2MonitorData();
		if (jsonData != undefined) {
			monitor.props.monitorID = jsonData.props.monitorID;
			monitor.props.timeStamp = jsonData.props.timeStamp;
			var keyValues = new Array();
			for (var i = 0; i < jsonData.props.keyValueList.length; i++) {
				keyValues.push(IRV2KeyValue.keyValueFromJson(jsonData.props.keyValueList[i].props));
			};
			monitor.props.keyValueList = keyValues;
		};
		monitor.props.sectionCount = monitor.sectionCount();
		return monitor;
	}

	static monitorFromMonitor(monitorSrc) {
		var monitor = new IRV2MonitorData();
		if (monitorSrc != undefined) {
			monitor.props.monitorID = monitorSrc.props.monitorID;
			monitor.props.timeStamp = monitorSrc.props.timeStamp;
			monitor.props.keyValueList = monitorSrc.props.keyValueList;
			monitor.props.sectionCount = monitorSrc.props.sectionCount;
		};
		return monitor;
	}

	keyValueOfKey(key) {
		var keyValues = this.props.keyValueList;
		for (var i = 0; i < keyValues.length; i++) {
			if (keyValues[i].props.key.toString() == key.toString()) {
				return keyValues[i];
			};

		};
		return undefined;
	}

	// 设置按钮灰色不可用 true:1
	ifKeyExist(key) {
		var keyValues = this.props.keyValueList;
		// console.log("ifKeyExist:", keyValues);
		for (var i = 0; i < keyValues.length; i++) {
			if (keyValues[i].props.key.toString() == key.toString()) {
				return true;
			}
		};
		return false;
	}

	// 设置按钮灰色不可用 true:1
	static ifKeyExistFromMatchKeyValue(key, keyValues) {
		for (var i = 0; i < keyValues.length; i++) {
			if (keyValues[i] != null && keyValues[i].props != null && keyValues[i].props.key.toString() == key.toString()) {
				return true;
			}
		};
		return false;
	}

	// 从keyValueList中提取出不包含操作面板的otherKeyValueList
	static parseOtherKeyValueListFromMonitor(monitor, operationKeyList) {
		Array.prototype.contains = function (item) {
			return RegExp("\\b" + item + "\\b").test(this);
		};
		var otherKeyValueList = new Array();
		var keyValues = monitor
		if (monitor.props != undefined && monitor.props.keyValueList > 0) {
			keyValues = monitor.props.keyValueList;
		};
		for (var i = 0; i < keyValues.length; i++) {
			var hasContain = false;
			for (var j = 0; j < operationKeyList.length; j++) {
				if (operationKeyList[j] == keyValues[i].props.key) {
					hasContain = true;
				}
			}
			if (hasContain == false) {
				otherKeyValueList.push(keyValues[i].props.key);
			}
			//if(!operationKeyList.contains(keyValues[i].props.key)) {
			//
			//}
		};
		return otherKeyValueList;
	}

  /**
    * 从keyValueList中提取出otherKeyValueList
	*/
	parseOtherKeyValueList(otherKeyList) {
		if (otherKeyList == undefined) {
			return [];
		};

		Array.prototype.contains = function (item) {
			return RegExp("\\b" + item + "\\b").test(this);
		};
		var otherKeyValueList = new Array();
		var keyValues = this.props.keyValueList;
		//console.log("otherKeyList >>>>>>>>>>.",otherKeyList)
		for (var i = 0; i < keyValues.length; i++) {
			//console.log("otherKeyList === ",otherKeyList);
			//console.log("keyValues[i].props.key ",keyValues[i].props.key);
			//var hasContains = false;
			for (var j = 0; j < otherKeyList.length; j++) {
				if (otherKeyList[j] == keyValues[i].props.key) {
					otherKeyValueList.push(keyValues[i]);
				}
			}
			//if(otherKeyList.contains(keyValues[i].props.key)) {
			//
			//}


		};
		// console.log("parseOtherKeyValueList", otherKeyValueList);
		this.props.otherKeyValueList = otherKeyValueList;
	}
}

module.exports.IRV2MonitorData = IRV2MonitorData;
