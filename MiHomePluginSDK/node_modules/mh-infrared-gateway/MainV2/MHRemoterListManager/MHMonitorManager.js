//
//  遥控器类
//  MiHome
//
//  Created by Woody on 5/8/30.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX = require('./IRV2MonitorData').IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX;

var {
  Component,
} = React;

var IRV2_DEVICE_MONITOR_TYPE = "irv2_device_monitor";

/**
 * Monitor管理器
 **/
class MHMonitorManager {
  constructor(props) {
    // super(props);

    this.props = {

    }
  }

  /**
   *  上传Monitor
   *  monitor是一个IRV2MonitorData对象
   **/
  uploadMonitorToServer(monitor, sectionCount, callback) {

    var paramsArray = new Array();

    if (sectionCount <= 1) {
      var param = {
        "uid": MHPluginSDK.ownerId,
        "did": MHPluginSDK.deviceId,
        "type": IRV2_DEVICE_MONITOR_TYPE,
        "key": monitor.props.monitorID,
        "time": monitor.props.timeStamp,
        "value": monitor.jsonObject(),
      };
      paramsArray.push(param);
    } else {
      for (var i = 0; i < sectionCount; i++) {
        var param = {
          "uid": MHPluginSDK.ownerId,
          "did": MHPluginSDK.deviceId,
          "type": IRV2_DEVICE_MONITOR_TYPE,
          "key": monitor.props.monitorID + "_" + i,
          "time": monitor.props.timeStamp,
          "value": monitor.jsonObjectFrom(i * IRV2_DEVICE_STUDY_MONITOR_SECTION_MAX),
        };
        paramsArray.push(param);
      };
    }

    console.log("uploadMonitorToServer paramsArray=", paramsArray);
    MHPluginSDK.callSmartHomeAPI("/user/set_user_device_data", paramsArray, (props) => {
  		console.log("uploadMonitorToServer props=", props);
  		if (callback) {
  		callback(props.code);
  		};
    });
  }

  /**
   *  从服务器获取一个Monitor
   *  monitorID是一个monitor ID
   **/
  downloadMonitorFromServer(monitorID, callback) {
    var now = new Date();
    var nowSeconds = Math.round(now.getTime() / 1000);
    var params = {
      "uid": MHPluginSDK.ownerId,
      "did": MHPluginSDK.deviceId,
      "type": IRV2_DEVICE_MONITOR_TYPE,
      "key": monitorID,
      "time_start": -1,
      "time_end": nowSeconds,
      "limit": 1,
    };
    MHPluginSDK.callSmartHomeAPI("/user/get_user_device_data", params, (props) => {
    		if (callback) {
    			callback(props);
    		};
    });
  }

  /**
   *  从服务器获取一个Monitor
   *  monitorID: 是一个monitor ID
   *  sectionCount: 此monitor的分段数
   **/
  downloadMonitorFromServerWithSectionCount(monitorID, sectionCount, callback) {
    if (sectionCount == undefined || sectionCount <= 1) {
      this.downloadMonitorFromServer(monitorID, callback);
      return;
    };

    var keyArray = new Array();
    for (var i = 0; i < sectionCount; ++i) {
      keyArray.push(monitorID + "_" + i);
    }

    var now = new Date();
    var nowSeconds = Math.round(now.getTime() / 1000);
    var params = {
      "uid": MHPluginSDK.ownerId,
      "did": MHPluginSDK.deviceId,
      "type": IRV2_DEVICE_MONITOR_TYPE,
      "key": keyArray,
      "time_start": -1,
      "time_end": nowSeconds,
      "limit": 1,
    };

    MHPluginSDK.callSmartHomeAPI("/user/get_user_device_data", params, (props) => {
        if (callback) {
          callback(props);
        };
    });
  }

  /**
   *  从服务器删除一个Monitor
   *  monitor是一个IRV2MonitorData对象
   **/
  deleteMonitorFromServerWithId(monitor, monitorId, callback) {
    var params = {
      "uid": MHPluginSDK.ownerId,
      "did": MHPluginSDK.deviceId,
      "type": IRV2_DEVICE_MONITOR_TYPE,
      "key": monitorId,
      "time": monitor.props.timeStamp,
      "value": monitor.jsonObject(),
    };
    //console.log('deleteMonitorFromServer',params);
    MHPluginSDK.callSmartHomeAPI("/user/del_user_device_data", params, (props) => {
      if (callback) {
        callback(props.code);
      };
    });
  }

  /**
   *  从服务器删除一个Monitor
   *  monitor是一个IRV2MonitorData对象
   **/
  deleteMonitorFromServer(monitor, callback) {

    if (monitor.props.sectionCount <= 1) {
      this.deleteMonitorFromServerWithId(monitor, monitor.props.monitorID, callback);
      return;
    };

    var deleteCount = 0;  //删除次数
    var succeedCount = 0;   //成功删除次数

    for (var i = 0; i < monitor.props.sectionCount; ++i) {
      var monitorID = monitor.props.monitorID + "_" + i;
      this.deleteMonitorFromServerWithId(monitor, monitorID, function(retCode) {

          deleteCount++;

          if (retCode == 0) {
              succeedCount++;
          };

          console.log('MHMonitorManager deleteMonitorFromServer sectionCount', monitor.props.sectionCount, 'deleteCount', deleteCount, 'succeedCount', succeedCount);

          if (deleteCount == monitor.props.sectionCount) {

            if (callback) {
              callback(succeedCount == deleteCount ? 0 : -1);
            };

          };
      });
    };
  }



}

module.exports.MHMonitorManager = MHMonitorManager;
