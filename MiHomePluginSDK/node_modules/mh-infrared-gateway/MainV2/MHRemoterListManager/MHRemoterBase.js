//
//  遥控器基类
//  MiHome
//
//  Created by Woody on 15/7/30.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
var PropTypes = require('ReactPropTypes');
var IRV2MonitorData = require('./IRV2MonitorData').IRV2MonitorData;
var MHMonitorManager = require('./MHMonitorManager').MHMonitorManager;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var IRV2Utils = require('./IRV2Utils').IRV2Utils;
var IRV2_DEVICE_TYPE = require('./IRV2PublicDefine').IRV2_DEVICE_TYPE;
var MHCodeSender = require('./MHCodeSender').MHCodeSender;

var mCount = 0;

var {
  Component,
} = React;


/**
 * 遥控器类, 遥控器列表页展示的每一项都是一个MHRemoterBase
 **/
class MHRemoterBase extends Component {

  constructor(props) {

    super(props);

    this.props =  {

      ///////////////////////////////////////////////////////////////
      ////////////////下面这些Items是从Xiaomi后台获取得到的//////////////
      ///////////////////////////////////////////////////////////////
      /**
       * 提供者，如：MiDataProvider
       */
      DataProvider: "MiDataProvider",

      /**
       * 遥控器的ID，由插件在添加此遥控器时随机生成，如：6xL4DChAS12fJMU5G7jXfcuUUm7Mg2QP
       */
      DeviceID: PropTypes.string.isRequired,

      /**
       * 匹配的目标遥控器ID，恬家SDK返回，如xiaomi_10001_1_0_0
       */
      MatchedMonitorID: PropTypes.string,

      /**
       * 保留
       */
      State: 0,

      /**
       * 学习的目标遥控器ID, 由插件在添加此遥控器时随机生成，如：6xL4DChAS12fJMU5G7jXfcuUUm7Mg2QP
       */
      StudyMonitorID: PropTypes.string,

      /**
       * 遥控器的位置，如客厅、主人卧室、客人卧室、书房、其它
       */
      Location: 0,

      /**
       * 面板模式，传统面板/触控面板，只有部分遥控器具有，如小米遥控器
       */
      DeviceUseMode: 0,

      /**
       * 设备类型，插件自己定义,见上面定义IRV2_DEVICE_TYPE_XXX
       */
      DeviceType: IRV2_DEVICE_TYPE.IRV2_DEVICE_TYPE_UNKNOWN,

      /**
       * 设备DID
       */
      ParentID: MHPluginSDK.deviceId,

      /**
       * 此遥控器的品牌
       */
      BrandName: PropTypes.string.isRequired,

      /**
       * 时间戳
       */
      Timestamp: IRV2Utils.curTimeSeconds(),

      /**
       * 遥控器的名称
       */
      DeviceTitle: "Xiaomi其它设备",

      /**
       * 遥控器的数据，只有部分遥控器才有
       */
      DeviceData: PropTypes.string,

      ///////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////

      /**
       * 遥控器的码流数据
       */
      MonitorData: new IRV2MonitorData(),

      /**
       * 遥控器的Icon名称，用来展示在遥控器列表页
       */
      IconName: "DeviceList/device_list_Universal_remote_controller.png",

      /**
       * 遥控额外的信息
       */
      componentInfo: 'CustomInfo',

      /**
       * "其它按键"key列表,不同的遥控器不一样，子类定制
       */
      OtherKeyList: [],

      /**
       * 如果码流数据过长，将会分段上传保存，下载也会分段下载
       */
      StudyMonitorSectionCount: 1,
    };

    // console.log("MHRemoterBase construct, this = ", this);
  }

  //初始化
  initWithJson(valueJson) {
    if (valueJson != undefined) {
      this.props.DataProvider = valueJson.DataProvider;
      this.props.DeviceID = valueJson.DeviceID;
      this.props.MatchedMonitorID = valueJson.MatchedMonitorID;
      this.props.State = valueJson.State;
      this.props.StudyMonitorID = valueJson.StudyMonitorID;
      this.props.Location = valueJson.Location;
      this.props.DeviceUseMode = valueJson.DeviceUseMode;
      this.props.DeviceType = valueJson.DeviceType;
      this.props.ParentID = valueJson.ParentID;
      this.props.BrandName = valueJson.BrandName;
      this.props.Timestamp = valueJson.Timestamp;
      this.props.DeviceTitle = valueJson.DeviceTitle;
      this.props.DeviceData = valueJson.DeviceData;
      if (valueJson.MonitorData != undefined) {
        this.props.MonitorData = IRV2MonitorData.monitorFromJson(valueJson.MonitorData);
        this.props.MonitorData.parseOtherKeyValueList(this.props.OtherKeyList);
      };
      if (valueJson.StudyMonitorSectionCount != undefined) {
        this.props.StudyMonitorSectionCount = valueJson.StudyMonitorSectionCount;
      }
      
    };
  }

  initWithJsonName(valueJson,name,location) {
    if (valueJson != undefined) {
      this.props.DataProvider = valueJson.DataProvider;
      this.props.DeviceID = valueJson.DeviceID;
      this.props.MatchedMonitorID = valueJson.MatchedMonitorID;
      this.props.State = valueJson.State;
      this.props.StudyMonitorID = valueJson.StudyMonitorID;
      this.props.Location = location!="" ? location : valueJson.Location;
      this.props.DeviceUseMode = valueJson.DeviceUseMode;
      this.props.DeviceType = valueJson.DeviceType;
      this.props.ParentID = valueJson.ParentID;
      this.props.BrandName = valueJson.BrandName;
      this.props.Timestamp = valueJson.Timestamp;
      this.props.DeviceTitle = name!="" ? name : valueJson.DeviceTitle;
      this.props.DeviceData = valueJson.DeviceData;
      if (valueJson.MonitorData != undefined) {
        this.props.MonitorData = IRV2MonitorData.monitorFromJsonName(valueJson.MonitorData);
        this.props.MonitorData.parseOtherKeyValueList(this.props.OtherKeyList);
      };
      if (valueJson.StudyMonitorSectionCount != undefined) {
        this.props.StudyMonitorSectionCount = valueJson.StudyMonitorSectionCount;
      }
    };
  }

  initWithRemoter(remoter) {
    if (remoter != undefined) {
      this.props = remoter.props;
    };
  }

  /**
   * 转化成Jason，给上传数据到后台时用
   */
  toJasonObject() {
      var json = {
            "DataProvider":this.props.DataProvider,
            "DeviceID":this.props.DeviceID,
            "MatchedMonitorID":this.props.MatchedMonitorID,
            "State":this.props.State,
            "StudyMonitorID":this.props.StudyMonitorID,
            "Location":this.props.Location,
            "DeviceUseMode":this.props.DeviceUseMode,
            "DeviceType":this.props.DeviceType,
            "ParentID":this.props.ParentID,
            "BrandName":this.props.BrandName,
            "Timestamp":this.props.Timestamp,
            "DeviceTitle":this.props.DeviceTitle,
            "DeviceData":this.props.DeviceData,
            "StudyMonitorSectionCount":this.props.StudyMonitorSectionCount,
      }
      return json;
  }

  /**
   * 转化成Jason, 给本地存储时用
   */
  toJasonObjectForCache() {
      var json = this.toJasonObject();
      // console.log("toJasonObjectForCache this=", this);
      if (this.props.MonitorData != undefined) {
          json.MonitorData = this.props.MonitorData.jsonObject();
      };
      return json;
  }
  /**
   * 学习红外操作
   */
  studyInfraredCode(studyKey) {
      MHPluginSDK.callMethod('miIO.ir_learn', [], {'id': ++mCount, 'params': {'key': studyKey}}, function(isSuccess, result) {
        console.log('learn success:' + isSuccess);
      });
  }

  /*
   * 读取红外码流
   */
  readInfraredCode(studyKey, callback) {
      MHPluginSDK.callMethod('miIO.ir_read', [], {'id': ++mCount, 'params': {'key': studyKey}}, function(success, response) {
        console.log("readInfraredCode response:",response);
        if (callback != undefined && response != null && response.result != undefined) {
          callback(response.result.key, response.result.code);
        }
      });
  }

  /**
   * 发送红外码流
   * key:string 标识发送哪个键的码流
   */
  sendInfraredCode(key) {
      if (this.props.MonitorData != undefined) {
        var newMonitor = IRV2MonitorData.monitorFromMonitor(this.props.MonitorData);
        var keyValue = newMonitor.keyValueOfKey(key);
        if (keyValue != undefined) {
            MHPluginSDK.callMethod("miIO.ir_play",[], {"id":++mCount, "params":{freq: keyValue.props.freq, code: keyValue.props.value}}, isSuccess => {
                if (isSuccess)
                {
                  console.log("sendInfraredCode=",key);
                }
            });
        };
      };
  }

  /**
   * 发送红外码流
   * key:string 标识发送哪个键的码流
   */
  sendInfraredMatchCode(key,keyValues) {
      if (keyValues != undefined) {
        var keyValue;
        for (var i = 0; i < keyValues.length; i++) {
          if (keyValues[i].props.key.toString() == key.toString()) {
            keyValue = keyValues[i];
          };
        };

        if (keyValue != undefined) {
            MHCodeSender.sendCode(keyValue);
        };
      };
  }

  /**
   * 拉取MonitorData
   */
  uploadMonitorData() {
      if (this.props.MonitorData != undefined) {
            var monitorManager = new MHMonitorManager();
            var sectionCount = this.props.MonitorData.props.sectionCount;            
            monitorManager.uploadMonitorToServer(this.props.MonitorData, sectionCount, function(retCode){
                  if (retCode == 0) {

                  };
            });
      };
  }

  /**
   * 拉取MonitorData
   */
  parseMonitorDataFromJson(json) {
    var monitorStr = json.value;
    var monitorJson = eval("("+monitorStr+")");
    var monitorData = IRV2MonitorData.monitorFromJson(monitorJson);
    monitorData.parseOtherKeyValueList(this.props.OtherKeyList);
    return monitorData;
  } 

  downloadMonitorData(callback) {
      var that = this;
      if (this.props.StudyMonitorID != undefined) {
          var monitorManager = new MHMonitorManager();
          monitorManager.downloadMonitorFromServerWithSectionCount(this.props.StudyMonitorID, this.props.StudyMonitorSectionCount, function(response) {
              if (response.code == 0 && response.result != undefined && response.result.length > 0) {

                  var monitor0 = that.parseMonitorDataFromJson(response.result[0]);
                  for (var i = 1; i < response.result.length; i++) {
                    var monitorI = that.parseMonitorDataFromJson(response.result[i]);
                    for (var j = 0 ; j < monitorI.props.keyValueList.length; j++) {
                      monitor0.props.keyValueList.push(monitorI.props.keyValueList[j]);
                    };
                  };
                  that.props.MonitorData = monitor0;                  
                  console.log("MHRemoterBase downloadMonitorData succeed, remoter = ", that);
              };
              if (callback) {
                  callback(response.code);
              };
          });
      } else {
          if (callback) {
            callback(0);
          };
      };
  }

  /**
   * 删除MonitorData
   */
  deleteMonitorData() {
      var that = this;
      if (this.props.MonitorData != undefined) {
            var monitorManager = new MHMonitorManager();
            monitorManager.deleteMonitorFromServer(this.props.MonitorData, function(retCode){
                  if (retCode == 0) {
                        that.MonitorData = undefined;
                        that.StudyMonitorID = undefined;
                  };
            });
      };
  }
}

module.exports.MHRemoterBase = MHRemoterBase;
