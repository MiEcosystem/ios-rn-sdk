//
//  遥控器列表管理器
//  MiHome
//
//  Created by Woody on 15/7/30.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MHPluginFS = NativeModules.MHPluginFS;
var MHRemoterFactory = require('./MHRemoterFactory').MHRemoterFactory;
var IRV2Utils = require('./IRV2Utils').IRV2Utils;
var IRV2MonitorData = require('./IRV2MonitorData').IRV2MonitorData;
var IRV2_MSG = require('../ConstDefine/IRV2PublicDefine').IRV2_MSG;

var {
    Component,
    AlertIOS,
} = React;


var IRV2_DEVICE_MONITOR_TYPE = "irv2_device_monitor";
var IRV2_DEVICE_DATA_TYPE = "irv2_device_data";
var IRV2_DEVICE_DATA_VERSION = "version";
var IRV2_DEVICE_DATA_KEY = "remote";
var IRV2_JSON_VERSION_CODE = "VersionCode";
var IRV2_JSON_PARENT_ID = "ParentID";
var IRV2_JSON_TIMESTAMP = "Timestamp";

var keyChars = "0123456789";
var alphaKeyChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

var g_downloadPageSize = 20;


//单例对象
var g_SharedInstance;

var subscription;

/**
 * 遥控器列表数据管理
 **/
class MHRemoterListManager {
    constructor(props) {
        console.log("MHRemoterListManager constructor g_SharedInstance=", g_SharedInstance);
        if (g_SharedInstance != undefined) {
            return g_SharedInstance;
        }
        g_SharedInstance = this;

        this.state = {
            userId: MHPluginSDK.ownerId,
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            devMode: MHPluginSDK.devMode,
        };

        this.props = {
            dataVersion: 0, //数据版本和时间戳
            dataTimeStamp: 0,
            lastRemoterTimeStamp: 0,  //分页下载时，保存最后一个remoter的时间戳
        };

        this.remoterList = new Array();
        this.studyKeyList = new Array();
        this.monitorIDList = new Array();
        this.remoterIDList = new Array();

        // 缓存
        this.loadCache();

        //监听遥控器列表变化的通知
        var { DeviceEventEmitter } = require('react-native');
        subscription = DeviceEventEmitter.addListener(
            IRV2_MSG.RemoterListChanged,
            (notification) => {
                console.log("MHRemoterListManager received list changed notification ");
                // this.setState({remoterListManager:this.state.remoterListManager});
                //如果添加了新的遥控器，就去本地缓存重新读取
                //如果是删除就不用读取，只用刷新列表即可
                this.loadCache();
            }
        );

    }

    /**
     * 遥控器列表
     * [remoter1, remoter2, ...]
     **/
    remoterList: [];

    /**
     * 遥控器Monitor ID列表
     **/
    monitorIDList: [];

    /**
     * 遥控器ID列表
     **/
    remoterIDList: [];

    componentDidMount() {
        console.log("MHRemoterListManager componentDidMount");
    }

    componentWillUnmount() {
        console.log("MHRemoterListManager componentWillUnmount");
        this.saveCache();
        subscription.remove();
    }

    /****************************************************************************************************
     *                                  Public APIs：供外部调用的接口
     ****************************************************************************************************/

    /**
     * 新增一个复制/匹配好的Remoter
     * remoter: MHRemoterBase对象
     * callback(retCode):retCode == 0时说明添加成功，否则失败
     **/
    addMatchedRemoter(remoter, callback) {

        // console.log("addMatchedRemoter====:", remoter);

        var that = this;

        this.uploadRemoter(remoter, function(retCode) {
            if (retCode == 0) {
                //上传成功

                //添加本地内存
                if (that.remoterList == undefined) {
                    that.remoterList = new Array();
                };

                var remoterIndex = that.indexOfRemoter(remoter.props.DeviceID);

                if (remoterIndex >= 0 && remoterIndex < that.remoterList.length) {
                    that.remoterList.splice(remoterIndex, 1);
                    that.remoterList.push(remoter);
                } else {
                    if (remoter.props.Timestamp == undefined)
                        remoter.props.Timestamp = IRV2Utils.curTimeSeconds();

                    that.remoterList.push(remoter);
                };

                that.remoterList.sort(that.comparator);

                that.props.dataVersion += 1;
                that.props.dataTimeStamp = IRV2Utils.curTimeSeconds();
                that.uploadDataVersionToServer(function(retCode) {

                });

                // console.log("addMatchedRemoter succeed, remoterList=", that.remoterList);
                MHPluginSDK.sendEvent(IRV2_MSG.RemoterListChanged, { "info": that.remoterList.length });


                //更新本地缓存数据
                that.saveCache(function(retCode) {

                });
            } else {
                //上传失败
            };

            if (callback) {
                callback(retCode);
            };
        });
    }

    /**
     * 删除一个Remoter
     * did: 万能遥控器设备did
     * remoterID: remoter ID
     **/
    deleteMatchedRemoter(remoterID, callback) {
        var that = this;

        //删除这个遥控器及其对应的Monitor
        var remoterIndex = this.indexOfRemoter(remoterID);
        if (remoterIndex >= 0 && remoterIndex < this.remoterList.length) {
            var existingRemoter = this.remoterList[remoterIndex];
            this.deleteRemoterFromServer(existingRemoter, function(retCode) {
                if (retCode == 0) {
                    //删除成功
                    existingRemoter.deleteMonitorData();

                    //删除本地内存
                    that.remoterList.splice(remoterIndex, 1);
                    that.props.dataVersion += 1;
                    that.props.dataTimeStamp = IRV2Utils.curTimeSeconds();
                    that.uploadDataVersionToServer(function(retCode) {

                    });

                    // console.log("deleteMatchedRemoter succeed, remoterList=", that.remoterList);
                    MHPluginSDK.sendEvent(IRV2_MSG.RemoterListChanged, {});

                    //更新本地缓存数据
                    that.saveCache(function(retCode) {
                    });

                } else {
                    //删除失败
                };

                if (callback) {
                    callback(retCode);
                };
            });
        } else {
            if (callback) {
                callback(-1);
            };
        }
    }

    /**
     * 装载遥控器列表数据
     * 1. 读取本地缓存
     * 2. 去server端拉取最新数据
     **/
    loadList(callback) {
        var that = this;

        //拉取server端数据版本号
        this.downloadDataVersion(function(retCode) {

            if (retCode == 0) {
                //下载遥控器列表
                that.downloadRemoterList(function(retCode2, remoterList) {
                    console.log('remoterList &&&&&&&', retCode2, remoterList);
                    if (retCode2 == 0) {

                        //下载Monitor数据，并提取ID保存
                        for (var i = 0; i < remoterList.length; i++) {
                            var remoter = remoterList[i];
                            remoter.downloadMonitorData(function(retCode) {
                                if (retCode == 0) {

                                    if (remoter.props.MonitorData != undefined && remoter.props.MonitorData.props.monitorID != undefined) {
                                        that.monitorIDList.push(remoter.props.MonitorData.props.monitorID);
                                    };

                                    that.saveCache();
                                };
                            });

                            if (remoter.props.DeviceID != undefined) {
                                that.remoterIDList.push(remoter.props.DeviceID);
                            };
                        };

                        //替换本地列表
                        that.remoterList = remoterList;
                        that.remoterList.sort(that.comparator); //按时间戳从旧到新排列，旧的在前面

                        //保存最后一个Remoter的时间戳
                        if (remoterList.length > 0) {
                            var lastRemoter = remoterList[remoterList.length - 1];
                            that.props.lastRemoterTimeStamp = lastRemoter.props.Timestamp;
                        };

                        //下载下一页
                        //因为每次最多拉取20条数据，如果这次拉取了20条，就说明可能存在下一页
                        if (remoterList.length >= g_downloadPageSize) {
                            that.loadMoreList(callback);
                        } else {
                            //更新本地缓存数据
                            that.saveCache();
                        };

                        // console.log("loadList finished,", that.remoterList);
                    };

                    if (callback) {
                        callback(retCode2);
                    };

                });
            } else {
                if (callback) {
                    callback(retCode);
                };
            }
        });
    }

    /**
     * 装载更多遥控器列表数据
     **/
    loadMoreList(callback) {

        var that = this;

        this.downloadNextPageRemoterList(function(retCode, remoterList) {
            if (retCode == 0) {
                //下载Monitor数据，并提取ID保存
                for (var i = 0; i < remoterList.length; i++) {
                    var remoter = remoterList[i];

                    remoter.downloadMonitorData(function(retCode) {
                        if (retCode == 0) {
                            if (remoter.props.MonitorData != undefined && remoter.props.MonitorData.props.monitorID != undefined) {
                                that.monitorIDList.push(remoter.props.MonitorData.props.monitorID);
                            };
                            that.saveCache();
                        };
                    });

                    if (remoter.props.DeviceID != undefined) {
                        that.remoterIDList.push(remoter.props.DeviceID);
                    };

                    that.remoterList.push(remoter);
                };

                that.remoterList.sort(that.comparator);

                //保存最后一个Remoter的时间戳
                if (remoterList.length > 0) {
                    var lastRemoter = remoterList[remoterList.length - 1];
                    that.props.lastRemoterTimeStamp = lastRemoter.props.Timestamp;
                };

                //下载下一页
                //因为每次最多拉取20条数据，如果这次拉取了20条，就说明可能存在下一页
                if (remoterList.length >= g_downloadPageSize) {
                    that.loadMoreList(callback);
                } else {
                    //更新本地缓存数据
                    that.saveCache();
                    // console.log("loadMoreList finished=",that.remoterList);
                };
            };

            if (callback) {
                callback(retCode);
            };
        });
    }

    /**
     * 读取本地缓存的遥控器列表
     **/
    loadCache(callback) {
        var that = this;
        var fileName = this.nameOfCacheFile();

        console.log('filename = ', fileName);
        MHPluginFS.readFile(fileName, (isSuccess, result) => {
            console.log('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^' + result);
            if (isSuccess == true && result.length > 0) {
                that.remoterList = that.remoterListFromString(result);

                var string = JSON.stringify(that.remoterList);
                // var json = JsonUtils.jsonToMap(result);
                // var string = JsonUtils.stringToJson(json);
                // AlertIOS.prompt('Type a value', null, null, 'login-password',  string);
                // alert('result:'+result);
                console.log('====shuzu==== james ', this.remoterList, this.remoterList.count);
                that.remoterList.sort(that.comparator);
            };
            console.log("MHPluginFS.readFile isSuccess=", isSuccess);
            if (callback) {
                callback(isSuccess);
            };
        });
    }

    /**
     * 将遥控器列表缓存到本地
     **/
    saveCache(callback) {

        var fileName = this.nameOfCacheFile();
        if (this.remoterList.length > 0) {
            var remoterListString = this.remoterListToString();
            MHPluginFS.writeFile(fileName, remoterListString, (isSuccess) => {
                console.log("MHPluginFS.writeFile isSuccess=", isSuccess);
                if (callback) {
                    callback(isSuccess);
                };
            });
        } else {
            MHPluginFS.deleteFile(fileName, (isSuccess) => {
                console.log("MHPluginFS.deleteFile isSuccess=", isSuccess);
                if (callback) {
                    callback(isSuccess);
                };
            });
        };
    }

    getStudyKey() {
        return IRV2Utils.genRandomID(keyChars, 15, this.studyKeyList);
    }

    /**
     * 产生一个新的遥控器ID
     **/
    genRemoterID() {
        return IRV2Utils.genRandomID(alphaKeyChars, 32, this.remoterIDList);
    }

    /**
     * 产生一个新的遥控器Monitor ID，学习遥控器时会用到
     **/
    genMonitorID() {
        return IRV2Utils.genRandomID(alphaKeyChars, 32, this.monitorIDList);
    }

    /**
     * 创建红外码流数据
     * keyValueList：红外码流的key->value列表，每项是一个IRV2KeyValue对象
     */
    creatMonitorData(keyValueList) {
        var monitorData = new IRV2MonitorData();
        monitorData.props.monitorID = this.genMonitorID();
        monitorData.props.keyValueList = keyValueList;
        monitorData.props.timeStamp = IRV2Utils.curTimeSeconds();
        return monitorData;
    }
    /****************************************************************************************************
     *                                  Private APIs：仅供内部调用的接口
     ****************************************************************************************************/

    comparator(remoterX, remoterY) {
        if (remoterX.props.Timestamp < remoterY.props.Timestamp)
            return 1;
        if (remoterX.props.Timestamp > remoterY.props.Timestamp)
            return -1;
        return 0;
    }

    /**
     * 返回本地缓存文件名
     **/
    nameOfCacheFile() {
        return this.state.userId + this.state.did + "remoterList";
    }

    /**
     * 将遥控器列表 -》String，方便做本地存储
     **/
    remoterListFromString(remoterListString) {
        var remoterList = new Array();
        var remoterStringArray = remoterListString.split("%");
        var arrayCount = remoterStringArray.length;
        console.log('00000000000000000 数组长度', arrayCount);
        for (var i = 0; i < arrayCount; i++) {
            var remoterString = remoterStringArray[i];
            if (i == arrayCount - 1) {
                this.props.dataTimeStamp = Number(remoterString);
            } else if (i == arrayCount - 2) {
                this.props.dataVersion = Number(remoterString);
            } else {
                var jsonObj = eval("(" + remoterString + ")");
                var remoter = MHRemoterFactory.remoterFromJson(jsonObj);

                remoterList.push(remoter);
            };
        };
        // console.log("remoterListFromString:",remoterList);
        return remoterList;
    }

    /**
     * 从本地缓存得到的String -》遥控器列表
     **/
    remoterListToString() {
        var remoterStringArray = new Array();
        for (var i = 0; i < this.remoterList.length; i++) {
            var jsonObj = this.remoterList[i].toJasonObjectForCache();
            var remoterString = JSON.stringify(jsonObj);
            remoterStringArray.push(remoterString);
        };

        var remoterListString = remoterStringArray.join("%") + "%" + this.props.dataVersion.toString() + "%" + this.props.dataTimeStamp.toString;
        // console.log("remoterListToString:",remoterListString);
        return remoterListString;
    }

    /**
     * 返回指定remoter在remoterList中的索引值，没找到返回-1
     **/
    indexOfRemoter(remoterID) {
        if (remoterID == undefined) {
            return -1;
        };

        var i = 0;
        for (; i < this.remoterList.length; i++) {
            var existingRemoter = this.remoterList[i];
            var existingDeviceID = existingRemoter.props.DeviceID;
            if (existingDeviceID != undefined && existingDeviceID.toString() == remoterID.toString()) {
                return i;
            };
        };

        return -1;
    }

    /**
     * 返回指定remoter在remoterList中的索引值，没找到返回-1
     **/
    static indexKeyInKeyValues(keyValueList, key) {
        if (key == undefined) {
            return -1;
        };

        for (var i = 0; i < keyValueList.length; i++) {
            var existKey = keyValueList[i].props.key;
            if (existKey != undefined && existKey == key) {
                return i;
            };
        };

        return -1;
    }

    /**
     * 拉取server端数据版本号
     **/
    downloadDataVersion(callback) {
        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_VERSION,
            "time_start": -1,
            "time_end": IRV2Utils.curTimeSeconds(),
            "limit": 1
        };
        MHPluginSDK.callSmartHomeAPI("/user/get_user_device_data", params, (props) => {
            // console.log("downloadDataVersion, props=",props);
            if (props.code == 0) {
                if (props.result != undefined && props.result.length > 0) {
                    var result = props.result[0];
                    if (result != undefined && result.value != undefined) {
                        var valueJson = eval("(" + result.value + ")");
                        this.props.dataVersion = valueJson.VersionCode;
                        this.props.dataTimeStamp = valueJson.Timestamp;
                    };
                };
            };
            if (callback) {
                callback(props.code);
            };
        });
    }

    /**
     * 上传数据版本号
     **/
    uploadDataVersionToServer(callback) {
        var value = {
            "VersionCode": this.props.dataVersion,
            "Timestamp": this.props.dataTimeStamp,
        };
        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_VERSION,
            "time": IRV2Utils.curTimeSeconds(),
            "value": value,
        };
        // console.log("uploadDataVersionToServer, params=", params);
        MHPluginSDK.callSmartHomeAPI("/user/set_user_device_data", params, (props) => {
            // console.log("uploadDataVersionToServer, props=", props);
            if (props.code == 0) {
            };

            if (callback) {
                callback(props.code);
            };
        });
    }

    /**
     * 上传一个Remoter
     * remoter是一个MHRemoterBase对象
     **/
    uploadRemoter(remoter, callback) {

        remoter.uploadMonitorData();

        //console.log('uploadRemoter remoter:' , remoter);
        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_KEY,
            "time": remoter.props.Timestamp,
            "value": remoter.toJasonObject(),
        };

        console.log('uploadRemoter params:', params);
        MHPluginSDK.callSmartHomeAPI("/user/set_user_device_data", params, (props) => {
            console.log("uploadRemoter props=", props);

            if (props.code == 0) {
                //uploadVersion
            };

            if (callback) {
                callback(props.code);
            };
        });
    }

    /**
     * 从服务器端删除一个Remoter
     * remoter是一个MHRemoterBase对象
     **/
    deleteRemoterFromServer(remoter, callback) {
        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_KEY,
            "time": remoter.props.Timestamp,
            "value": remoter.toJasonObject(),
        };
        //console.log('deleteRemoterFromServer== ',params);
        MHPluginSDK.callSmartHomeAPI("/user/del_user_device_data", params, (props) => {
            console.log("deleteRemoterFromServer props=", props);
            if (props.code == 0) {
                //uploadVersion
            };

            if (callback) {
                callback(props.code);
            };
        });
    }

    /**
     * 拉取server端遥控器列表：第一页
     * 起始时间戳：0
     * 结束时间戳：now
     **/
    downloadRemoterList(callback) {
        var that = this;

        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_KEY,
            "time_start": -1,
            "time_end": IRV2Utils.curTimeSeconds(),
            "limit": g_downloadPageSize,
        };

        // console.log("downloadRemoterList params=", params);
        var remoterList = new Array();
        MHPluginSDK.callSmartHomeAPI("/user/get_user_device_data", params, (props) => {
            console.log("downloadRemoterList,props=", props);
            if (props.code == 0) {
                var result = props.result;
                if (result != undefined && result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var valueJson = eval("(" + result[i].value + ")");
                        if (valueJson) {
                            var remoter = MHRemoterFactory.remoterFromJson(valueJson);
                            // console.log("download remoterID:", remoter.props.DeviceID);
                            remoterList.push(remoter);
                        };
                    };
                }
            };

            if (callback) {
                callback(props.code, remoterList);
            };
        });
    }

    /**
     * 拉取下一页遥控器列表
     * 起始时间戳：0
     * 结束时间戳：now
     **/
    downloadNextPageRemoterList(callback) {
        var that = this;

        var params = {
            "uid": this.state.userId,
            "did": this.state.did,
            "type": IRV2_DEVICE_DATA_TYPE,
            "key": IRV2_DEVICE_DATA_KEY,
            "time_start": -1,
            "time_end": this.props.lastRemoterTimeStamp - 1,
            "limit": g_downloadPageSize,
        };

        // console.log("downloadNextPageRemoterList params=", params);
        var remoterList = new Array();
        MHPluginSDK.callSmartHomeAPI("/user/get_user_device_data", params, (props) => {
            // console.log("downloadNextPageRemoterList,props=", props);
            if (props.code == 0) {
                var result = props.result;
                if (result != undefined && result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var valueJson = eval("(" + result[i].value + ")");
                        if (valueJson) {
                            var remoter = MHRemoterFactory.remoterFromJson(valueJson);
                            console.log("downloadNextPage remoterID:", remoter.props.DeviceID);
                            remoterList.push(remoter);
                        };
                    };
                } else {
                    //Server端没有数据可拉取了
                    //保存数据到本地缓存
                    //TODO...
                };
            };

            if (callback) {
                callback(props.code, remoterList);
            };
        });
    }
};

module.exports.MHRemoterListManager = MHRemoterListManager;
