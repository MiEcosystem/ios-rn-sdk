'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  ScrollView,
  TouchableOpacity,
  Platform,
  Modal,
  Dimensions,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var TitleButton = require('../../CommonModules/TitleButton');
var Button = require('../../CommonModules/Button');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var NormalExtendView = require('../../MainV2/ToolModel/NormalExtendView');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var StudyRemoter = require('../../MainV2/StudyRemoter/StudyRemoter');
var {MODEL_WITH_TYPE} = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var SIMPLE_DEVICE_MODEL = require('../../MainV2/ConstDefine/DeviceModel').SIMPLE_DEVICE_MODEL;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
/* 数据模型 */

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const APPBAR_MarginTOP = (screenHeight==812)?(44):(20);

let Remote_keyArray =[];   /* 临时放置学习到的所有按键数组 key*/
let Remote_valueArray =[];  /* 临时放置学习到的所有按键数组 value */
let Temp_allKeys =[];



class New_studyRemoter extends React.Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      did: '',
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      selectGateWay_ID:this.props.selectGateWay_ID,
      deviceType:this.props.deviceType,
      isStudyStatus:true,
      isModal:false,
      reLoad:false,
      allKeys:[],     
    };


  }

  componentWillMount() {
      var self = this;
      this._studyListener = DeviceEventEmitter.addListener('newStudyLearnSuccess', (event) => {
      
        self.receive_key_function(event);
        // console.log('newStudyLearnSuccess:-----------'+JSON.stringify(event));
      }); 

      this.setup_Data();

      // this.timer = setTimeout(() => {
      //   var event = {
      //     "name":"POWER",
      //     "code":"mc5nMwlkznM2mEsmswmEsmM5m4BDzgAjwCIMCNJ+Ah4CHgISHBwK/gEeCP4J/i++AhsA"};
      //   self.receive_key_function(event);
      // }, 20000);
  }
  
  /* 获取所有按键 */
  setup_Data(){

      /* 获取所有按键 */
      var self = this;
      var URL = 'http://cdn.cnbj1.fds.api.mi-img.com/irservice/ircode/v1/keys/category/'+ this.state.deviceType ;
      console.log('-----URL----'+URL);

      fetch(URL, {
      method: 'GET',
      })
      .then((response)=> response.json())
      .then((response) => {
          console.log('-------success------------'+JSON.stringify(response));
          var keys= response.keys;
          self.setState({allKeys:keys})     
      })
      .catch((error) => {
          self.refs.toast.showMessage(JSON.stringify(error));
          console.log('-------error------------'+JSON.stringify(error));
      });
  }

  render() {
    return (
      <View style={styles.containerAll}>            
          {/* 第一行 */}
          <MessageToast ref='toast'/>
          <View style={styles.topView}>
              <View style={styles.topLeftView}>
                  <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <ImageButton
                      source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
                      onPress={() => {
                          
                             this.props.navigator.pop(); console.log('pop');                            
                      }}
                      style={[{width:29, height:29, tintColor: '#000000'}]}
                    />
                  </View>
              </View>
              <View style={styles.topMiddleView}>

                   <Text style={{fontSize:20,color:'#808080'}}>{LocalizedStrings.ir_device_customer}</Text>
              </View>
              <View style={styles.topRightView}>
                  <View style={[styles.topRightContentView]}>
                      <TitleButton  onPress={()=>{this.onPressSaveButton('POWER')}}  shock ={true}  title = {LocalizedStrings.ir_matching_success}  titleSize={16} textColor="#00bc9c" />
                  </View>
              </View>
          </View>    
          <ScrollView style={[styles.scrollContentView,{}]}
            horizontal={false}
            key={'noramalScrollView'}
            Vertical={true}
            scrollEnabled= {true}  >     
              <View style={[styles.contentView,{height:this.getMaxContentViewHeight()}]} >     
                {this.renderAllItem()}
              </View>
          </ScrollView>
      </View>

    );
  }

  /* 数据加载页面的按钮 */
  renderAllItem() {
      var dataSource = this.state.allKeys;

      if(dataSource==undefined){return;}

      var allItemDate = [];
      for(var i =0 ;i<dataSource.length;i++){
        let title = dataSource[i].display_name;
        let name = dataSource[i].name;
        let isAlreadyStudy = dataSource[i].isStudy;
        if(name.length>12){
          name = name.slice(0,10)+'...';
        }
        // var buttonStyle = (isAlreadyStudy==true)?(styles.isAlreadyStudy):(styles.columnItemBgView);
        // var textColor = (isAlreadyStudy==true)?("#00bc9c"):("#2c2c2c");
        if(isAlreadyStudy==true){
          // console.log('-----isAlreadyStudy==true---------------'+JSON.stringify(dataSource[i]));
                allItemDate.push(
                  <View style ={styles.columnContentView} key={JSON.stringify(title)} >
                        <View style ={styles.columnItemBgView} >
                            <TitleButton style={styles.isAlreadyStudyButton} 
                            key ={title+i} onPress ={()=> this.onPressButton(name)} 
                            ButtonHighlightColor='#C0C0C0'
                            title ={title}  titleSize={15} textColor="#00bc9c" >
                            </TitleButton>
                        </View>
                  </View>
                );
        }else{
                allItemDate.push(
                  <View style ={styles.columnContentView} key={JSON.stringify(title)} >
                        <View style ={styles.columnItemBgView} >
                            <TitleButton style={styles.buttonView} 
                            key ={title+i} onPress ={()=> this.onPressButton(name)} 
                            ButtonHighlightColor='#C0C0C0'
                            title ={title}  titleSize={15} textColor="#2c2c2c" >
                            </TitleButton>
                        </View>
                  </View>
                );

        }

      }
      console.log('length-------------------------'+(allItemDate.length/3));
      return allItemDate;
  }
  
  /* 复制方法 */
  getMaxContentViewHeight(){

        var height;
        var dataSource = this.state.allKeys;
        if(dataSource!=undefined){
            var count;
            if(dataSource.length%3!=0){
              count = (dataSource.length/3) +1;
            }else{
              count = dataSource.length/3;
            }
            height = count * (columnContentViewHeight);
        }
        return height;
  }

  /* 点击事件---跳转到学习页面 */
  onPressButton(event){

    var self = this;
    this.props.navigator.push({
      ...StudyRemoter.route,
      passProps:{
        remoterID:this.state.did,
        ButtonTitle:event,
      }
    });

  }


  /* 接收到通知 */
  receive_key_function(event){
      /*{
      "name":"MUTE",
      "code":"mc5nMwlkznM2mEsmswmEsmM5m4BDzgAjwCIMCNJ+Ah4CHgISHBwK/gEeCP4J/i++AhsA"}*/

      var name = event.name;
      var index = Remote_keyArray.indexOf(name);
      if(index==-1){
        /* 不存在新学习的按键*/
        
        Remote_keyArray.push(name);
        Remote_valueArray.push(event);
        this.add_NewStudyButton(event);
        
      }
      else{
        /* 重新学习的*/
        Remote_valueArray.splice(index,1);
        Remote_valueArray.push(event);
      }

  }

  /* 添加状态标志位 */
  add_NewStudyButton(event){

    /*event 模型
    {"name":"POWER","code":"mc5nMwlkznM2mEsmswmEsmM5m4BDzgAjwCIMCNJ+Ah4CHgISHBwK/gEeCP4J/i++AhsA"}*/

    var newAllKeys = this.state.allKeys;
    newAllKeys.forEach(element => {
      
        // console.log('-----element.name-----'+element.name +'---====-----event--'+ JSON.stringify(event));
        if(element.name==event.name){
          element.isStudy =true;
          // console.log('-isStudy==true--------------------');
        }
    });
    this.setState({allKeys:newAllKeys});
  }

  onPressSaveButton(){
    console.log('-------------onPressSaveButton---------'+Remote_keyArray.length);

    if((Remote_valueArray.length<0)||(Remote_valueArray.length==0)){
      alert('您还没有学习遥控器，请先学习');
      return;
    } 

    this.createRemoter();

  }


  isEnable_SaveButton(){
    if((this.state.did=='')||(this.state.did==undefined)){
      return false;
    } 
    else{
      return true;
    }
  }

  /* 创建一个学习遥控器 */
  createRemoter(){
    
  
      var self = this;
      let deviceModel = self.GetDeviceModel_WithType(self.state.deviceType);

      if(this.state.isStudyStatus==true){
        var  param = {
            "parent_id": this.state.selectGateWay_ID,
            "category": deviceModel.id,
            // "contrller_id":null,  //不传contrller_id 自定义遥控器
            "name": deviceModel.China_name,
        }

        MIRequestServer.Post_AddRemoter(param,
        function(response){
          
          if(response.result.did!=undefined){

            self.setState({did:response.result.did});
            self.batchUploadAllkey_withRemoter(response.result.did);
          }
            
        },function(error){
            self.refs.toast.showMessage(JSON.stringify(error));
        }); 

    }
  }

  /* 批量上传 学习到的遥控器按键 */
  batchUploadAllkey_withRemoter(remoteID){

    var self = this;
    var param ={
      'did':remoteID,
      'keys':Remote_valueArray};

    MIRequestServer.Post_uploadAllKeyCode(param,
      function(response){

        if(response.result.keys!=undefined){
          self.refs.toast.showMessage(response.message);
          self.openSuccessPage();
        }
      },function(error){
          self.refs.toast.showMessage(JSON.stringify(error));
      }); 
  }

  /* 单独跳转的function */
  openSuccessPage(){
      /* 第一个参数是model 字符串 */ 
      /* 第二个参数是设备did */

      var self = this;
      let deviceModel = this.GetDeviceModel_WithType(this.state.deviceType);
      MHPluginSDK.openConnectSucceedPage(deviceModel.model,self.state.did);    
  }

  GetDeviceModel_WithType(type){

      var  remoterElement ;
      switch(type){
          case 1:         /* 机顶盒 */
          remoterElement = SIMPLE_DEVICE_MODEL.STB;
          break;
          case 2:         /* 电视 */
          remoterElement = SIMPLE_DEVICE_MODEL.TV;
          break;
          case 3:        /* 电视盒子 */
          remoterElement = SIMPLE_DEVICE_MODEL.BOX ;
          break;
          case 4:         /* DVD */
          remoterElement =  SIMPLE_DEVICE_MODEL.DVD;
          break;
          case 5:         /* 空调 */
          remoterElement = SIMPLE_DEVICE_MODEL.AC;
          break;
          case 6:         /* 投影仪 */
          remoterElement = SIMPLE_DEVICE_MODEL.Pro;
          break;
          case 7:        /* 音箱 */
          remoterElement = SIMPLE_DEVICE_MODEL.PA;
          break;
          case 8:        /* 风扇 */
          remoterElement = SIMPLE_DEVICE_MODEL.FAN;
          break;
          case 9:         /* 单反 */
          remoterElement = SIMPLE_DEVICE_MODEL.SLR;
          break;
          case 10:        /* 灯泡 */
          remoterElement = SIMPLE_DEVICE_MODEL.Light;
          break;
          case 11:       /* 空气净化器 */
          remoterElement = SIMPLE_DEVICE_MODEL.AirCleaner;
          break;
          case 12:        /* 热水器 */
          remoterElement = SIMPLE_DEVICE_MODEL.WaterHeater;
          break;
          default:
          remoterElement = SIMPLE_DEVICE_MODEL.GeneralDevice;
          break;
      }
      return remoterElement;
  }

  componentWillUnmount() {
    this._studyListener.remove();
  }

}


const marginWidth = 10;
const contentViewWidth = screenWidth-2*marginWidth;
const itemWidth = (contentViewWidth -(4 * marginWidth))/3.0;
const itemHeight = itemWidth * 0.4;
const columnContentViewWidth = screenWidth/3;
const columnContentViewHeight= itemWidth*0.5;
const topRightViewWidth = 75+2*15;

var styles = StyleSheet.create({
  containerAll: {
    flex:1,
    marginTop:0,
    backgroundColor:'#ffffff',
    alignItems:'center',
    alignSelf:'center',
    flexDirection: 'column',
  },
  topView:{
    height:NavigatorBarHeight,
    justifyContent:'center',
    flexDirection:'row',
    backgroundColor:'rgb(238,238,238)',
  },
  topLeftView:{
    width:100,
    justifyContent:'center',
    marginTop:APPBAR_MarginTOP,
  },
  topMiddleView:{
    width:screenWidth-100-topRightViewWidth,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    marginTop:APPBAR_MarginTOP,
  },
  topRightView:{
    right:0,
    width:topRightViewWidth,
    justifyContent:'center',
    marginTop:APPBAR_MarginTOP,
    color:'#808080',
  },
  topRightContentView:{
    width:75,
    height:25,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    borderRadius:3,
  },
  contentView:{
    marginTop:0,
    flexDirection:'row',
    flexWrap:'wrap',
    justifyContent:'flex-start',
    backgroundColor:'#ffffff',
  },
  scrollContentView:{
    width:screenWidth,
    height:screenHeight-NavigatorBarHeight,
  },
  columnContentView:{
    width:columnContentViewWidth,
    height:columnContentViewHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  columnItemBgView:{
    width:itemWidth,
    height:itemHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    padding:marginWidth,
  },
  buttonView:{
    width:itemWidth,
    height:itemHeight,
    borderWidth:1,
    borderColor:'#e2e2e2',
    borderRadius:5,
  },
  isAlreadyStudyButton:{
    width:itemWidth,
    height:itemHeight,
    borderWidth:1,
    borderColor:'#00bc9c',
    borderRadius:5,
  },
  tipsTopView :{
    marginTop:0,
    flexDirection:'row',
    width:screenWidth,
    height:30,
  },
  leftTipsView:{
    marginTop:0,
    marginBottom:0,
    width:screenWidth,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    backgroundColor:'#a1d5d3'
  }, 
  rightTipsView:{
    marginTop:0,
    marginBottom:0,
    width:screenWidth/2,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    backgroundColor:'#7db8ec'
  },
});

const KEY_OF_MAINPAGE = 'New_studyRemoter';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: New_studyRemoter,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#000000',
  },
  isNavigationBarHidden: true,

}

module.exports = {
  component: New_studyRemoter,
  route: route,
}
