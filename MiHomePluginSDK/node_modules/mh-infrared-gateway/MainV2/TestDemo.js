'use strict';

var React = require('react-native');
var Button = require('../CommonModules/Button');
var TitleButton = require('../CommonModules/TitleButton');
var ImageButton = require('../CommonModules/ImageButton');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var DirectionView = require('../MainV2/ToolModel/DirectionView');

var {
  AppRegistry,
  StyleSheet,
  Text,
  Image,
  View,
  Dimensions,
  Platform,
  TouchableHighlight,
  NavigatorIOS,
  Component,
  ListView,
  PanResponder,
  AlertIOS,
  PixelRatio,
} = React;


var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);

const imageViewWidth = 240;
const imageViewHeight = imageViewWidth;
const centerViewWidth = 80;

var LocationModel ={
'center':{'image':'NewControllerImage/tv_ok_normal.png'},
'left':{'image':'NewControllerImage/direction_bg_left_normal.png'},
'right':{'image':'NewControllerImage/direction_bg_right_normal.png'},
'up':{'image':'NewControllerImage/direction_bg_up_normal.png'},
'down':{'image':''},
};



class TestDemo extends Component {
  constructor(props) {
    super(props);

    this.state = {
        did: MHPluginSDK.deviceId,
        model: MHPluginSDK.deviceModel,
        apiLevel: MHPluginSDK.apiLevel,
        basePath: MHPluginSDK.basePath,
        devMode: MHPluginSDK.devMode,
        spaceB: 26,
        controllers:[],
        redViewBgColor: 'red',
    };
  }
  componentWillMount(){

      this._panResponder = PanResponder.create({
        onStartShouldSetPanResponder: (evt, gestureState) => {
            return true;
        },
        onMoveShouldSetPanResponder:  (evt, gestureState) => {
            return true;
        },
        onPanResponderGrant: (evt, gestureState) => {

            this._highlight(evt, gestureState);
        },
        onPanResponderMove: (evt, gestureState) => {
        },
        onPanResponderRelease: (evt, gestureState) => {
            this._unhighlight(evt, gestureState);
        },
        onPanResponderTerminate: (evt, gestureState) => {
        },
    });
  }

  componentDidMount() {

  }

  _unhighlight(evt, gestureState){
      console.log('locationX------'+evt.nativeEvent.locationX);
      console.log('locationY------'+evt.nativeEvent.locationY);
      // this.setState({redViewBgColor: 'red'})
  }

  _highlight(evt, gestureState){
      // this.setState({redViewBgColor: 'blue'})
  }
  
  _locationWith(locationX,locationY){

    var leftLenghtOne = imageViewWidth/3;
    var lefLengthTwo = (imageViewWidth/3)*2;
    var leftLengthThree = imageViewWidth;

    var isLeft = false;  
    var isHorzionMiddle = false;
    var isRight = false;
    var isUp = false;  
    var isVerticalMiddle = false;
    var isDown = false;
    var resultModel ;


    /*水平处理 */
    if(locationX<leftLenghtOne){
      isLeftOne = true;
    }
    if((leftLenghtOne<locationX)&&(locationX<lefLengthTwo)){
      isHorzionMiddle = true;
    }
    if((lefLengthTwo<locationX)&&(locationX<leftHeightThree)){
      isRight = true;
    }

    /*垂直处理*/
    if(locationY<leftLenghtOne){
      isUp = true;
    }
    if((leftLenghtOne<locationY)&&(locationY<lefLengthTwo)){
      isVerticalMiddle = true;
    }
    if((lefLengthTwo<locationY)&&(locationY<leftHeightThree)){
      isDown = true;
    }


    /* center */
    if((isVerticalMiddle==true)&&(isHorzionMiddle==true)){
      resultModel = LocationModel.center;
    }


    if(isLeft==true ){
      /* 左 */
      resultModel = LocationModel.left;
    }
    if(isUp ==true ){
      /* 上 */
      resultModel = LocationModel.up;
    }
    if(isDown==true ){
      /*左下角*/
      resultModel = LocationModel.down;
    }
    if(isRight==true){
      /*右下角*/
      resultModel = LocationModel.right;
    }
    return  resultModel;

    
  }  




  render() {

    return(
      <View style={styles.mainContainer}>
         <View style={styles.topView}>
              <View style={styles.topLeftView}>
                  <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <ImageButton
                      source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
                      onPress={() => {
                          
                             this.props.navigator.pop(); console.log('pop');                            
                      }}
                      style={[{width:29, height:29, tintColor: '#000000'}]}
                    />
                  </View>
              </View>
              <View style={styles.topMiddleView}>
              </View>
              <View style={styles.topRightView}>
                  <TitleButton  style={{backgroundColor:'#C00'}} onPress={()=>{this.onPressButton('POWER')}}  style={{marginBottom:8}}  shock ={true}  title ="开关"  titleSize={20} textColor="rgb(236,83,78)" />
              </View>
         </View>      
      </View>
    );
  }

  isButtonEnabled(event) {
      
    return true;

  }

  onPressButton(event) {
    console.log('---onPressButton-------------------'+event);
  }

  onPanResponderReject(event, gestureState){

    console.log("e-----"+JSON.stringify(event)) ;
    console.log("gestureState-----"+JSON.stringify(gestureState)) ;
  }

  onPress(event, gestureState){

    console.log("onPress-----"+event.target) ;
    console.log("onPress-gestureState-----"+gestureState) ;
  }

 

};


const sectionHeght =100;
const sectionContentWidth=  screenWidth- 20*2;
const topViewHeight =300;
const topContentViewWidth = 300;
const topContentViewHeight = 300;
const topLeftHeight = 80;
const centerViewHeight = 50;
const showImageHeight = 25;

var styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
  },
 
  topView:{
    height:NavigatorBarHeight,
    // alignSelf:'center',
    justifyContent:'center',
    flexDirection:'row',
  },
  topLeftView:{
    backgroundColor:'#00ff00',
    width:100,
    height:NavigatorBarHeight,

  },
  topMiddleView:{
    backgroundColor:'#0f3300',
    width:screenWidth-200,
  },
  topRightView:{
    width:100,
    height:NavigatorBarHeight,
    backgroundColor:'#0ff',
    marginRight:0,
  }


});


const KEY_OF_MAINPAGE = 'TestDemo';

// 打开更多菜单


var backPage = function(navigator){
  navigator.pop();
}

// 每个页面export自己的route
var route = {
  funtion:function(){
  },
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: TestDemo,
  navLeftButtonStyle: {
    tintColor:'rgb(236,236,236)',
  },
  navTitleStyle: {
    color:'#808080',
  },
  isNavigationBarHidden: true,
}

module.exports = {
  component: TestDemo,
  route: route,
};

