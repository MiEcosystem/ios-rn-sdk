'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  Component,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  ScrollView,
  Dimensions,
  Modal,
  PickerIOS,
  ListView,
  PickerItemIOS,
  DeviceEventEmitter,
} = React;


var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var AirSenceManager = require('../../MainV2/ToolModel/AirState/AirSenceManager').AirSenceManager;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(20):(0);

var count;
var airManager;

var PickerItem = React.createClass({
  render:function(){
    return <PickerItemIOS
        key='0'
        value='C++'
        label='C++'
      />
  }
});



 class AirBoxExtendView extends React.Component {
  constructor(props, context) {
    super(props, context);
    var allKeys =[
      {"id":1,"name":"power_on","display_name":"温度"},
      {"id":2,"name":"power_off","display_name":"模式"},
      {"id":3,"name":"POWER","display_name":"风速"},
      {"id":4,"name":"POWER","display_name":"扫风"}];

    this.state = {
      cloumnCount: 3,
      totalCount: this.props.totalCount,
      isShow:this.props.isShow,
      dataSource:this.props.dataSource,
      selectIndex:this.props.selectIndex,
      allKeys:allKeys,
      temps:[],
      selectedCourse:0,
      selectedIndex:0,
    };
    count =0;
    airManager = new AirSenceManager();

  }

  /*模拟假数据*/
  instance(modes ){

    // var model = {
    //    "modes": [
    //          { "mode": 0,
    //            "temps": [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
    //            "speeds": [ 0,1,2,3]},
    //          { "mode": 1,
    //            "temps": [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
    //            "speeds": [ 0,1,2,3]},
    //          { "mode": 2,
    //            "speeds": [ 0,1,2,3]},
    //          { "mode": 3,
    //            "temps": [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
    //            "speeds": [ 1,2,3]},
    //          { "mode": 4,
    //            "temps": [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
    //            "speeds": [ 1,]},
    //          ]
    //  };
     airManager.instatceWithModel(modes);
  }

  render() {
    var showContent = (this.state.selectIndex==0)?(true):(false);
    return (
      <Modal 
        animationType="slide"
        visible={this.state.isShow}
        transparent={true}
        onRequestClose={()=>this.setState({modalVisible:false})} >
          <View style={styles.containerAll} >
              <TouchableHighlight onPress={()=>this.onPressHiddenExtensionView()}>
                  <View style ={[styles.contentTopView,{height:screenHeight-bootButtonViewHeight}]} >
                  </View>
              </TouchableHighlight>
              { (showContent)?( this.showContentView()):(this.showTableContentView()) } 
          </View>
      </Modal>
    );
  }


  showContentView(){

      var self = this;
      return(
        <View  style={[styles.bootView]} >
            <View style={styles.topContentView}>
                <PickerIOS style={{marginTop:0}}
                  itemStyle={{fontSize: 25, color: 'rgb(56,182,128)', textAlign: 'center', fontWeight: 'bold'}}
                  selectedValue={this.state.selectedCourse}
                  onValueChange={(selectedCourse,selectedIndex)=>  this.setState({selectedCourse:selectedCourse,selectedIndex:selectedIndex}) }>
                      {
                        this.state.temps.map((item) => (
                            <PickerItemIOS key={item+'-000'}
                                           value={item}
                                           label={item+''}
                            />
                        ))
                      }
                </PickerIOS>
            </View>
            <View style={styles.bottomContentView}>
                <View style={styles.leftContentView}>
                    <TitleButton style={{flex:1,width:screenWidth/2-30,height:buttonHeight-20}} title ="取消" onPress={()=>{this.onPressCancelButton()}}   shock ={true} style={{marginBottom:8}}    titleSize={15}  />
                </View>
                <View style={styles.rightContentView}>
                    <TitleButton style={{flex:1,width:screenWidth/2-30,height:buttonHeight-20}} title ="确定" onPress={()=>{this.onPressOkButton()}}       shock ={true} style={{marginBottom:8}}  titleSize={15} />
                </View>
            </View>
        </View>
        ) ;
  }


  showTableContentView(){
      this.triggerRefreshUI();
      return(
        <ListView style={styles.bootView} 
        enableEmptySections={true} 
        dataSource={this.state.dataSource} 
        renderRow={this._renderRow.bind(this)} 
        automaticallyAdjustContentInsets={false} />
      );
  }

  triggerRefreshUI() {
    var dataSource = new ListView.DataSource({rowHasChanged: (r1, r2)=>r1!==r2});
    this.state.dataSource = dataSource.cloneWithRows(this.state.allKeys);
  }

  /* 列表一行，用来展示一个遥控器*/ 
  _renderRow(rowData,sectionID,rowID) {
    /*
    {"id":1,"name":"POWER","display_name":"电源"}
    */
    rowData.sectionID = sectionID;
    rowData.rowID = rowID;
    return (
          <TouchableHighlight underlayColor='#C0C0C0' onPress={() => this._pressRow(rowData)} >
            <View>
              <View style={styles.remoterListRowCell}>
                <Text style={styles.remoterName}>{rowData.display_name}</Text>
              </View>
            <View style={styles.separator}></View>
            </View>
          </TouchableHighlight>
    );
  }

 

  contentTopViewHeight(){
      var height = screenHeight - titleContentViewHeight - this.getContentViewHeight();
      return height;
  } 
  
  getContentViewHeight(){
      var height;
      var dataSource = this.state.dataSource;
      if(dataSource!=undefined){
          var count;
          if(dataSource.length%3!=0){
            count = (dataSource.length/3) +1;
          }else{
            count = dataSource.length/3;
          }
          height = count * (columnContentViewHeight);
      }

      if(height>MaxContentViewHeight){
        return MaxContentViewHeight;
      }
      return height;
  }

  /* 复制方法 */
  getMaxContentViewHeight(){

        var height;
        var dataSource = this.state.dataSource;
        
        if(dataSource!=undefined){
            var count;
            if(dataSource.length%3!=0){
              count = (dataSource.length/3) +1;
            }else{
              count = dataSource.length/3;
            }
            height = count * (columnContentViewHeight);
        }
        return height;
  }

  /* import */
  componentWillReceiveProps(props){

        /* 数据源*/
        if(props.instanceData !=undefined){
          this.instance(props.instanceData);
        }
        /* 是否显示*/
        if((props.isShow !=undefined)&&(props.isShow ==true)){
          this.setState({isShow:true});
        }
        /* 选中第几个 cell*/
        if(props.selectIndex !=undefined){

          let selectIndex =  props.selectIndex;

          let allKeys = [];
          let temps = [];
          if(selectIndex==0){
           
            temps= airManager.getTempeatureData();
            if(temps==undefined){temps=[]}
            this.setState({selectIndex:selectIndex,temps:temps});
            console.log('allKeys-0-----'+JSON.stringify(temps));
          }
          else if(selectIndex==1){
            allKeys= airManager.getModelData();
            if(allKeys==undefined){allKeys=[]}
            this.setState({selectIndex:selectIndex,allKeys:allKeys});
            console.log('allKeys-1-----'+JSON.stringify(allKeys));
          }
          else if(selectIndex==2){
            allKeys= airManager.getSpeedData();
            if(allKeys==undefined){allKeys=[]}
            this.setState({selectIndex:selectIndex,allKeys:allKeys});
            console.log('allKeys-2-----'+JSON.stringify(allKeys));
          }
      }
  }

  componentWillUnmount(){
    this.setState({isShow:false});
  }

  onPressHiddenExtensionView(){
    if(this.props.onPressDissmissButton!=undefined){
       this.props.onPressDissmissButton();
    }
    this.setState({isShow:false});
  }


  /* 点击一行 */
  _pressRow(rowData){

      console.log('rowData.id----------------'+rowData.id);
      if(this.state.selectIndex==1){
        var currentState = airManager.changeModeButton(rowData.id);
        var allKeysModel = airManager.getAllKeysData();
        console.log('allKeysModel--1111--------------'+JSON.stringify(allKeysModel));
      }
      else if(this.state.selectIndex==2){
        var currentState = airManager.changeSpeedButton(rowData.id);
        var allKeysModel = airManager.getAllKeysData();
        console.log('allKeysModel--2222--------------'+JSON.stringify(allKeysModel));
      }
      
      
      /* block传值 */
      if(this.props.changeAllKeys!=undefined){
        var allKeysModel = airManager.getAllKeysData();
        console.log('allKeysModel--3333--------------'+JSON.stringify(allKeysModel));
        this.props.changeAllKeys(allKeysModel);
      }
      this.setState({isShow:false});
  }


  onPressOkButton(event){
    console.log('onPressOkButton-11111-----------'+this.state.selectedCourse);

    var result =  airManager.changeTempeatureButton(this.state.selectedCourse);
    console.log('result------------'+JSON.stringify(result));
    if(this.props.changeAllKeys!=undefined){
      var allKeysModel = airManager.getAllKeysData();

      console.log('onPressOkButton--2222----------'+JSON.stringify(allKeysModel));
      this.props.changeAllKeys(allKeysModel);
    }
    console.log('onPressOkButton-333333-----------');
    this.setState({isShow:false});
  }

  onPressCancelButton(event){
    this.setState({isShow:false});
  }

}


const marginWidth = 10;
const itemWidth = (screenWidth -(4 * marginWidth))/3.0;
const itemHeight = itemWidth * 0.4;
const columnContentViewWidth = screenWidth/3;
const columnContentViewHeight= itemWidth*0.5;
const contentViewHeight = screenHeight*0.7;
const titleContentViewHeight = 60;
const MaxContentViewHeight = (screenHeight- NavigatorBarHeight-titleContentViewHeight);
const pickerDefaultHeight = 216;
const buttonHeight = 60;
const bootButtonViewHeight =pickerDefaultHeight +buttonHeight +20;

var styles = StyleSheet.create({
  containerAll:{
    flex:1,
    flexDirection:'column',
    justifyContent:'flex-start',
    width:screenWidth,
    height:screenHeight,
  },
  contentTopView:{
    width:screenWidth,
    backgroundColor:'rgba(44,44,44,0.7)',
  },
  contentMiddleView:{
    width:screenWidth,
    height:titleContentViewHeight,
    flexDirection:'row',
    backgroundColor:'rgba(44,44,44,1)',
  },
  textStyle:{
    color:'#rgba(255,255,255,0.7)',
    fontSize:15,
  },
  middleView:{
    width:screenWidth/3,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  rightMiddleView:{
    flexDirection:'row',
    justifyContent:'flex-end',
    width:screenWidth/3,
    height:titleContentViewHeight,
  },
  contentView:{
    flexDirection:'row',
    flexWrap:'wrap',
    justifyContent:'flex-end',
    backgroundColor:'rgba(44,44,44,1)',
  },
  scrollContentView:{
    width:screenWidth,
    height:MaxContentViewHeight,
    flexDirection:'column',
    backgroundColor:'rgba(44,44,44,1)',
  },
  columnContentView:{
    width:columnContentViewWidth,
    height:columnContentViewHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  bootView:{
    position:'absolute',
    width:screenWidth,
    height:bootButtonViewHeight,
    backgroundColor: 'rgb(246,246,246)',
    flexDirection:'column',
  },
  topContentView:{
    marginTop:0,
    width:screenWidth,
    height:pickerDefaultHeight,
    flex:1,
    flexDirection:'column',
    backgroundColor:'rgb(246,246,246)'
  },
  bottomContentView:{
    width:screenWidth,
    height:buttonHeight,
    marginBottom:20,
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    // backgroundColor:'#0ff',
    backgroundColor:'rgb(246,246,246)'
  },
  leftContentView:{
    marginRight:0,
    height:buttonHeight-20,
    width:screenWidth/2-30,
    borderTopLeftRadius:50,
    borderBottomLeftRadius:50,
    borderColor:'#808080',
    backgroundColor:'#ffffff',
    borderWidth:0.5,
  },
  rightContentView:{
    marginLeft:0,
    height:buttonHeight-20,
    width:screenWidth/2-30,
    borderTopRightRadius:50,
    borderBottomRightRadius:50,
    borderColor:'#808080',
    backgroundColor:'#ffffff',
        // backgroundColor:'#0ff',
    borderWidth:0.5,
  },

  separator: {
    height: 0.5,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    marginLeft: 20,
    marginRight: 0
  },
  remoterListRowCell: {
    flexDirection: 'row',
    padding: 20,
    height: 44,
  },
  remoterImage: {
    alignSelf: 'center',
    width: 46,
    height: 46,
  },
  remoterName: {
    fontSize: 15,
    opacity: 0.9,
    alignSelf: 'center',
    color:'#000000',
    marginLeft: 0,
  },

});


module.exports = AirBoxExtendView;