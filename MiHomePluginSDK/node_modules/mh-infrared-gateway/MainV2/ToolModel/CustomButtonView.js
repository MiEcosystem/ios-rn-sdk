'use strict';

var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Button = require('../../CommonModules/Button');

var {
  AppRegistry,
  Component,
  View,
  Text,
  Platform,
  TextInput,
  Dimensions,
  StyleSheet,
} = React;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);


var APPBAR_MARGINBOTTOM =0;

class CustomButtonView extends React.Component {

  constructor(props) {
      super(props);
      this.name = '';
  }

  render() {
        return (
            <View style={styles.containerView}>
              <Text style={styles.title}>{this.props.title}</Text>
                <TextInput
                  style={styles.input}
                  placeholder="请输入名称"
                  clearButtonMode='while-editing'
                  onChangeText={(text) => {this.name = text}}
                  />
                <View style={styles.container}>
                  <View style={styles.leftButtonContainer}>
                    <Button style={styles.button} onPress={()=>this.onCancelPressed()} imageNormal="NewControllerImage/popupbutton_left_normal.png" imageHighlight="NewControllerImage/popupbutton_left_pressed.png" imageWidth={135} imageHeight={40}>
                      <Text style={styles.title}>取消</Text>
                    </Button>
                  </View>
                  <View style={styles.rightButtonContainer}>
                    <Button style={styles.button} onPress={()=>this.onConfirmPressed()} imageNormal="NewControllerImage/popupbutton_right_normal.png" imageHighlight="NewControllerImage/popupbutton_right_pressed.png" imageWidth={135} imageHeight={40}>
                      <Text style={styles.title}>确定</Text>
                    </Button>
                  </View>
                </View>
            </View>
        );
  }

  onConfirmPressed() {
    if((this.props.onButtonNamed!=undefined)&&(this.name.length > 0)){
        this.props.onButtonNamed(this.name); 
    }
  }

  onCancelPressed() {
      if(this.props.onButtonCancel!=undefined){
        this.props.onButtonCancel(); 
      }
  }

};

var styles = StyleSheet.create({
    containerView: {
      flex: 1,
      flexDirection: 'column',
      backgroundColor: '#f8f8f8',
    },
    input: {
        marginTop: 10,
        marginHorizontal: 40,
        height: 40,
        borderColor: '#DDDDDD',
        borderWidth: 1,
        borderRadius: 2,
    },
    container: {
        flexDirection: 'row',
        marginTop: 20,
        paddingBottom:APPBAR_MARGINBOTTOM,
    },
    leftButtonContainer: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-end',
    },
    rightButtonContainer: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-start',
    },
    button: {
        flex: 1,
        justifyContent: 'center',
    },
    title: {
        padding: 10,
        fontSize: 16,
        textAlign: 'center',
        backgroundColor: 'transparent',
    }
});

module.exports = CustomButtonView;
