
'use strict';
var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  Dimensions,
  ScrollView,
  StatusBar,
  PanResponder,
  TouchableOpacity,
  Platform,
  Modal,
  DeviceEventEmitter,
} = React;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;

const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const imageViewWidth = 210;
const imageViewHeight = imageViewWidth;
const centerViewWidth = 70;

var LocationModel ={
  'center':{
    'image':'NewControllerImage/tv_ok_normal.png',
    'disableImage':'direction_ok_disable.png',
    'event':'OK',
    'location':'center',
    'enable':false},

  'left':{
    'image':'NewControllerImage/direction_bg_left_normal.png',
    'disableImage':'direction_left_disable.png',
    'event':'NAVIGATE_LEFT',
    'location':'left',
    'enable':false},

  'right':{
    'image':'NewControllerImage/direction_bg_right_normal.png',
    'disableImage':'direction_right_disable.png',
    'event':'NAVIGATE_RIGHT',
    'location':'right',
    'enable':false},

  'up':{
    'image':'NewControllerImage/direction_bg_up_normal.png',
    'disableImage':'direction_top_disable.png',
    'event':'NAVIGATE_UP',
    'location':'up',
    'enable':false},

  'down':{
    'image':'NewControllerImage/direction_bg_down_normal.png',
    'disableImage':'direction_down_disable.png',
    'event':'NAVIGATE_DOWN',
    'location':'down',
    'enable':false},
  };
var LocationModelArray =[LocationModel.center,LocationModel.left,LocationModel.right,LocationModel.up,LocationModel.down,];


class DirectionView extends React.Component {
  constructor(props) {
    super(props);
    this.state={
      basePath: MHPluginSDK.basePath,
      imageHighlight:'',
      width:(this.props.width)?(this.props.width):(210),
      height:(this.props.height)?(this.props.height):(210),
      centerViewWidth:(this.props.width/3)?(this.props.width/3):(70),
      allKeys:this.props.dataSource,
    };
    // console.log('this.state-------------'+JSON.stringify(this.state));

    this.okButtonEnable =false;
    this.leftButtonEnable =false;
    this.rightButtonEnable =false;
    this.topButtonEnable =false;
    this.downButtonEnable =false;
    this.deal_DataSource();
    // console.log('this.state------DirectionView--------------'+JSON.stringify(this.state));
  }

  render() {
    var sizeStyle = {'width':this.state.width,'height':this.state.height};
    return(

      // <View style={styles.contentView}>
        <View style={[styles.mainContainer,this.props.style]}>
              <View style={styles.directionView}>
                  <View style={[styles.directionContentView,sizeStyle]}>
                      <Image style={styles.imageView} source={require('../../Resources/NewControllerImage/direction_bg.png')}>
                          {
                            this.showDisable_ImageView()
                          }
                          <View   {...this._panResponder.panHandlers} style={[styles.imageView]}>
                              <View style={styles.imageView}>
                                <Image style={[styles.imageView,sizeStyle]} source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + this.state.imageHighlight}}/>
                              </View>                           
                          </View>
                      </Image>
                  </View>
              </View>
        </View>
      // </View>

    );
  }

  deal_DataSource(allKeys){
    
      /* {"id":1,"name":"POWER","display_name":"电源"} */
      // OK
      // NAVIGATE_LEFT
      // NAVIGATE_RIGHT
      // NAVIGATE_UP
      // NAVIGATE_DOWN

      var self = this;
      if((allKeys==undefined)||(allKeys.length<=0)){
        return;
      }
      var disableImageArray =[];
      allKeys.forEach(element => {
        
          if(element.name=='OK'){ 
            LocationModelArray[0].enable==true;
            self.okButtonEnable=true; 
          }
          else if(element.name=='NAVIGATE_LEFT'){
            LocationModelArray[1].enable==true;
            self.leftButtonEnable=true;
          }
          else if(element.name=='NAVIGATE_RIGHT'){ 
            LocationModelArray[2].enable==true;
            self.rightButtonEnable=true;
          }
          else if(element.name=='NAVIGATE_UP'){
            LocationModelArray[3].enable==true;
            self.topButtonEnable=true;
          }
          else if(element.name=='NAVIGATE_DOWN'){
            LocationModelArray[4].enable==true;
            self.downButtonEnable=true;
          }
      });

  }

  /* 遮挡 的view */
  showDisable_ImageView(){

      var imageArray =[];
      LocationModelArray.forEach(element => {
        
          if(element.enable==false){

              let imageUrl = 'NewControllerImage/' + element.disableImage;
              imageArray.push(
                <Image  key={imageUrl} style={[styles.imageView,{'position':'absolute'}]} 
                source={{isStatic:!this.state.devMode, uri:this.state.basePath + imageUrl, scale:(PixelRatio != undefined) ? PixelRatio.get() : 2.0}} />
            );
             
          }
      });

      console.log('imageArray.length------------------'+imageArray.length);

      return(
        <View>
          {imageArray}
        </View>
      );
  }


  componentWillReceiveProps(props){

    if((props.dataSource !=undefined)&&(props.dataSource.length>0)){

      this.setState({allKeys:props.dataSource});
      this.deal_DataSource(props.dataSource);

    }
  }

  componentWillMount(){

      this._panResponder = PanResponder.create({
        onStartShouldSetPanResponder: (evt, gestureState) => {
            return true;
        },
        onMoveShouldSetPanResponder:  (evt, gestureState) => {
            return true;
        },
        onPanResponderGrant: (evt, gestureState) => {
            this._highlight(evt, gestureState);
        },
        onPanResponderMove: (evt, gestureState) => {
        },
        onPanResponderRelease: (evt, gestureState) => {
            this._unhighlight(evt, gestureState);
        },
        onPanResponderTerminate: (evt, gestureState) => {
        },
    });
  }
  
  componentDidMount() {
  }

  _unhighlight(evt, gestureState){
     this.setState({imageHighlight:''});
  }

  _highlight(evt, gestureState){
      // console.log('locationX------'+evt.nativeEvent.locationX);
      // console.log('locationY------'+evt.nativeEvent.locationY);
      var self = this;
      var model = this._locationWith(evt.nativeEvent.locationX,evt.nativeEvent.locationY);
      // console.log('model-------------'+JSON.stringify(model));
      let status = false;
      if(model.location=='center'){ status = self.okButtonEnable;}
      else if(model.location=='left'){ status = self.leftButtonEnable;}
      else if(model.location=='right'){ status = self.rightButtonEnable;}
      else if(model.location=='up'){ status = self.topButtonEnable;}
      else if(model.location=='down'){ status = self.downButtonEnable;}
      
      // console.log('status-------------'+status);

      if(status ==false){
        return;
      }
      if(this.props.onPressButton !=undefined){
        this.props.onPressButton(model.event);
      }
      this.setState({imageHighlight:model.image});
      
      // console.log('_highlight--------------------'+JSON.stringify(model));
  }

  _locationWith(locationX,locationY){


        var imageViewWidth = this.state.width;
        var leftLenghtOne = imageViewWidth/3;
        var lefLengthTwo = (imageViewWidth/3)*2;
        var leftLengthThree = imageViewWidth;

        var isLeft = false;  
        var isHorzionMiddle = false;
        var isRight = false;
        var isUp = false;  
        var isVerticalMiddle = false;
        var isDown = false;
        var resultModel ;


        /*水平处理 */
        if(locationX<leftLenghtOne){
          isLeft = true;
        }
        if((leftLenghtOne<locationX)&&(locationX<lefLengthTwo)){
          isHorzionMiddle = true;
        }
        if((lefLengthTwo<locationX)&&(locationX<leftLengthThree)){
          isRight = true;
        }

        /*垂直处理*/
        if(locationY<leftLenghtOne){
          isUp = true;
        }
        if((leftLenghtOne<locationY)&&(locationY<lefLengthTwo)){
          isVerticalMiddle = true;
        }
        if((lefLengthTwo<locationY)&&(locationY<leftLengthThree)){
          isDown = true;
        }

        /* center */
        if((isVerticalMiddle==true)&&(isHorzionMiddle==true)){
          resultModel = LocationModel.center;
        }


        if(isLeft==true ){
          /* 左 */
          resultModel = LocationModel.left;
        }
        if(isUp ==true ){
          /* 上 */
          resultModel = LocationModel.up;
        }
        if(isDown==true ){
          /*左下角*/
          resultModel = LocationModel.down;
        }
        if(isRight==true){
          /*右下角*/
          resultModel = LocationModel.right;
        }
        return  resultModel;
  }  

  onPanResponderReject(event, gestureState){
    // console.log("e-----"+JSON.stringify(event)) ;
    // console.log("gestureState-----"+JSON.stringify(gestureState)) ;
  }

  onPress(event, gestureState){
    // console.log("onPress-----"+event.target) ;
    // console.log("onPress-gestureState-----"+gestureState) ;
  }
 
}


var styles = StyleSheet.create({
  contentView:{},
  mainContainer: {
    // flex: 1,
    flexDirection: 'column',
    // backgroundColor: '#f8f8f8',
  },
  directionView:{
    // marginTop:300,
    // backgroundColor:'#ffffff',
  },
  imageView:{
    width:imageViewWidth,
    height:imageViewWidth,
  },
  directionContentView:{
    width:imageViewWidth,
    height:imageViewWidth,
    flexDirection:'column',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
});


module.exports = DirectionView;