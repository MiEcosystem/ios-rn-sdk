'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  Component,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  ScrollView,
  Dimensions,
  Modal,
  DeviceEventEmitter,
} = React;


var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const SafeBottomHeight =  (screenHeight==812)?(20):(0);

 class NormalExtendView extends React.Component {
  constructor(props, context) {
    super(props, context);
    this.state = {
      cloumnCount: 3,
      totalCount: this.props.totalCount,
      isShow:this.props.isShow,
      dataSource:this.props.dataSource,
    };
  }

  render() {


    return (
      <Modal 
        animationType="slide"
        visible={this.state.isShow}
        transparent={true}
        onRequestClose={()=>this.setState({modalVisible:false})} >
          <View style={styles.containerAll} >
              <TouchableHighlight onPress={()=>this.onPressHiddenExtensionView()}>
                  <View style ={[styles.contentTopView,{height:this.contentTopViewHeight()}]} >
                  </View>
              </TouchableHighlight>
              <View style={[styles.contentMiddleView,{height:titleContentViewHeight}]}>
               
                 <View style={[styles.middleView]}>
                 </View>
                 <View style={[styles.middleView]}>
                      <Text style={styles.titleStyle}>{LocalizedStrings.extra_key_text}</Text>
                 </View>
                 <View style={[styles.rightMiddleView]}>
                    <Button  style={{width:40,height:40,marginTop:10,marginRight:10}} 
                    imageNormal="NewControllerImage/extend_close_normal.png" 
                    imageHighlight='NewControllerImage/extend_close_press.png' 
                    imageWidth={30} imageHeight={30} 
                    onPress ={()=> this.onPressHiddenExtensionView()}  >
                    </Button>
                 </View>
              </View>
              { this.showContentView() } 

          </View>
      </Modal>
    );
  }


  showContentView(){

    var contentViewHeight = this.getContentViewHeight()+ SafeBottomHeight;
    var isShow = (contentViewHeight>=MaxContentViewHeight)?(true):(false);

    if(isShow==true){

      return(
        <ScrollView style={[styles.scrollContentView,{height:MaxContentViewHeight}]}
          horizontal={false}
          key={'noramalScrollView'}
          Vertical={true}
          scrollEnabled= {true}   >     
              <View style={[styles.contentView,{height:(this.getMaxContentViewHeight()+SafeBottomHeight)}]} >     
                {this.renderAllItem()}
              </View>
        </ScrollView>
        ) ;
      
    }else{
      
      return(
        <View style={[styles.contentView,{height:contentViewHeight}]} >     
        {this.renderAllItem()}
        </View>
     ) ;
     
    }
  }

  renderAllItem() {
      var dataSource = this.state.dataSource;
      var allItemDate = [];
      for(var i =0 ;i<dataSource.length;i++){
        let title = dataSource[i].display_name;
        let key = dataSource[i].name;

        if(title.length>12){
          title = title.slice(0,10)+'...';
        }
        allItemDate.push(
          <View style ={styles.columnContentView} key={JSON.stringify(title)} >
                <View style ={styles.columnItemBgView} >
                    <TitleButton style={styles.buttonView}  key ={title+i} onPress ={()=> this.onPressButton(key)} key = {title} title ={title}  titleSize={15} textColor="rgba(255,255,255,0.7)" >
                    </TitleButton>
                </View>
          </View>

        );
      }
      // console.log('length-------------------------'+(allItemDate.length/3));
      return allItemDate;
  }

  contentTopViewHeight(){
      var height = screenHeight - titleContentViewHeight - this.getContentViewHeight();
      return height;
  } 
  
  getContentViewHeight(){
      var height;
      var dataSource = this.state.dataSource;
      
      if(dataSource!=undefined){
          var count;
          if(dataSource.length%3!=0){
            count = (dataSource.length/3) +1;
          }else{
            count = dataSource.length/3;
          }
          height = count * (columnContentViewHeight);
      }

      if(height>MaxContentViewHeight){
        return MaxContentViewHeight;
      }
      return height;
  }

  /* 复制方法 */
  getMaxContentViewHeight(){

        var height;
        var dataSource = this.state.dataSource;
        
        if(dataSource!=undefined){
            var count;
            if(dataSource.length%3!=0){
              count = (dataSource.length/3) +1;
            }else{
              count = dataSource.length/3;
            }
            height = count * (columnContentViewHeight);
        }
        return height;
  }


  componentWillReceiveProps(props){

      if((props.isShow !=undefined)&&(props.isShow ==true)){
        this.setState({isShow:true});
      }

      if((props.dataSource !=undefined)&&(props.dataSource.length>0)){
        this.setState({dataSource:props.dataSource});
      }
  }

  onPressButton (event){

    if(this.props.onPressButton !=undefined){
      console.log('onPressButton------inside------'+event);
      this.props.onPressButton(event);
    }

  }

  onPressHiddenExtensionView(){
    if(this.props.onPressDissmissButton!=undefined){
       this.props.onPressDissmissButton();
    }
    this.setState({isShow:false});
  }

  componentWillMount() {
  }

  componentWillUnmount() {
  }

}


const marginWidth = 10;
const contentViewWidth = screenWidth-2*marginWidth;
const itemWidth = (contentViewWidth -(4 * marginWidth))/3.0;
const itemHeight = itemWidth * 0.4;
const columnContentViewWidth = contentViewWidth/3;
const columnContentViewHeight= itemWidth*0.5;
const contentViewHeight = screenHeight*0.7;
const titleContentViewHeight = 60;
const MaxContentViewHeight = (screenHeight- NavigatorBarHeight-titleContentViewHeight);


var styles = StyleSheet.create({
  containerAll:{
    flex:1,
    flexDirection:'column',
    justifyContent:'flex-end',
    width:screenWidth,
    height:screenHeight,
  },
  contentTopView:{
    width:screenWidth,
    backgroundColor:'rgba(44,44,44,0.7)',
  },
  contentMiddleView:{
    width:screenWidth,
    height:titleContentViewHeight,
    flexDirection:'row',
    backgroundColor:'rgba(44,44,44,1)',
  },
  titleStyle:{
    color:'#rgb(255,255,255)',
    fontSize:15,
  },
  textStyle:{
    color:'#rgba(255,255,255,0.7)',
    fontSize:15,
  },
  middleView:{
    width:screenWidth/3,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  rightMiddleView:{
    flexDirection:'row',
    justifyContent:'flex-end',
    width:screenWidth/3,
    height:titleContentViewHeight,
    paddingRight:10,
  },
  contentView:{
    flexDirection:'row',
    flexWrap:'wrap',
    justifyContent:'flex-start',
    paddingLeft:marginWidth,
    paddingRight:marginWidth,
    backgroundColor:'rgba(44,44,44,1)',
  },
  scrollContentView:{
    width:screenWidth,
    height:MaxContentViewHeight,
    flexDirection:'column',
    backgroundColor:'rgba(44,44,44,1)',
  },
  columnContentView:{
    width:columnContentViewWidth,
    height:columnContentViewHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    // backgroundColor:'#00fff0',
  },
  columnItemBgView:{
    width:itemWidth,
    height:itemHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    borderWidth:1,
    borderColor:'#rgba(255,255,255,0.7)',
    borderRadius:5,
  },
  buttonView:{
    width:itemWidth,
    // height:itemHeight,
  },

});


module.exports = NormalExtendView;