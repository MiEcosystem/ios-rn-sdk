'use strict'
var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var {Temperature, airMode , windSpeed, windDirection, scanWind, sleepMode} = require('../../../MainV2/MIRequestServer/AirStateModel');
var AirSenceStateAuto = require('../../../MainV2/ToolModel/AirState/AirSenceStateAuto').AirSenceStateAuto;
var AirSenceStateCool = require('../../../MainV2/ToolModel/AirState/AirSenceStateCool').AirSenceStateCool;
var AirSenceStateHot = require('../../../MainV2/ToolModel/AirState/AirSenceStateHot').AirSenceStateHot;
var AirSenceStateWet = require('../../../MainV2/ToolModel/AirState/AirSenceStateWet').AirSenceStateWet;
var AirSenceStateWind = require('../../../MainV2/ToolModel/AirState/AirSenceStateWind').AirSenceStateWind;
var {
  Component,
} = React;


var currentAirStateAuto;
var currentAirStateCool;
var currentAirStateHot;
var currentAirStateWet;
var currentAirStateWind;
/**/
var currentModelIndex =0;
var currentModelState={};

class AirSenceManager extends React.Component{

  constructor(props, context) {
    super(props, context);
    currentAirStateCool = new AirSenceStateCool();
    currentAirStateHot = new AirSenceStateHot();
    currentAirStateAuto = new AirSenceStateAuto();
    currentAirStateWind = new AirSenceStateWind();
    currentAirStateWet = new AirSenceStateWet();

    var allModeArray = [currentAirStateCool,
                        currentAirStateHot,
                        currentAirStateAuto,
                        currentAirStateWind,
                        currentAirStateWet,];
    this.state={
      isPowerOn:false,
      allModeArray:allModeArray,
    };
    this.isPowerOn= false;

  }

  instatceWithModel(modelArray){

      // console.log('modelArray------------------'+JSON.stringify(modelArray));
      this.modelArray = modelArray;
      for(var i=0;i<modelArray.length ;i++){
          if(i<=(this.state.allModeArray.length-1)){
          var model =  modelArray[i];
          var AirMode  = this.state.allModeArray[i];
          AirMode.instanceWithModel(model);
          }
      }
      if(modelArray.length>0){
       currentModelState = this.state.allModeArray[0];
      }
  }

  /* 空调打开后的状态 */
  getCurrentAllState(){
    var  currentStatuValue = currentModelState.getCurrentState();  
    return currentStatuValue;
  }

  /* 模式按钮*/ 
  changeModeButton(New_currentModelIndex){

    console.log('changeModeButton-------------'+New_currentModelIndex);

    switch(New_currentModelIndex){
          case 0:
          {  currentModelIndex = 0; currentModelState=currentAirStateCool; 
          }
          break;

          case 1:
          {  currentModelIndex = 1; currentModelState=currentAirStateHot ;
          }
          break;

          case 2:
          {   
            currentModelIndex = 2; currentModelState=currentAirStateAuto  ;
          }
          break;

          case 3:
          { currentModelIndex = 3; currentModelState=currentAirStateWind ;
          }
          break;

          case 4:
          { currentModelIndex = 4; currentModelState=currentAirStateWet ;
          }
          break;

          default:
          { 
            console.log('---进入---default-----------------------');;
            currentModelIndex =0;
            currentModelState=currentAirStateCool
          }
          break;
        }

    console.log('changeModeButton--currentModelState------------'+JSON.stringify(currentModelState));
    return   currentModelState.getCurrentState();

  }
  
  /* 温度 改变 按钮*/  
  changeTempeatureButton(temp){
     currentModelState = this.state.allModeArray[currentModelIndex];
     currentModelState.pressTemperatureAdd(temp);
    console.log('changeTempeatureButton--currentModelState--temp----------'+JSON.stringify(currentModelState));
    return   currentModelState.getCurrentState();
  }

  /* 风速度按钮*/  
  changeSpeedButton(speed){
    currentModelState = this.state.allModeArray[currentModelIndex];
    var  currentStatuValue = currentModelState.pressWindSpeed(speed)    
    return   currentModelState.getCurrentState();
  }

  getTempeatureData(){
    /*
    {     "mode": 3,
          "temps": [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
          "speeds": [1,2,3]   }
    */
    var array =[];
    var modelArray = this.modelArray;

    if((modelArray.length>0)&&(currentModelIndex<=(modelArray.length-1))){
     let  newCurrentModelState = this.modelArray[currentModelIndex];
      array = newCurrentModelState.temps;
    }

    return array;
  }

  getModelData(){
    var array =[];
    var self = this;
    var modelArray = this.modelArray;
    modelArray.forEach(element => {
      var model = self.getModel_WithModeType(element.mode);
      array.push(model);
    });

    return array;
  }
  
  getSpeedData(){
    var array =[];
    var modelArray = this.modelArray;
    if((modelArray.length>0)&&(currentModelIndex<=(modelArray.length-1))){
        var newCurrentModelState = this.modelArray[currentModelIndex];
        var speeds = newCurrentModelState.speeds;
        speeds.forEach(element => {
        let speedModel = this.getSpeed_withModelType(element);
         array.push(speedModel);
        });
    }

    return array;
  }

  getAllKeysData(){

    var allKeys =[
      {"id":0,"name":"power_on","display_name":"温度",'value':undefined,'valueName':undefined,'disabled':false},
      {"id":1,"name":"power_off","display_name":"模式",'value':undefined,'valueName':undefined,'disabled':false},
      {"id":2,"name":"POWER","display_name":"风速",'value':undefined,'valueName':undefined,'disabled':false},];

      console.log('getAllKeysData-currentModelIndex--------'+currentModelIndex);
      // var currentState = currentModelState.getCurrentState();    

      var currentModelState = this.state.allModeArray[currentModelIndex];
      console.log('getAllKeysData-currentModelState--------'+JSON.stringify(currentModelState));

      var currentState = currentModelState.getCurrentState();    
      console.log('getAllKeysData-currentState--------'+JSON.stringify(currentState));

      let model = this.getModel_WithModeType(currentState.mode);
      let speed = this.getSpeed_withModelType(currentState.speed);
      let temp = this.getTemp_withModeltType(currentState.temperature);

      if(temp!=undefined){
        allKeys[0].value=temp.id ;
        allKeys[0].valueName=temp.display_name ;
        allKeys[0].disabled= false;
      }else{
        allKeys[0].disabled= true;
      }



      if(model!=undefined){
        allKeys[1].value=model.id ;
        allKeys[1].valueName=model.display_name ;
        allKeys[1].disabled= false;
      }
      if(speed!=undefined){
        allKeys[2].value=speed.id ;
        allKeys[2].valueName=speed.display_name ;
        allKeys[2].disabled= false;
      }
      return allKeys;
  }

  configWithModel(modelArray){

      var array =[];
      var self = this;
      modelArray.forEach(element => {
        var model = self.getModel_WithModeType(element.mode);
        array.push(model);
      });
      return array;
  }

  getModel_WithModeType(type){

      let model={};
      if(type==0){
        model={'display_name':'制冷','id':0};
      }
      else if(type==1){
        model={'display_name':'制热','id':1};
      }
      else if(type==2){
        model={'display_name':'自动','id':2};
      }
      else if(type==3){
        model={'display_name':'送风','id':3};
      }
      else if(type==4){
        model={'display_name':'除湿','id':4};
      }
      return model;
  }

  getSpeed_withModelType(speedType){

      let model={};
      if(speedType==0){

        model={'display_name':'自动','id':0};
      }
      else if(speedType==1){

        model={'display_name':'低速','id':1};
      }
      else if(speedType==2){
        model={'display_name':'中速','id':2};
      }
      else if(speedType==3){
        model={'display_name':'高速','id':3};
      }
      return model;
  }

  getTemp_withModeltType(temp){

    if(temp==undefined){ return; }
    let model = {'display_name':temp,'id':temp};
    return model;
  }

  getTemps_withModeltType(temps){
    var array =[];
    temps.forEach(element => {
      let model = {'display_name':element,'id':element};
      array.push(model);

    });
    return array;
  }
  

}
module.exports.AirSenceManager = AirSenceManager;