'use strict';

var React = require('react-native');
var {
    Dimensions,
    PixelRatio,
    Platform,
} = React;
// var Dimensions = require('Dimensions');
// var PixelRatio = require('PixelRatio');
// var Platform = require('Platform');
var Button = require('../../CommonModules/Button');
var ImageButton = require('../../CommonModules/ImageButton');
var NewTopBoxLogic = require('../TopBoxLogic/NewTopBoxLogic');
var BrandList = require('../../MainV2/BrandList/BrandList');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var { INSIDE_DEVICE_MODEL } = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var basePath = MHPluginSDK.basePath;
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);

var {
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Image,
    TouchableHighlight,
    Component,
    ScrollView,
    ActivityIndicatorIOS,
} = React;


var createRemoterButtons = function(otherButtonTitle, i) {

    // console.log('createRemoterButtons:'+ JSON.stringify(otherButtonTitle));
    var remoterModel = otherButtonTitle;
    return <RemoterButton key={"RemoterButton_" + i} remoterModel={remoterModel} onPress={function(event) {
        this.onRemoterPress()(otherButtonTitle);
    }.bind(this)} />;
}

var RemoterButton = React.createClass({
    render: function() {
        var title = this.props.title;

        var normalRemoterIcon = this.props.remoterModel.iconNormal;
        var highlightRemoterIcon = this.props.remoterModel.iconHighlight;
        var title = this.props.remoterModel.china_name;

        var remoterItemWidth = Dimensions.get('window').width / 3.0;
        var imageWidth = 84;
        var imageHeight = imageWidth;
        return (
            <View style={[styles.RemoterItem, { width: remoterItemWidth }]}>
                <Button
                    onPress={this.onPressButton(this.props.title).bind(this)}
                    source={{ isStatic: true, uri: normalRemoterIcon }}
                    imageNormal={normalRemoterIcon}
                    title={title}
                    imageHighlight={highlightRemoterIcon}
                    imageWidth={imageWidth} imageHeight={imageHeight}
                />
            </View>
        );
    },

    onPressButton(event) {
        var flagString = function() {
            this.props.onPress(event);
        }
        return flagString;
    },

});

var createRemoterRows = function(remotersInRow, i) {
    // console.log('remotersInRow:'+ JSON.stringify(remotersInRow));
    return <RemoterRow key={"RemoterRow_" + i} remotersInRow={remotersInRow} onRemoterPress={function(event) {
        this.onRemoterPress()(event);
    }.bind(this)} />;
}

var RemoterRow = React.createClass({
    render: function() {
        var remotersInRow = this.props.remotersInRow;
        var self = this;
        return (
            <View style={styles.containerRow}>
                {remotersInRow.map(createRemoterButtons, self)}
            </View>
        );
    },

    onRemoterPress() {
        return function(event) {
            this.props.onRemoterPress(event);
        }.bind(this);
    }
});

class AddRemoter extends Component {
    constructor(props) {
        super(props);
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            requestStatus: false,
            clicked: 'none',
            devMode: MHPluginSDK.devMode,
            categories: [],
        };
    }

    componentDidMount() {
        /* 发送网络请求 */
        var self = this;
        MIRequestServer.Post_GetDeviceTypeList(undefined,
            function(response) {
                //console.log('Post_GetDeviceTypeList:'+JSON.stringify(response));
                if (response.result.categories != undefined) {
                    var categories = response.result.categories;
                    /* 更新UI*/
                    self.setState({
                        requestStatus: true,
                        categories: categories,
                    });
                }

            }, function(error) {
                // self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
            });
    }

    getDeviceModel() {
        var totalArray = [];
        var totalChildArray = [];
        var categories = this.state.categories;

        for (let i = 0; i < categories.length; i++) {
            var deviceModel = categories[i];
            var deviceType = deviceModel.name;
            var object = INSIDE_DEVICE_MODEL[deviceType];

            if ((i + 1) % 3 == 0) {
                //满足3个
                totalChildArray.push(object);
                var tempArray = totalChildArray;
                totalArray.push(tempArray);
                totalChildArray = [];
            } else {
                //不足3个
                totalChildArray.push(object);
            }

            if (((i + 1) == categories.length) && (totalChildArray.length > 0)) {
                totalArray.push(totalChildArray);
            }
        }

        return totalArray;
    }


    render() {

        var totalArray = this.getDeviceModel();
        if (this.state.requestStatus == false) {

            return (
                <View style={styles.container}>
                    <ActivityIndicatorIOS
                        animating={true}
                        style={[styles.centering, { height: 80 }]}
                        size="small" />
                </View>);

        } else {

            return (
                <ScrollView style={styles.containerAll}>
                    <MessageToast ref='toast' />
                    {totalArray.map(createRemoterRows, this)}
                </ScrollView>
            );
        }
    }

    /* 点击事件方法*/
    onRemoterPress() {
        return function(event) {
            var controller = event.remoter;
            var deviceType = event.id;
            var select_GateWayId = this.state.did;

            console.log('-------onRemoterPress-------------event-------' + JSON.stringify(event));
            if (event.name == 'STB') {
                this.props.navigator.push({
                    title: event,
                    ...NewTopBoxLogic.route,
                    passProps: {
                        select_GateWayId: select_GateWayId,
                    }
                });

            } else {

                console.log('-------onRemoterPress-------------event--else-----' + JSON.stringify(event));
                /* 获取 设备类型，跳转到指定 品牌列表 */
                console.log('AddRemoter--deviceType:' + deviceType);
                this.props.navigator.push({
                    title: event,
                    ...BrandList.route,
                    passProps: {
                        deviceType: deviceType,
                        gateWay_ID: this.state.did,
                    }
                });

            }

        }.bind(this);
    }
};

var styles = StyleSheet.create({
    centering: {
        flex: 1,
        flexDirection: 'column',
        alignSelf: 'stretch',
        justifyContent: 'center',
    },
    container: {
        flex: 1,
        alignSelf: 'center',
    },
    containerAll: {
        flex: 1,
        marginTop: NavigatorBarHeight,
        backgroundColor: '#ffffff',
    },
    containerRow: {
        flex: 1,
        flexDirection: 'row',
        height: 150,
    },
    RemoterItem: {
        marginTop: 20,
    },
});

//每一个页面都有一个路由
const KEY_OF_MAINPAGE = 'AddRemoter';
var route = {
    key: KEY_OF_MAINPAGE,
    title: LocalizedStrings.ir_matching_controller,
    component: AddRemoter,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#808080',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {

        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );

    },
    renderNavRightComponent: function(route, navigator, index, navState) {
        return null;
    },
}



module.exports = {
    component: AddRemoter,
    route: route,
}
