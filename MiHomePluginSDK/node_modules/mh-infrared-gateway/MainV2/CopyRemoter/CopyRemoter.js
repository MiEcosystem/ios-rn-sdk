'use strict';

var React = require('react-native');
var {
    Dimensions,
    PixelRatio,
    Platform,
} = React;
// var Dimensions = require('Dimensions');
// var PixelRatio = require('PixelRatio');
// var Platform = require('Platform');
var Button = require('../../CommonModules/Button');
var ImageButton = require('../../CommonModules/ImageButton');


var BrandList = require('../../MainV2/BrandList/BrandList');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var StudyRemoter = require('../../MainV2/StudyRemoter/StudyRemoter');
var GateWayRemoter = require('../../MainV2/GateWay/GateWayRemoter');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var { INSIDE_DEVICE_MODEL } = require('../../MainV2/ConstDefine/IRV2PublicDefine');
var New_studyRemoter = require('../../MainV2/AllStudyRemoter/New_studyRemoter');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var Customer_studyRemoter = require('../../MainV2/AllStudyRemoter/Customer_studyRemoter');
var basePath = MHPluginSDK.basePath;


var {
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Image,
    Dimensions,
    TouchableHighlight,
    Component,
    ActivityIndicatorIOS,
    ScrollView,
} = React;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);


var createRemoterButtons = function(otherButtonTitle, i) {
    var remoterModel = otherButtonTitle;
    return <RemoterButton key={"RemoterButton_" + i} remoterModel={remoterModel} onPress={function(event) {
        this.onRemoterPress()(otherButtonTitle);
    }.bind(this)} />;
}

var RemoterButton = React.createClass({
    render: function() {
        // console.log('RemoterButton:'+JSON.stringify(this.props));
        var normalRemoterIcon = this.props.remoterModel.iconNormal;
        var highlightRemoterIcon = this.props.remoterModel.iconHighlight;
        var title = this.props.remoterModel.china_name;
        var remoterItemWidth = Dimensions.get('window').width / 3.0;
        var imageWidth = 84;
        var imageHeight = imageWidth;
        return (
            <View style={[styles.RemoterItem, { width: remoterItemWidth }]}>
                <Button
                    onPress={this.onPressButton(this.props.title).bind(this)}
                    source={{ isStatic: true, uri: normalRemoterIcon }}
                    imageNormal={normalRemoterIcon}
                    title={title}
                    imageHighlight={highlightRemoterIcon}
                    imageWidth={imageWidth} imageHeight={imageHeight}
                />
            </View>
        );
    },

    onPressButton(event) {
        var flagString = function() {
            this.props.onPress(event);
        }
        return flagString;
    },

});

var createRemoterRows = function(remotersInRow, i) {
    return <RemoterRow key={"RemoterRow_" + i} remotersInRow={remotersInRow} onRemoterPress={function(event) {
        this.onRemoterPress()(event);
    }.bind(this)} />;
}

var RemoterRow = React.createClass({
    render: function() {
        var remotersInRow = this.props.remotersInRow;
        var self = this;
        return (
            <View style={styles.containerRow}>
                {remotersInRow.map(createRemoterButtons, self)}
            </View>
        );
    },

    onRemoterPress() {
        return function(event) {
            this.props.onRemoterPress(event);
        }.bind(this);
    }
});

class CopyRemoter extends Component {
    constructor(props) {
        super(props);
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            requestStatus: false,
            clicked: 'none',
            devMode: MHPluginSDK.devMode,
            categories: [],
        };
    }

    componentDidMount() {
        /* 发送网络请求 */
        var self = this;
        MIRequestServer.Post_GetDeviceTypeList(undefined,
            function(response) {
                //console.log('Post_GetDeviceTypeList:'+JSON.stringify(response));
                if (response.result.categories != undefined) {
                    var categories = response.result.categories;
                    /*手动添加一个自定义通用设备*/
                    categories.push({ 'id': 0, 'name': 'GeneralDevice' });
                    /* 更新UI*/
                    self.setState({
                        requestStatus: true,
                        categories: categories,
                    });
                }

            }, function(error) {
                // self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
            });
    }

    getDeviceModel() {
        var totalArray = [];
        var totalChildArray = [];
        var categories = this.state.categories;

        // console.log('categories:' +JSON.stringify(categories));
        for (let i = 0; i < categories.length; i++) {
            var deviceModel = categories[i];
            var deviceType = deviceModel.name;
            // console.log('----copyRemoter-----deviceType------'+deviceType);
            var object = INSIDE_DEVICE_MODEL[deviceType];
            // console.log('----copyRemoter-----object------'+JSON.stringify(object));
            if ((i + 1) % 3 == 0) {
                //满足3个
                totalChildArray.push(object);
                var tempArray = totalChildArray;
                totalArray.push(tempArray);
                totalChildArray = [];
            } else {
                //不足3个
                totalChildArray.push(object);
            }

            if (((i + 1) == categories.length) && (totalChildArray.length > 0)) {
                totalArray.push(totalChildArray);
            }
        }

        return totalArray;
    }


    render() {

        if (this.state.requestStatus == false) {

            return (
                <View style={styles.container}>
                    <ActivityIndicatorIOS
                        animating={true}
                        style={[styles.centering, { height: 80 }]}
                        size="small" />
                </View>
            );
        } else {
            var totalArray = this.getDeviceModel();
            return (
                <ScrollView style={styles.containerAll}>
                    <MessageToast ref='toast' />
                    {totalArray.map(createRemoterRows, this)}
                </ScrollView>
            );
        }




    }

    /* 点击事件方法*/
    onRemoterPress() {
        return function(event) {
            var self = this;
            var deviceType = event.id;
            // console.log('CopyRemoter-event-------'+ JSON.stringify(event));
            if (event.id == 5) {/* 空调*/
                this.refs.toast.showMessage('空调暂未开通学习功能');
                return;
            }

            self.pushDeviceRmoter(self.state.did, deviceType);

        }.bind(this);
    }

    /*
      remoter 控制器类型
      selectGateWay_ID 选中网关id
      deviceType 设备类型
    */
    pushDeviceRmoter(selectGateWay_ID, deviceType) {
        console.log('----------------deviceType:' + JSON.stringify(deviceType));
        console.log('----------------selectGateWay_ID:' + selectGateWay_ID);
        var self = this;

        if (deviceType == 0) {

            self.props.navigator.push({
                ...Customer_studyRemoter.route,
                passProps: {
                    selectGateWay_ID: selectGateWay_ID,
                    deviceType: deviceType,
                }
            });
            return;
        }

        self.props.navigator.push({
            ...New_studyRemoter.route,
            passProps: {
                selectGateWay_ID: selectGateWay_ID,
                deviceType: deviceType,
            }
        });
    }
};

var styles = StyleSheet.create({
    centering: {
        flex: 1,
        flexDirection: 'column',
        alignSelf: 'stretch',
        justifyContent: 'center',
    },
    container: {
        flex: 1,
        alignSelf: 'center',
    },
    containerAll: {
        flex: 1,
        marginTop: NavigatorBarHeight,
        backgroundColor: '#f8f8f8',
    },
    containerRow: {
        flex: 1,
        flexDirection: 'row',
        height: 150,
        backgroundColor: '#ffffff',
    },
    RemoterItem: {
        marginTop: 20,
    },
});


// 打开更多菜单
var openMorePage = function(navigator) {

};

//每一个页面都有一个路由
const KEY_OF_MAINPAGE = 'CopyRemoter';
var route = {
    key: KEY_OF_MAINPAGE,
    title: LocalizedStrings.ir_study_controller_title,
    component: CopyRemoter,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#808080',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {

        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );

    },
    renderNavRightComponent: function(route, navigator, index, navState) {
        if (MHPluginSDK.userId == MHPluginSDK.ownerId) // 非分享设备
        {
            return null;
        }
        else {
            return null;
        }
    },
}

module.exports = {
    component: CopyRemoter,
    route: route,
}
