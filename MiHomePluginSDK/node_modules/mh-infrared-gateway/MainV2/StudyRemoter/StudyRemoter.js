'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  Dimensions,
  ScrollView,
  Button,
  DeviceEventEmitter,
} = React;



import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var StudyModel = require('../../MainV2/StudyRemoter/StudyModel').StudyModel;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
// var TimerMixin = require('react-timer-mixin');


var currentStudyKey;
var isAlreadyPop;
var requestCount;

class StudyRemoterVC extends React.Component {
 
  constructor(props, context) {
    super(props, context);
    this.state = {
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            requestStatus: false,
            devMode: MHPluginSDK.devMode,
            remoterID: this.props.remoterID,
            ButtonTitle:this.props.ButtonTitle,
            showString:'',
            tickSecond:0, 
          };
    isAlreadyPop=false;
    requestCount=0;


    console.log('ButtonTitle:'+this.props.ButtonTitle);
    console.log('remoterID:'+this.props.remoterID);
  }

  render() {
    return (
        <View style={styles.containerAll}>
          <MessageToast ref='topToast'/>
          <View style={styles.topView}>
              <Text style={styles.topText}>{this.state.showString}</Text>
          </View>
          <View style={styles.topImageView}>
              <Image style={styles.bgImage}
              source={{isStatic:!MHPluginSDK.devMode, uri:MHPluginSDK.basePath + 'ControllerImage/copy_hint.png'}}
              />
          </View>
        </View>
    );
  }

  timeTick(){
  
    var tickSecond = this.state.tickSecond;
    var showString = '';

    if(tickSecond%3==0){
      showString = '对准遥控器中心按下相同按键.';
    }else if(tickSecond%3==1){
      showString = '对准遥控器中心按下相同按键..';
    }else if(tickSecond%3==2){
      showString = '对准遥控器中心按下相同按键...';
    }
    else{
      showString = '对准遥控器中心按下相同按键';
    }
    tickSecond ++;
    this.setState({showString:showString,tickSecond:tickSecond});

  }


  componentWillMount() {

    currentStudyKey = StudyModel.getStudyKey();
    this.statrtLearnWithServer(); 
    this.timer =  setInterval(
                    () =>  this.timeTick(),
                    500
                  );
    this.requestTimer = setInterval(
                      ()=> this.requestWithServer()
                      ,1000);
    
                      /* 添加监听方法 */ 
    var self = this;    
    this._studyListener = DeviceEventEmitter.addListener('studyLearnSuccess', (event) => {
        
      // this.saveStudyKeyCode(event);
      console.log('studyLearnSuccess:'+JSON.stringify(event));
    });
    

  }







  // /* 保存遥控器学习到的键 */
  // saveStudyKeyCode(jsonModel){
  //   /*
  //   jsonModel ={"key":"798469871533980","code":"nM4mEsm00mEsmszAHKagDrMQBDAIwBmQKvAhibAIVNJyAQcxAIWYQAA="}
  //   */
  //   var self = this; 
  //   var param ={
  //     "did": this.state.remoterID,
  //     "name": this.state.ButtonTitle,
  //     "code": jsonModel.code,
  //   };


  //   MIRequestServer.Post_AddCustomerKey(param,
  //     function(response){

  //       if(response.code==0){
  //         console.log('saveStudyKeyCode--------inside---------------'+JSON.stringify(response));
  //         /* 避免多次pop*/
  //         isAlreadyPop =true;
  //         // self.refs.Toast.showMessage(response.message);
  //         self.props.navigator.pop();
  //       }
          
  //     },function(error){
  //         console.log('error:'+JSON.stringify(error));
  //         // self.refs.Toast.showMessage(JSON.stringify(error));
  //     }); 

    
  // }


  /* 开始学习*/
  statrtLearnWithServer(){
  
    var params =  {
        'params':{
          'key':currentStudyKey,
        },
      };
    console.log('statrtLearnWithServer-params:'+JSON.stringify(params)); 
    MHPluginSDK.callMethod('miIO.ir_learn',[],params,(isSuccess,json)=>{
        console.log('statrtLearnWithServer--response'+JSON.stringify(json));
    });
  }


  /* 查询学习结果*/
  requestWithServer(){

      if(requestCount>13){ /* 十秒时候自动返回 */
       
        requestCount=0;
        this.props.navigator.pop();
      }
      requestCount++;

      var self = this;
      var params ={
        'params':{
          'key':currentStudyKey,
          },
      };
      console.log('requestWithServer-params:'+JSON.stringify(params));
      MHPluginSDK.callMethod('miIO.ir_read',[],params,(isSuccess,json)=>{
        
        console.log('requestWithServer-response:'+JSON.stringify(json));
        if((json!=undefined)&&(json.result!=undefined)){

          console.log('special-requestWithServer-length-------'+json.result.code.length);
          if((json.result.code!="")&&(json.result.code.length>0)){
           
              var result = json.result;
              var response = {
                'name':self.state.ButtonTitle,
                'code':result.code
              }
              MHPluginSDK.sendEvent('newStudyLearnSuccess',response);
            
              if(isAlreadyPop==false){
                self.props.navigator.pop();
              }
              isAlreadyPop =true;
          }
      }
       
      });
   

  }


  componentWillUnmount() {
    this.timer && clearTimeout(this.timer);
    this.timer =null;
    this.requestTimer && clearTimeout(this.requestTimer);
    this.requestTimer =null;
    
  }
}

const sectionHeght =( screenHeight - NavigatorBarHeight -300)/3.0;
const sectionWidth=  screenWidth/2.0;
const topViewHeight = 20;
const imageHeight = screenHeight*0.8;
const imageWidth = imageHeight *0.587;


var styles = StyleSheet.create({
  containerAll: {
    flex:1,
    flexDirection: 'column',
    backgroundColor:'#ffffff',
  },
  topView:{
    width:screenWidth,
    marginTop:NavigatorBarHeight+topViewHeight,
    height:topViewHeight,
    marginLeft:screenWidth/2,
    alignSelf:'center',
  },
  topText:{
  },
  topImageView:{
    marginTop:topViewHeight,
    width:imageWidth,
    height:imageHeight,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    backgroundColor:'#ffffff',
  },
  bgImage: {
    width:imageWidth,
    height:imageHeight,
    alignSelf: 'center',
    resizeMode: 'contain',
  },

});

const KEY_OF_MAINPAGE = 'StudyRemoterVC';

// 打开更多菜单
var openMorePage = function (navigator) {
  // navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: StudyRemoterVC,
  navLeftButtonStyle: {
    tintColor:'#ffffff',
  },
  navTitleStyle: {
    color:'#000000',
  },
  navBarStyle: {
    backgroundColor:'#f8f8f8',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
                  if (index === 0) {
                    MHPluginSDK.closeCurrentPage();
                  } else {
                    navigator.pop();
                  }
            }}
            style={[{width:29, height:29, tintColor: '#000000'}]}
          />
        </View>
      );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    
      return null;
  },
}

module.exports = {
  component: StudyRemoterVC,
  route: route,
}
