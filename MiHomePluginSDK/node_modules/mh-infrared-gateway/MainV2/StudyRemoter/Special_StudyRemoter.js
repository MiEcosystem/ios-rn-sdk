'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  Dimensions,
  ScrollView,
  Button,
  DeviceEventEmitter,
} = React;



import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MHMiIR = NativeModules.MHMiIR;

var Setting = require('../../Main/MHSetting');
var ImageButton = require('../../CommonModules/ImageButton');
var Button = require('../../CommonModules/Button');
var TitleButton = require('../../CommonModules/TitleButton');
var StudyModel = require('../../MainV2/StudyRemoter/StudyModel').StudyModel;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);



/*
  这是一个特殊的学习页面，用于解决米家插件入口
  无法发送PRC命令的bug
*/

/*
解决方法

  import 库
  var miir = NativeModules.MHMiIR;

  选择要发送的红外网关的did
  miir.updateRPCDevice('红外网关的did');

  使用miir的callMethod 发送RPC
  miir.callMethod(method, [], { "params": {} }, (res, json) => {
    
  });
*/



var currentStudyKey;
var isAlreadyPop;
var requestCount;

class Special_StudyRemoter extends React.Component {

  constructor(props, context) {
    super(props, context);
    this.state = {
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      requestStatus: false,
      devMode: MHPluginSDK.devMode,
      remoterID: this.props.remoterID,
      ButtonTitle: this.props.ButtonTitle,
      showString: '',
      tickSecond: 0,
    };
    isAlreadyPop = false;
    requestCount = 0;
  }

  render() {
    return (
      <View style={styles.containerAll}>
        <MessageToast ref='topToast' />
        <View style={styles.topView}>
          <Text style={styles.topText}>{this.state.showString}</Text>
        </View>
        <View style={styles.topImageView}>
          <Image style={styles.bgImage}
            source={{ isStatic: !MHPluginSDK.devMode, uri: MHPluginSDK.basePath + 'ControllerImage/copy_hint.png' }}
          />
        </View>
      </View>
    );
  }

  timeTick() {

    var tickSecond = this.state.tickSecond;
    var showString = '';

    if (tickSecond % 3 == 0) {
      showString = '对准遥控器中心按下相同按键.';
    } else if (tickSecond % 3 == 1) {
      showString = '对准遥控器中心按下相同按键..';
    } else if (tickSecond % 3 == 2) {
      showString = '对准遥控器中心按下相同按键...';
    }
    else {
      showString = '对准遥控器中心按下相同按键';
    }
    tickSecond++;
    this.setState({ showString: showString, tickSecond: tickSecond });

  }


  componentWillMount() {

    currentStudyKey = StudyModel.getStudyKey();
    this.statrtLearnWithServer();
    this.timer = setInterval(
      () => this.timeTick(),
      500
    );
    this.requestTimer = setInterval(
      () => this.requestWithServer()
      , 1000);

    /* 添加监听方法 */
    var self = this;
    this._studyListener = DeviceEventEmitter.addListener('studyLearnSuccess', (event) => {

      // this.saveStudyKeyCode(event);
      console.log('studyLearnSuccess:' + JSON.stringify(event));
    });


  }


  /* 开始学习*/
  statrtLearnWithServer() {

    var params = {
      'params': {
        'key': currentStudyKey,
      },
    };
    console.log('special-statrtLearnWithServer-params:' + JSON.stringify(params));

    if ((MHMiIR != undefined) && (MHMiIR.callMethod != undefined)) {
      MHMiIR.callMethod('miIO.ir_learn', [], params, (isSuccess, json) => {
        console.log('special-statrtLearnWithServer--response' + JSON.stringify(json));
      });
    }


  }


  /* 查询学习结果*/
  requestWithServer() {

    if (requestCount > 13) { /* 十秒时候自动返回 */

      requestCount = 0;
      this.props.navigator.pop();
    }
    requestCount++;

    var self = this;
    var params = {
      'params': {
        'key': currentStudyKey,
      },
    };

    if ((MHMiIR == undefined) || (MHMiIR.callMethod == undefined)) {
      console.log('Api 不存在，----- 不发网络请求 ');
      return;
    }

    MHMiIR.callMethod('miIO.ir_read', [], params, (isSuccess, json) => {

      console.log('special-requestWithServer-response:' + JSON.stringify(json));
      if ((json != undefined) && (json.result != undefined)) {

        console.log('special-requestWithServer-length-------' + json.result.code.length);
        if ((json.result.code != "") && (json.result.code.length > 0)) {

          var result = json.result;
          var response = {
            'name': self.state.ButtonTitle,
            'code': result.code
          }
          MHPluginSDK.sendEvent('newStudyLearnSuccess', response);

          if (isAlreadyPop == false) {
            self.props.navigator.pop();
          }
          isAlreadyPop = true;
        }
      }

    });


  }


  componentWillUnmount() {
    this.timer && clearTimeout(this.timer);
    this.timer = null;
    this.requestTimer && clearTimeout(this.requestTimer);
    this.requestTimer = null;

  }
}

const sectionHeght = (screenHeight - NavigatorBarHeight - 300) / 3.0;
const sectionWidth = screenWidth / 2.0;
const topViewHeight = 20;
const imageHeight = screenHeight * 0.8;
const imageWidth = imageHeight * 0.587;


var styles = StyleSheet.create({
  containerAll: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: '#ffffff',
  },
  topView: {
    width: screenWidth,
    marginTop: NavigatorBarHeight + topViewHeight,
    height: topViewHeight,
    marginLeft: screenWidth / 2,
    alignSelf: 'center',
  },
  topText: {
  },
  topImageView: {
    marginTop: topViewHeight,
    width: imageWidth,
    height: imageHeight,
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    backgroundColor: '#ffffff',
  },
  bgImage: {
    width: imageWidth,
    height: imageHeight,
    alignSelf: 'center',
    resizeMode: 'contain',
  },

});

const KEY_OF_MAINPAGE = 'Special_StudyRemoter';

// 打开更多菜单
var openMorePage = function (navigator) {
  // navigator.push(Setting.route);
};

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: Special_StudyRemoter,
  navLeftButtonStyle: {
    tintColor: '#ffffff',
  },
  navTitleStyle: {
    color: '#000000',
  },
  navBarStyle: {
    backgroundColor: '#f8f8f8',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function (route, navigator, index, navState) {
    return (
      <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
        <ImageButton
          source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
          onPress={() => {
            if (index === 0) {
              MHPluginSDK.closeCurrentPage();
            } else {
              navigator.pop();
            }
          }}
          style={[{ width: 29, height: 29, tintColor: '#000000' }]}
        />
      </View>
    );
  },
  renderNavRightComponent: function (route, navigator, index, navState) {
    if (MHPluginSDK.userId == MHPluginSDK.ownerId) // 非分享设备
    {
      return (
        <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
          <ImageButton
            source={{ uri: MHPluginSDK.uriNaviMoreButtonImage, scale: PixelRatio.get() }}
            onPress={() => {
              openMorePage(navigator);
            }}
            style={[{ width: 29, height: 29, tintColor: '#000000' }]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: Special_StudyRemoter,
  route: route,
}
