'use strict'
var React = require('react-native');
var {
  Component,
} = React;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var { Temperature, airMode , windSpeed, windDirection, scanWind, sleepMode} = require('../../../MainV2/MIRequestServer/AirStateModel');
var currentWindSpeed;
var currentAirMode;

class AirStateAuto extends  React.Component {

  
  constructor(props, context) {
    super(props, context);
    this.state={
      OriginalData:{},
      mode:'',
      temperature:'',
      speed:'',
    };
  }

    /*
    {
    "mode": 0,
     "temps": [ 16,17,18, 19, 20,21,22,23,24, 25, 26,27,28, 29,30 ],
     "speeds": [ 0,1,2,3]
      }  */
  instanceWithModel(Model){


      // console.log('----auto--------instanceWithModel--------------'+JSON.stringify(Model));
      this.OriginalData = Model;
      this.mode = Model.mode;
      
      if((Model.temps!=undefined)&&(Model.temps.length>0)){
        this.temperature = Model.temps[0];
      }
      if((Model.speeds!=undefined)&&(Model.speeds.length>0)){
        this.speed = Model.speeds[0];
      }
  }

  pressTemperatureAdd(){


      var TemperatureNumberArray = this.OriginalData.temps;
      var new_temperature = this.temperature +1 ;

      if((TemperatureNumberArray!=undefined)&&(TemperatureNumberArray.length>0)&&(TemperatureNumberArray.indexOf(new_temperature)>0)){
        /*数组不为null 且 加1 后 在数组内 */

        this.temperature  = new_temperature;
        return  this._updateTempeture(new_temperature);
      
      }else{
        return {};
      }
   
  }

  pressTemperatureReduce(){

      var TemperatureNumberArray = this.OriginalData.temps;
      var new_temperature = this.temperature -1 
      if((TemperatureNumberArray!=undefined)&&(TemperatureNumberArray.length>0)&&(TemperatureNumberArray.indexOf(new_temperature)>-1)){

        /*数组不为null 且 减 1 后 在数组内 */
        this.temperature  = new_temperature;
        return this._updateTempeture(new_temperature);
      
      }else{
        return {};
      }
    
  }

  pressWindSpeed(){

    var speedsNumberArray = this.OriginalData.speeds;
    var new_speed = this.speed +1;
    if((speedsNumberArray!=undefined)&&(speedsNumberArray.length>0)&&(speedsNumberArray.indexOf(new_speed)>-1)){

        this.speed  = new_speed;
        return this._getCurrentSpeed(new_speed);
    }else{
      /*重置 循环*/
        if(speedsNumberArray.length>0){
          this.speed = this.OriginalData.speeds[0];
          return this._getCurrentSpeed(this.speed);
        }
    }

  }

  /*返回UI 状态*/
  getCurrentUIState(){

    var currentSpeed = this._getCurrentSpeed(this.speed);
    var currentTempeture = this._updateTempeture(this.temperature);
    var currentModel = this._getCurrentMode(this.mode);
    console.log('----------currentTempeture--------------'+this.temperature);
    
    var currentUIState ={
              'airMode':currentModel,
              'windSpeed':currentSpeed,
              'windDirection':this._getwindDirection(),
              'scanWind':this._getScanMode(),
              'sleepMode':this._getSleepMode(),
              'temperature':this.temperature}
    var new_currentUIState = Object.assign(currentUIState,currentTempeture); 
    return new_currentUIState;
  }
  
  /*返回UI 状态*/
  getCurrentState(){
    var currentState = {
      mode:this.mode,
      temperature:this.temperature,
      speed:this.speed
      };
    return currentState;
  }


  /*private 温度 */
  _updateTempeture(number){

    var first =  parseInt(number/10) ;
    var last =  parseInt(number%10);

    let firstPath =  MHPluginSDK.basePath + 'AirControllerImage/' + Temperature[first];
    let lastPath =  MHPluginSDK.basePath + 'AirControllerImage/' + Temperature[last];
    var currentTempeture ={
      temperatureNumberOne:firstPath,
      temperatureNumberTwo:lastPath
    };
    return currentTempeture;
  }

  /* private 获取当前空调风速度*/
  _getCurrentSpeed(index){

      switch(index){
        case 0:
        { currentWindSpeed = windSpeed.auto;
        }
        break;
        case 1:
        { currentWindSpeed = windSpeed.low;
        }
        break;
        case 2:
        { currentWindSpeed = windSpeed.middle;
        }
        break;
        case 3:
        { currentWindSpeed = windSpeed.high;
        }
        break;
        default:
        { currentWindSpeed = windSpeed.auto;
        }
        break;
      }
      return currentWindSpeed;
  }

  _getCurrentMode(){

    var _currentAirModeIndex = this.mode;

    switch(_currentAirModeIndex){
      case 0:
      { currentAirMode = airMode.cool;
      }
      break;

      case 1:
      { currentAirMode = airMode.heat;
      }
      break;

      case 2:
      { currentAirMode = airMode.auto;
      }
      break;

      case 3:
      { currentAirMode = airMode.winddirect;
      }
      break;

      case 4:
      { currentAirMode = airMode.humidity;
      }
      break;

      default:
      { currentAirMode = airMode.cool;
      }
      break;
    }

    // console.log('---------------cool-----'+JSON.stringify(currentAirMode));
    return currentAirMode;
  }

  /* private */
  _getSleepMode(){
    /* scanWind*/
    return {
    'sleepMode':undefined,
    'Title':undefined,
    'imageName':undefined,};
  }

  /* private */
  _getScanMode(){
    /* scanWind */
    return {
      'scanMode':undefined,
      'Title':undefined,
      'imageName':undefined,};
  }
  
  /* private */
  _getwindDirection(){
      /* windDirection */
      return {
        'direction':undefined,
        'Title':undefined,
        'imageName':undefined,};
  }

}
module.exports.AirStateAuto = AirStateAuto;
