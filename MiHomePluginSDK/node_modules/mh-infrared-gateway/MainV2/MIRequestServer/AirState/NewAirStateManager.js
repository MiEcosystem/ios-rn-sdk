'use strict'
var React = require('react-native');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var {Temperature, airMode , windSpeed, windDirection, scanWind, sleepMode} = require('../../../MainV2/MIRequestServer/AirStateModel');
var AirStateAuto = require('../../../MainV2/MIRequestServer/AirState/AirStateAuto').AirStateAuto;
var AirStateCool = require('../../../MainV2/MIRequestServer/AirState/AirStateCool').AirStateCool;
var AirStateHot = require('../../../MainV2/MIRequestServer/AirState/AirStateHot').AirStateHot;
var AirStateWet = require('../../../MainV2/MIRequestServer/AirState/AirStateWet').AirStateWet;
var AirStateWind = require('../../../MainV2/MIRequestServer/AirState/AirStateWind').AirStateWind;
var {
  Component,
} = React;


var currentAirStateAuto;
var currentAirStateCool;
var currentAirStateHot;
var currentAirStateWet;
var currentAirStateWind;
/**/
var currentModelIndex =0;
var currentModelState={};

class NewAirStateManager extends React.Component{

  constructor(props, context) {
    super(props, context);
    currentAirStateCool = new AirStateCool();
    currentAirStateHot = new AirStateHot();
    currentAirStateAuto = new AirStateAuto();
    currentAirStateWind = new AirStateWind();
    currentAirStateWet = new AirStateWet();

    var allModeArray = [currentAirStateCool,
                        currentAirStateHot,
                        currentAirStateAuto,
                        currentAirStateWind,
                        currentAirStateWet,];
    this.state={
      isPowerOn:false,
      allModeArray:allModeArray,
    };

    this.isPowerOn= false;

  }


  instatceWithModel(modelArray){

    // console.log('NewAirStateManager---instatceWithModel------'+JSON.stringify(modelArray));
    this.modelArray = modelArray;

    for(var i=0;i<modelArray.length ;i++){
        if(i<=(this.state.allModeArray.length-1)){
         var model =  modelArray[i];
         var AirMode  = this.state.allModeArray[i];
         AirMode.instanceWithModel(model);
        }
    }

    if(modelArray.length>0){
      currentModelState = this.state.allModeArray[0];
    }
    
  }


  /* 空调打开后的状态 */
  getCurrentAllState(){
    var  currentStatuValue = currentModelState.getCurrentState();  
    // console.log('---getCurrentState-----getCurrentState----------------'+JSON.stringify(currentStatuValue));    

    return currentStatuValue;
  }

  getPowerCurrentState(){
    var currentPowerState = this.state.isPowerOn;
    // console.log('---currentPowerState--getPowerCurrentState---------------'+JSON.stringify(currentPowerState));    
    return {'powerStatus':currentPowerState};

  }

 
  /* 开关按钮*/  
  PressPowerButton(){

    var currentTempeture = this._getTurnONTempeature();
    var trunOffTempeture = this._getTurnOffTempeature();
  
    if(this.state.isPowerOn==true){
      this.state.isPowerOn=false;
      return trunOffTempeture;
    }else{
      this.state.isPowerOn=true;
      return currentTempeture;
    }
  }


  /* 模式按钮*/ 
  PressModeButton(){

    if(this.state.isPowerOn==false){ return;}

    var New_currentModelIndex = currentModelIndex+1;
    switch(New_currentModelIndex){
          case 0:
          {  currentModelIndex = 0; currentModelState = currentAirStateCool; 
          }
          break;

          case 1:
          {  currentModelIndex = 1; currentModelState = currentAirStateHot;
          }
          break;

          case 2:
          {   
            currentModelIndex = 2;currentModelState = currentAirStateAuto;
          }
          break;

          case 3:
          { currentModelIndex = 3;  currentModelState = currentAirStateWind;
          }
          break;

          case 4:
          { currentModelIndex = 4; currentModelState = currentAirStateWet;
          }
          break;

          default:
          { currentModelIndex =0;
            currentModelState = currentAirStateCool;
          }
          break;
        }
    return   currentModelState.getCurrentUIState();

  }

  /* 后加的 *********************************  */
  PressCoolButton(){
    if(this.state.isPowerOn==false){  return;}
    currentModelIndex = 0; currentModelState = currentAirStateCool; 
    return   currentModelState.getCurrentUIState();
  }

  PressHotButton(){
    if(this.state.isPowerOn==false){  return;}
    currentModelIndex = 1; currentModelState = currentAirStateHot; 
    return   currentModelState.getCurrentUIState();
  }
  
  PressAutoButton(){
    if(this.state.isPowerOn==false){  return;}
    currentModelIndex = 2; currentModelState = currentAirStateAuto; 
    return   currentModelState.getCurrentUIState();
  }
  
  PressWindButton(){
    if(this.state.isPowerOn==false){  return;}
    currentModelIndex = 3; currentModelState = currentAirStateWind; 
    return   currentModelState.getCurrentUIState();
  }
  
  PressWetButton(){
    if(this.state.isPowerOn==false){  return;}
    currentModelIndex = 4; currentModelState = currentAirStateWet; 
    return   currentModelState.getCurrentUIState();
  }
  

  /* 初始化几个模式按钮是否可点击 ********************* */
  isEnableCoolButton(){
    var result = this.enableWithIndex(0);
    return result;
  }

  isEnableHotButton(){
    var result = this.enableWithIndex(1);
    return result;
  }

  isEnableAutoButton(){
    var result = this.enableWithIndex(2);
    return result;
  }
  
  isEnableWindButton(){
    var result = this.enableWithIndex(3);
    return result;
    
  }

  isEnableWetButton(){
    var result = this.enableWithIndex(4);
    return result;
  }

  enableWithIndex(modeIndex){

      let newModeIndex = modeIndex;
      var enable = false;
      if(this.modelArray==undefined){
        return enable;
      }

      if(this.modelArray!=undefined){
        if(this.modelArray.length<=0){
          return enable;
        }          
      }
      this.modelArray.forEach(element => {
        if(element.model ==newModeIndex){
          enable = true;
          return enable;
        }
      });
  }

  

  /* 温度 加 按钮*/  
  PressTempeatureAddButton(){
    if(this.state.isPowerOn==false){
      return;
    }
    currentModelState.pressTemperatureAdd();
    return   currentModelState.getCurrentUIState();
  }

  /* 温度 减 按钮*/  
  PressTempeatureeReduceButton(){
    if(this.state.isPowerOn==false){
      return;
    }
    currentModelState.pressTemperatureReduce()
    return   currentModelState.getCurrentUIState();
  }

  /* 风速度按钮*/  
  PressSpeedButton(){
    if(this.state.isPowerOn==false){
      return;
    }
    currentModelState.pressWindSpeed()
    return   currentModelState.getCurrentUIState();
  }

  _getTurnOffTempeature(){

    let firstPath =  MHPluginSDK.basePath + 'AirControllerImage/' + Temperature[10];
    let lastPath =  MHPluginSDK.basePath + 'AirControllerImage/' + Temperature[10];
    var currentTempeture ={
      airMode:airMode.none,
      windSpeed:windSpeed.none,
      windDirection:windDirection.none,
      scanWind:scanWind.none,
      sleepMode:sleepMode.none,
      powerState:false,
      temperatureNumberOne:firstPath,
      temperatureNumberTwo:lastPath
    };
    return currentTempeture;
  }

  _getTurnONTempeature(){
    var currentAirState =  currentModelState.getCurrentUIState();
    return currentAirState;
  }


  /* ------------------------------------------------------------------------------------------------*/

  /* 没实现 风向按钮*/  
  PressWindSpeedDirectionButton(){
  }

  /*没实现 睡眠按钮*/  
  PressSleepButton(){
  }
  
  /*没实现 定时按钮*/  
  PressTempeatureReduceButton(){
  }
  
  /*没实现 其它功能按钮*/  
  PressExtensionButton(){
  }

  /* 扫风按钮*/  
  PressScanWindButton(){
  }

}
module.exports.NewAirStateManager = NewAirStateManager;