'use strict';

var React = require('react-native');
var ActionSheetIOS = require('ActionSheetIOS');
var MHTableView = require('../../CommonModules/MHTableView');
var ImageButton = require('../../CommonModules/ImageButton');
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var MatchTool = require('../../MainV2/ConstDefine/matchTool').MatchTool;
var GateWayTool = require('../../MainV2/MIRequestServer/GateWayTool').GateWayTool;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;
var DeviceFactory = require('../../MainV2/ConstDefine/DeviceFactory').DeviceFactory;
var BrandList = require('../../MainV2/BrandList/BrandList');
var NewTopBoxLogic = require('../../MainV2/TopBoxLogic/NewTopBoxLogic')
var Customer_studyRemoter = require('../../MainV2/AllStudyRemoter/Customer_studyRemoter');
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var {
  AppRegistry,
  StyleSheet,
  Text,
  ListView,
  View,
  Image,
  Platform,
  AlertIOS,
  TouchableHighlight,
  Component,
  Dimensions,
  PixelRatio,
} = React;






class OutGateWayEntrance extends Component {
  constructor(props) {
    super(props);


    this.state = {
      did: MHPluginSDK.deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      dataSource: [],
      selectGateWayID: '',                 //选中的网关ID
      devices: [],                         //网关数组
      showBackView: true,
      gateWay_tool: new GateWayTool(),
      device_Factory: new DeviceFactory(),
    };
  }




  componentWillMount() {

    var self = this;
    this.state.gateWay_tool.getDevices(
      function (devices) {
        /* 多个设备*/
        self.setState({ showBackView: false, devices: devices });
      },
      function (device) {
        /* 一个设备*/
        self.setState({ showBackView: false, devices: [device] });

      }, function (noDevice) {

        if (noDevice == true) {
        }
      });
  }


  triggerRefreshUI() {
    var dataSource = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });
    this.state.dataSource = dataSource.cloneWithRows(this.state.devices);
  }


  render() {

    this.triggerRefreshUI();
    return (
      (this.state.showBackView == true) ? (
        /* 没有添加网关的状态 */
        <View style={styles.NoneGateWayContainer}  >
          <MessageToast ref='toast' />
          <View style={styles.containerView}>
            <Text style={styles.titleMessage}>{LocalizedStrings.ir_take_look_desc}</Text>
            <TouchableHighlight activeOpacity={0.1} onPress={() => { this.backPreviousPage('') }}>
              <Text style={styles.jumpBack}>{LocalizedStrings.ir_take_look}</Text>
            </TouchableHighlight>
          </View>
        </View>
      ) : (
          <View style={styles.container}  >
            <ListView style={styles.remoterList}
              enableEmptySections={true}
              dataSource={this.state.dataSource}
              renderRow={this._renderRow.bind(this)}
              automaticallyAdjustContentInsets={false} />
          </View>
        )

    );
  }


  /* 列表一行，用来展示一个遥控器*/
  _renderRow(rowData, sectionID, rowID) {
    /*
          {"did":"57368680",
          "model":"chuangmi.remote.v2",
          "name":"小米万能遥控器增强版",
          "mac":"34:CE:00:89:6C:B8",
          "token":"d5cfbaf3572d2629857725e7fe4afca7",
          "sectionID":"s1","rowID":"0"}
    */
    // console.log('----rowData.category:'+JSON.stringify(rowData));
    rowData.sectionID = sectionID;
    rowData.rowID = rowID;
    var isOnline;
    if (rowData.isOnline != undefined) {
      isOnline = rowData.isOnline;
    }


    return (
      <TouchableHighlight underlayColor='#838383' onPress={() => this._pressRow(rowData)} >
        <View>
          <View style={styles.remoterListRowCell}>
            {
              /* 是否离线显示 */
              (isOnline == false) ? (
                <Text style={styles.disableRemoterName}>{rowData.name}{'(设备离线)'}</Text>
              ) : (
                  <Text style={styles.remoterName}>{rowData.name}</Text>
                )
            }
          </View>
          <View style={styles.separator}></View>
        </View>
      </TouchableHighlight>
    );




  }

  /* 点击一行 */
  _pressRow(rowData) {
    /* 
      obj = {
      "did":"57372749",
      "model":"chuangmi.remote.v2",
      "name":"小米万能遥控器增强版2",
      "mac":"34:CE:00:89:7C:9D",
      "token":"b7775f82a8106b56528a9c0848c43d48",
      "sectionID":"s1",
      "rowID":"1"
    };
    */

    /* 跳转到遥控器主页面*/
    var self = this;
    let deviceModel = this.state.device_Factory.GetDeviceModel_WithModel(MHPluginSDK.deviceModel);
    let deviceType = deviceModel.id;
    let gateWay_ID = rowData.did;

    console.log('deviceModel--------------' + JSON.stringify(deviceModel));
    console.log('device-------------------' + JSON.stringify(rowData));
    console.log('this.state.deviceMode----' + JSON.stringify(this.state.deviceModel));



    if ((rowData.isOnline != undefined) && (rowData.isOnline == false)) {
      console.log('----------rowData.isOnline==false-----------------');
      return;
    }


    if (deviceType == 0) {  /* 自定义遥控器*/
      console.log('OutGateWayEntrance----gateWay_ID----------' + JSON.stringify(gateWay_ID));
      console.log('OutGateWayEntrance----deviceType----' + JSON.stringify(deviceType));


      console
      self.props.navigator.push({
        ...Customer_studyRemoter.route,
        passProps: {
          selectGateWay_ID: gateWay_ID,
          deviceType: deviceType,
        }
      });
      return;

    }
    else if (deviceType == 1) {  /* IPTV 列表 */
      this.props.navigator.push({
        ...NewTopBoxLogic.route,
        passProps: {
          select_GateWayId: gateWay_ID,
        }
      });
      return;
    }



    /* 非IPTV 的普通品牌选择列表 */
    this.props.navigator.push({
      ...BrandList.route,
      passProps: {
        deviceType: deviceType,
        gateWay_ID: gateWay_ID,
      }
    });


  }




};

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);
const KEY_OF_MAINPAGE = 'OutGateWayEntrance';

var styles = StyleSheet.create({
  NoneGateWayContainer: {
    flex: 1,
    backgroundColor: '#ffffff',
    marginBottom: 0,
    marginTop: 0,
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    marginBottom: 0,
    marginTop: 0,
  },
  containerView: {
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
  },
  titleMessage: {
    textAlign: 'center',
    fontSize: 14,
    color: '#808080',
  },
  jumpBack: {
    textAlign: 'center',
    fontSize: 14,
    color: 'rgb(52,117,232)',
  },
  titleMessage: {
    fontSize: 15,
  },
  remoterList: {
    marginTop: NavigatorBarHeight,
    alignSelf: 'stretch',
  },
  remoterListRowCell: {
    flexDirection: 'row',
    padding: 22,
    height: 64,
  },
  disableRemoterName: {
    fontSize: 15,
    opacity: 1,
    alignSelf: 'center',
    color: 'rgba(0,0,0,0.5)',
    marginLeft: 0,
  },
  remoterName: {
    fontSize: 15,
    opacity: 1,
    alignSelf: 'center',
    color: '#000000',
    marginLeft: 0,
  },
  separator: {
    height: 0.5,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    marginLeft: 20,
    marginRight: 0
  },
});


var route = {
  key: KEY_OF_MAINPAGE,
  title: '网关列表',
  component: OutGateWayEntrance,
  navLeftButtonStyle: {
    tintColor: 'rgb(236,236,236)',
  },
  navTitleStyle: {
    color: '#808080',
  },
  navBarStyle: {
    backgroundColor: 'transparent',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function (route, navigator, index, navState) {
    return (
      <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
        <ImageButton
          source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
          onPress={() => {
            if (index === 0) {
              MHPluginSDK.closeCurrentPage();
            } else {
              navigator.pop();
            }
          }}
          style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
        />
      </View>
    );
  },
  renderNavRightComponent: function (route, navigator, index, navState) {
    return null;
  },
}


module.exports = {
  component: OutGateWayEntrance,
  route: route
};
