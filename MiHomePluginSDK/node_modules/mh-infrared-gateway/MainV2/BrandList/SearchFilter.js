'use strict';

var React = require('react-native');
var MHTableView = require('../../CommonModules/MHTableView');
var ImageButton = require('../../CommonModules/ImageButton');
var MatchTool = require('../../MainV2/ConstDefine/matchTool').MatchTool;
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;


var {
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Image,
    Platform,
    ActivityIndicator,
    AlertIOS,
    Dimensions,
    TextInput,
    TouchableHighlight,
    Component,
    PixelRatio,
} = React;


import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var subscription;
var brandIdMap = {};

class SearchFilter extends Component {
    constructor(props) {
        super(props);

        var newDataSource = {
            "index": {
                "foregroundColor": "#666666",
            },
            "sections": []
        };
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            dataSource: newDataSource,
            dataArray: this.props.dataArray,
        };
    }


    componentWillMount() {
    }

    componentDidMount() {
        /* 获取数据源*/
        // this.deail_data(this.state.dataArray);
    }

    render() {
        return (
            <View style={styles.container}>
                <View style={styles.searchView}>
                    <View style={styles.searchContentView}>
                        <View style={styles.searchImageView}>
                            <Image style={styles.searchImage}
                                source={{ isStatic: !MHPluginSDK.devMode, uri: MHPluginSDK.basePath + 'ControllerImage/search.png' }}
                            />
                        </View>
                        <View style={styles.searchInputView}>
                            <TextInput style={styles.searchInput}
                                returnKeyType="search"
                                placeholder={LocalizedStrings.search_device}
                                autoFocus={true}
                                onFocus={() => this.searchOnFocus()}
                                onChangeText={(value) => this.onChangeText(value)}
                                onEndEditing={(value) => this.onEndEditing(value)}
                                onSubmitEditing={(value) => this.onSubmitEditing(value)}
                            />
                        </View>
                    </View>
                </View>
                <MHTableView style={styles.table} tableName="SearchFilter" ref={component => this._tableView = component} onSelectRow={this._onSelectRow.bind(this)} />
            </View>
        )
    }

    onChangeText(event) {
        console.log('onChangeText---------------' + event);
        if (event.length > 0) {
            this.filterWithString(event);
        }
    }

    onEndEditing(event) {
        // console.log('onEndEditing---------------'+JSON.stringify(event));

    }
    onSubmitEditing(event) {
        // console.log('onSubmitEditing---------------'+JSON.stringify(event));

    }


    /* 匹配拼音 */
    filterWithString(str) {

        var dataArray = this.state.dataArray;
        var resultArray = [];
        for (var nameIndex = 0; nameIndex < dataArray.length; nameIndex++) {
            var model = dataArray[nameIndex];
            var pinyin, en_name;

            var en_name = model['en_name'];
            if (model.name != undefined) { pinyin = model['name'] }
            if (model.en_name != undefined) { en_name = model['en_name'] }


            if ((pinyin != undefined) && (pinyin.indexOf(str) != -1)) {
                resultArray.push(model);
            }

            if ((en_name != undefined) && (en_name.indexOf(str) != -1)) {
                /*包含英文名称*/
                if (resultArray.indexOf(model) == -1) {
                    resultArray.push(model);
                }
            }

        }
        if (resultArray.length > 0) {
            this.deail_data(resultArray);
        }
    }

    /* 处理数据显示Cell*/
    deail_data(dataArray) {

        if (dataArray.length <= 0) {
            return;
        }
        /* {"id":4,"en_name":"Gaoke","name":"高科","pinyin":"gao ke"} */
        var allData = [];
        var cellDict = [];
        for (var nameIndex = 0; nameIndex < dataArray.length; nameIndex++) {
            cellDict.push({
                "id": dataArray[nameIndex]['id'],
                'model': dataArray[nameIndex],
                "height": 52,
                "backgroundColor": "#f8f8f8",
                "extra": {
                    "separatorColor": "#cccccc",
                    "separatorPadding": 22,
                },
                "title": {
                    "text": dataArray[nameIndex]['name'],
                    "x": 22,
                    'y': 18,
                    "fontSize": 15,
                    "foregroundColor": "#4d4d4d",
                },
                "jsTitle": dataArray[nameIndex]['jsTitle'],
            });
        }

        allData.push(
            {
                "cells": cellDict,
            },
        );

        var newDataSource = {
            "index": {
                "foregroundColor": "#666666",
            },
            "sections": allData
        };
        this._tableView.reloadData(newDataSource);

    }


    searchOnFocus() {
    }

    _onSelectRow(event) {
        /* 跳转到对码页面*/
        var dataSource = this._tableView.getDataSource();
        var obj = dataSource["sections"][event.nativeEvent.selectedSection]["cells"][event.nativeEvent.selectedRow];
        var model = obj.model;
        // console.log('SearchFilter--_onSelectRow-model------------------'+JSON.stringify(model));

        if (this.props.selectedRow != undefined) {
            // console.log('_onSelectRow--model-----------------'+JSON.stringify(model));
            this.props.selectedRow(model);
        }
    }
};

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);
const searchViewHeight = 50;

var styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f8f8f8',
        marginBottom: 0,
        marginTop: 0,
    },
    searchInputView: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchInput: {
        flex: 1,
        width: screenWidth - 40 - 8,
        height: searchViewHeight - 10,
        // backgroundColor:'#0000ff',
    },
    searchView: {
        marginTop: NavigatorBarHeight,
        width: screenWidth,
        height: searchViewHeight,
        backgroundColor: 'rgb(238,238,238)',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchContentView: {
        padding: 5,
        flexDirection: 'row',
        width: screenWidth - 15,
        height: searchViewHeight - 15,
        backgroundColor: '#ffffff',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        borderRadius: 5,
    },
    searchImageView: {
        width: 40,
        height: searchViewHeight - 8,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchImage: {
        width: 18,
        height: 18,
    },
    table: {
        marginTop: 0,
        flex: 1,
        backgroundColor: '#f8f8f8',
    },
});


const KEY_OF_MAINPAGE = 'SearchFilter';
var route = {
    key: KEY_OF_MAINPAGE,
    title: '搜索列表',
    component: SearchFilter,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#808080',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function(route, navigator, index, navState) {
        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );
    },
    renderNavRightComponent: function(route, navigator, index, navState) {
        return null;
    },
}


module.exports = {
    component: SearchFilter,
    route: route
};
