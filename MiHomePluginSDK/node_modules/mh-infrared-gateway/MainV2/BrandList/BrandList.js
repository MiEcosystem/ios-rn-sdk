'use strict';

var React = require('react-native');
var MHTableView = require('../../CommonModules/MHTableView');
var ImageButton = require('../../CommonModules/ImageButton');
var MIRequestServer = require('../../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var MatchTool = require('../../MainV2/ConstDefine/matchTool').MatchTool;
var NewMatchRemoter = require('../../MainV2/MatchRemoter/NewMatchRemoter');
var GateWayTool = require('../../MainV2/MIRequestServer/GateWayTool').GateWayTool;
var DeviceFactory = require('../../MainV2/ConstDefine/DeviceFactory').DeviceFactory;
var MessageToast = require('../../MainV2/ToolModel/MessageToast');
var SearchFilter = require('../../MainV2/BrandList/SearchFilter');
var New_studyRemoter = require('../../MainV2/AllStudyRemoter/New_studyRemoter');
var LocalizedStrings = require('../../Main/MHLocalizableString.js').string;

var {
    AppRegistry,
    StyleSheet,
    Text,
    ListView,
    View,
    Image,
    Platform,
    ActivityIndicator,
    AlertIOS,
    Dimensions,
    TextInput,
    TouchableHighlight,
    Component,
    PixelRatio,
} = React;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var LetterArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
var sourceData = [];



class BrandList extends Component {
    constructor(props) {
        super(props);

        var newDataSource = {
            "index": {
                "foregroundColor": "#ffffff",
            },
            "sections": []
        };
        this.state = {
            did: MHPluginSDK.deviceId,
            model: MHPluginSDK.deviceModel,
            apiLevel: MHPluginSDK.apiLevel,
            basePath: MHPluginSDK.basePath,
            requestStatus: false,
            deviceType: this.props.deviceType,
            devMode: MHPluginSDK.devMode,
            dataSource: newDataSource,
            animating: true,
            showBackView: true,
            devices: [],
            gateWay_ID: this.props.gateWay_ID, /* 网关id*/
            gateWay_tool: new GateWayTool(),
            device_Factory: new DeviceFactory(),
        };
        // console.log('BrandList.this.state:'+ JSON.stringify(this.state));
    }

    handleBrands(brandArray) {

        /*
        { "id": 2,
        "name": "创维", 
        "en_name": "Skyworth",
        pinyin":"hai xin"}   
        */
        // console.log('brandList:brandArray:'+ JSON.stringify(brandArray));

        if (brandArray.length == 0) {
            return;
        }
        var allData = [];
        var sectionDict = {}; //包含{"_name":[], cells":{}}

        for (var i = 0; i < brandArray.length; i++) {

            var name = brandArray[i]['name'];//获取拼接 品牌名称
            var pinyin = brandArray[i]['pinyin'];//获取拼接 品牌名称
            var id = brandArray[i]['id'];
            var indexName = MatchTool.getIndexName(pinyin);//索引

            var indexChar = '';
            if (indexName.length > 0) {
                indexChar = indexName.charAt(0);
            }// 太长截取

            if (!sectionDict[indexChar]) {
                sectionDict[indexChar] = [];
            }// 不存在 则添加

            var nameArray = sectionDict[indexChar];//空数组
            var tmpDict = {
                'jsTitle': pinyin,
                'id': id,
                'fullName': name,
            };//字典
            nameArray.push(tmpDict); // 所有品牌数组 

        }

        sectionDict = this.deailNotConatin_Key(sectionDict);
        var keys = this.dealKey_Sort(sectionDict);//获取所有ABCDEFG 的key

        for (var i = 0; i < keys.length; i++) {
            var indexChar = keys[i];
            var nameArray = sectionDict[indexChar];
            nameArray.sort(function (a, b) { return a['name'] == b['name'] });// nuKnow
            var cellDict = [];

            for (var nameIndex = 0; nameIndex < nameArray.length; nameIndex++) {
                /* 自定义属性 customer */
                var customer = (nameArray[nameIndex]['customer'] != undefined) ? (nameArray[nameIndex]['customer']) : (false);

                cellDict.push({
                    "id": nameArray[nameIndex]['id'],
                    "height": 52,
                    "backgroundColor": "#ffffff",
                    "extra": {
                        "separatorColor": "#cccccc",
                        "separatorPadding": 22,
                    },

                    "title": {
                        "text": nameArray[nameIndex]['fullName'],
                        "x": 22,
                        'y': 18,
                        'customer': customer,
                        "fontSize": 15,
                        "foregroundColor": "#4d4d4d",
                    },
                    "jsTitle": nameArray[nameIndex]['jsTitle'],
                });
            }
            // console.log('----------keys[' +i+']--------'+keys[i]);
            // console.log('---------------cellDict----------'+JSON.stringify(cellDict)); 
            allData.push(
                {
                    "header": {
                        "text": keys[i],//sectionArray[sectionIndex],
                        "height": 52,
                        "backgroundColor": "#f8f8f8",
                        "foregroundColor": "#53b99d",
                        'fontIsBold': true,
                        "x": 22,
                        "fontSize": 15,
                        "extra": {
                            "ignoreIndex": false,//sectionIndex == 0,
                            "separatorColor": "#cccccc",
                            "separatorPadding": 22,
                        }
                    },

                    "cells": cellDict,
                },
            );

        }

        var newDataSource = {
            "index": {
                "foregroundColor": "#666666",
            },
            "sections": allData
        };
        this._tableView.reloadData(newDataSource);

    }

    /* 处理不包含 A～ Z字母的 东西*/
    deailNotConatin_Key(sectionDict) {
        var newSectionDict = {};
        var otherArray = [];
        var keys = Object.keys(sectionDict);
        keys.forEach(element => {
            if (!(LetterArray.indexOf(element) == -1)) { /* 在26个字母内*/
                // console.log('--------------contain----------'+JSON.stringify(element));
                newSectionDict[element] = sectionDict[element];
            } else {/* 不在26个字母内*/

                // console.log('------------not---contain--sectionDict[element]--------'+JSON.stringify(sectionDict[element]));
                otherArray = otherArray.concat(sectionDict[element]);
                // console.log('----------result--otherArray--------'+JSON.stringify(otherArray));

            }
        });
        // console.log('------------otherArray----------'+JSON.stringify(otherArray));
        otherArray.push(this.add_CustomerCell());

        if (otherArray.length > 0) {
            newSectionDict['#'] = otherArray;
        }
        // console.log('------------newSectionDict----------'+JSON.stringify(newSectionDict));
        return newSectionDict;
    }

    /* 把 #排到最后一个*/
    dealKey_Sort(sectionDict) {
        // console.log('---------------移除，放到最后------1--------');
        var keys = Object.keys(sectionDict);//获取所有ABCDEFG 的key
        keys.sort();//排序
        if (keys.indexOf('#') == 0) {
            var indexChar = keys[0];
            keys.splice(0, 1);
            // console.log('---------------移除，放到最后-----2-1--------'+JSON.stringify(keys));
            keys.push(indexChar);
            // console.log('---------------移除，放到最后-----2-2--------'+JSON.stringify(keys));
        }
        // console.log('---------------移除，放到最后--------3------');
        return keys;
    }

    /* 添加自定义配置按钮 */
    add_CustomerCell() {
        var cellModel = {
            "jsTitle": "自定义",
            "id": undefined,
            "customer": true,
            "fullName": "自定义"
        };
        return cellModel;
    }

    universalRemoteControl() {
        /*  1.如果匹配列表是万能遥控器的情况 */
        var deviceType = undefined;
        deviceType = this.state.deviceType;
        return deviceType;
    }

    /* error error  记得修改 */
    otherDeviceBrandContrtol() {
        /*  2.如果遥控器是其它设备的 主页面的情况*/

        var model = MHPluginSDK.deviceModel;
        var deviceModel = this.state.device_Factory.GetDeviceModel_WithModel(model);
        var deviceType = deviceModel.id;
        console.log('BrandList---otherDeviceBrandContrtol:------' + deviceType);
        return deviceType;
    }

    getBrandDataSource() {

        var self = this;
        var deviceType = self.universalRemoteControl();

        if (deviceType == undefined) {
            console.log('Brandlist------otherDeviceBrandContrtol ');
            deviceType = self.otherDeviceBrandContrtol();
        }

        if (deviceType == undefined) {
            alert('deviceType undefined');
            return;
        }

        this.setState({ deviceType: deviceType });
        console.log('BrandList deviceType' + deviceType);

        var param = { "category": deviceType };
        MIRequestServer.Post_GetBrandListWithType(param,
            function (response) {

                if (response.result.brands != undefined) {
                    var dataArray = response.result.brands;
                    sourceData = dataArray;
                    self.handleBrands(dataArray);
                }

            }, function (error) {
                alert('error' + JSON.stringify(error));
            });

    }

    componentWillMount() {
        /* 获取数据源*/
        this.getBrandDataSource();
    }

    render() {
        return (

            /* 列表 */
            <View style={styles.container}>
                <MessageToast ref='toast' />
                <View style={styles.searchView}>
                    <View style={styles.searchContentView}>
                        <View style={styles.searchImageView}>
                            <Image style={styles.searchImage}
                                source={{ isStatic: !MHPluginSDK.devMode, uri: MHPluginSDK.basePath + 'ControllerImage/search.png' }}
                            />
                        </View>
                        <View style={styles.searchInputView}>
                            <TextInput style={styles.searchInput}
                                returnKeyType="search"
                                placeholder={LocalizedStrings.search_device}
                                onFocus={() => this.searchOnFocus()}
                                onChangeText={(value) => this.onChangeText(value)} />
                        </View>
                    </View>
                </View>
                <MHTableView style={styles.table} tableName="brandList" ref={component => this._tableView = component} onSelectRow={this._onSelectRow.bind(this)} />
            </View>

        )
    }

    /*返回首页*/
    backPreviousPage() {
        MHPluginSDK.closeCurrentPage();
    }

    onChangeText(event) {
        console.log(event);
    }

    searchOnFocus() {

        var self = this;
        this.props.navigator.push({
            ...SearchFilter.route,
            passProps: {
                dataArray: sourceData,
                selectedRow: function (event) {
                    self.pushTo_MatchRemoter(event);
                }
            }
        });

    }

    /* 点击 cell 事件*/
    _onSelectRow(event) {
        /* 跳转到对码页面*/
        var self = this;
        var dataSource = this._tableView.getDataSource();
        var obj = dataSource["sections"][event.nativeEvent.selectedSection]["cells"][event.nativeEvent.selectedRow];

        console.log('_onSelectRow--brandList-----------------' + JSON.stringify(obj));
        console.log('brandList-select.devices:' + JSON.stringify(this.state.devices));
        /* 0. 如果是自定义的cell 则跳转到自定义学习页面 */
        if (obj.title.customer == true) {
            this.pushTo_CustomerRemoter();
            return;
        }

        /* 1.如果有多个网关跳转到 选择网关页面 */
        this.pushTo_MatchRemoter(obj);

    }

    /* 1.1 跳转到自定义学习页面---适配多个网关*/
    pushTo_CustomerRemoter() {

        var self = this;
        let defaultGateWay_ID = this.state.gateWay_ID;
        console.log('defaultGateWay_ID-----------------------' + defaultGateWay_ID);
        /*2.如果没有多个网关，直接跳转到 自定义 赋值当前网关的id 页面*/
        this.pushCustomerRemoter(defaultGateWay_ID);
    }

    /* 1.2 */
    pushCustomerRemoter(selectGateWay_ID) {
        var self = this;
        var deviceType = this.state.deviceType;     /* used */
        var DeviceModel = this.state.device_Factory.GetDeviceModel_WithType(deviceType);


        if (deviceType == 5) {
            this.refs.toast.showMessage('该品类 - 未开通学习功能');
            return;
        }

        console.log('--------------selectGateWay_ID:' + selectGateWay_ID);
        self.props.navigator.push({
            ...New_studyRemoter.route,
            passProps: {
                selectGateWay_ID: selectGateWay_ID,
                deviceType: deviceType,
            }
        });

    }

    /* 2.1 push到匹配页面-----适配多个网关 */
    pushTo_MatchRemoter(model) {
        var self = this;
        let brand_id = model.id;
        let defaultGateWay_ID = this.state.gateWay_ID;

        console.log('brand_id--------------------------------' + brand_id);
        console.log('defaultGateWay_ID-----------------------' + defaultGateWay_ID);
        this.pushMatchRemoter(brand_id, defaultGateWay_ID);

    }

    /* 2.2 push到匹配页面 */
    pushMatchRemoter(brand_id, selectDeviceId) {

        console.log('BrandList.pushMatchRemoter----' + brand_id + '|' + selectDeviceId);
        this.props.navigator.push({
            title: '匹配',
            ...NewMatchRemoter.route,
            passProps: {
                deviceType: this.state.deviceType,
                brand_id: brand_id,
                selectDeviceId: selectDeviceId,
            }
        });

    }



};

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight == 812) ? (88) : (APPBAR_HEIGHT + 20);
const KEY_OF_MAINPAGE = 'BrandList';
const searchViewHeight = 50;


var styles = StyleSheet.create({
    centering: {
        alignItems: 'center',
        justifyContent: 'center',
        padding: 8,
    },
    NoneGateWayContainer: {
        flex: 1,
        backgroundColor: '#ffffff',
        marginBottom: 0,
        marginTop: 0,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    container: {
        flex: 1,
        backgroundColor: '#f8f8f8',
        marginBottom: 0,
        marginTop: 0,
    },
    searchInputView: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchInput: {
        flex: 1,
        width: screenWidth - 40 - 8,
        height: searchViewHeight - 10,
        // backgroundColor:'#0000ff',
    },
    searchView: {
        marginTop: NavigatorBarHeight,
        width: screenWidth,
        height: searchViewHeight,
        backgroundColor: 'rgb(238,238,238)',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchContentView: {
        padding: 5,
        flexDirection: 'row',
        width: screenWidth - 15,
        height: searchViewHeight - 15,
        backgroundColor: '#ffffff',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        borderRadius: 5,
    },
    searchImageView: {
        width: 40,
        height: searchViewHeight - 8,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
    },
    searchImage: {
        width: 18,
        height: 18,
    },
    containerView: {
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
    },
    titleMessage: {
        textAlign: 'center',
        fontSize: 14,
        color: '#808080',
    },
    jumpBack: {
        textAlign: 'center',
        fontSize: 14,
        color: 'rgb(52,117,232)',
    },
    section: {
        height: 20,
        fontSize: 15,
        flexDirection: 'row',
        borderWidth: 1,
        borderColor: '#efeff0',
        borderBottomColor: '#AAA',
        color: '#979799',
        backgroundColor: '#efeff0',
    },
    sectionText: {
        marginTop: 2,
        marginLeft: 20,
        // width:200,
    },
    row: {
        marginLeft: 22,
        marginTop: 20,
        height: 44,
        fontSize: 18,
        color: '#555'

    },
    border: {
        height: 1,
        backgroundColor: '#aaaaaa'
    },
    text: {
        flex: 1,
        fontSize: 20,
        textAlign: 'center',
        color: '#000000',
        alignSelf: 'stretch',
        marginTop: 300,
    },
    table: {
        marginTop: 0,
        flex: 1,
        backgroundColor: '#f8f8f8',
    },
});


var route = {
    key: KEY_OF_MAINPAGE,
    title: LocalizedStrings.brand_list,
    component: BrandList,
    navLeftButtonStyle: {
        tintColor: 'rgb(236,236,236)',
    },
    navTitleStyle: {
        color: '#808080',
    },
    navBarStyle: {
        backgroundColor: '#f8f8f8',
    },
    isNavigationBarHidden: false,
    renderNavLeftComponent: function (route, navigator, index, navState) {

        return (
            <View style={{ left: 0, width: 29 + 15 * 2, height: APPBAR_HEIGHT, justifyContent: 'center', alignItems: 'center' }}>
                <ImageButton
                    source={{ uri: MHPluginSDK.uriNaviBackButtonImage, scale: PixelRatio.get() }}
                    onPress={() => {
                        if (index === 0) {
                            MHPluginSDK.closeCurrentPage();
                        } else {
                            navigator.pop();
                        }
                    }}
                    style={[{ width: 29, height: 29, tintColor: 'rgb(0,0,0)' }]}
                />
            </View>
        );
    },
    renderNavRightComponent: function (route, navigator, index, navState) {
        return null;
    },
}


module.exports = {
    component: BrandList,
    route: route
};
