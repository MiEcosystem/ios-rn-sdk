//
//  小米万能遥控器 - 首页
//  MiHome
//
//  Created by Woody on 15/7/29.
//  Copyright (c) 2015年 小米移动软件. All rights reserved.
//

'use strict';

var React = require('react-native');
var Button = require('../CommonModules/Button');
var IRV2_MSG = require('../MainV2/ConstDefine/IRV2PublicDefine').IRV2_MSG;
var ImageButton = require('../CommonModules/ImageButton');
var CopyRmote  = require('../MainV2/CopyRemoter/CopyRemoter');/* 复制遥控器 */
var AddRemote  = require('../MainV2/AddRemoter/AddRemoter');/* 添加遥控器 */
var Setting = require('../Main/MHSetting');
var MHTableView = require('../CommonModules/MHTableView');
var MHRemoterListManager = require('../MainV2/MHRemoterListManager/MHRemoterListManager').MHRemoterListManager;
import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var MIRequestServer = require('../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var {DEVICE_MODEL} = require('../MainV2/ConstDefine/IRV2PublicDefine');
var MessageToast = require('../MainV2/ToolModel/MessageToast');
var DeviceFactory = require('../MainV2/ConstDefine/DeviceFactory').DeviceFactory;
var JSONModel = require('../packageInfo.json');
var LocalizedStrings = require('../Main/MHLocalizableString.js').string;

import Swipeout from 'react-native-swipeout';

var {
  AppRegistry,
  StyleSheet,
  Text,
  Image,
  View,
  Dimensions,
  Platform,
  TouchableHighlight,
  NavigatorIOS,
  Component,
  ListView,
  AlertIOS,
  StatusBar,
  PixelRatio,
} = React;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const APP_MarginBottom =(screenHeight==812)?(34):(0);


var isDataListLoad = false;
var isEmptyList = true;
var subscription;

let APPBAR_MARGINTOP = 0;
let APPBAR_MARGINBOTTOM = 0;


if (MHPluginSDK.systemInfo.mobileModel === "iPhone10,3" || MHPluginSDK.systemInfo.mobileModel === "iPhone10,6") {
    APPBAR_MARGINTOP = 24;
    APPBAR_MARGINBOTTOM=34;
}


class DeviceList extends Component {
  constructor(props) {
    super(props);

    this.state = {
        did: MHPluginSDK.deviceId,
        model: MHPluginSDK.deviceModel,
        apiLevel: MHPluginSDK.apiLevel,
        basePath: MHPluginSDK.basePath,
        devMode: MHPluginSDK.devMode,
        spaceB: 26,
        controllers:[],
        device_Factory: new DeviceFactory(),
    };
  }


  componentDidMount() {
    var self = this;
    this.loadDataFormServer();

    this.requestTimer = setTimeout(
      ()=> this.showToast()
      ,500);

    // this.privacy_Clause();
      

  }

  
  privacy_Clause (){

    MHPluginSDK.loadInfoCallback((callback) => {
      //alert(JSON.stringify(callback));
      if (callback == null) {
          // this.setState({isModal: true});
          MHPluginSDK.openPrivacyLicense(LocalizedStrings.agreement_title,MHPluginSDK.basePath+LocalizedStrings.agreement_url,LocalizedStrings.policy_title,MHPluginSDK.basePath+LocalizedStrings.policy_url,(result)=>{
              if(result == "ok") {
                  MHPluginSDK.saveInfo({disclam_checked_flag: true});
              } else {
                  MHPluginSDK.saveInfo({disclam_checked_flag: false});
              }
          });
      } else {
          if (!callback.disclam_checked_flag) {
              // this.setState({isModal: true});
              MHPluginSDK.openPrivacyLicense(LocalizedStrings.agreement_title,MHPluginSDK.basePath+LocalizedStrings.agreement_url,LocalizedStrings.policy_title,MHPluginSDK.basePath+LocalizedStrings.policy_url,(result)=>{
                  if(result == "ok") {
                      MHPluginSDK.saveInfo({disclam_checked_flag: true});
                  } else {
                      MHPluginSDK.saveInfo({disclam_checked_flag: false});
                  }
              });
          }
      }

  });
  }


  /* 显示软件版本 */
  showToast(){
    
    var Message = LocalizedStrings.ir_toast_version + JSONModel.version;
    this.refs.toast.showMessage(Message);
  }


  loadDataFormServer(){

    var self = this;
    var parm = {
      "parent_id": MHPluginSDK.deviceId
    };

    MIRequestServer.Post_getAllRemoter(parm,
      function(response){

          if(response.result.controllers != undefined){
              var controllers = response.result.controllers;
              self.setState({controllers:controllers});
          }
  
      },function(error){
        self.refs.toast.showMessage(LocalizedStrings.ir_toast_get_data_failed);
      });
  }


  componentWillUnmount() {
  }

  triggerRefreshUI() {
    var dataSource = new ListView.DataSource({rowHasChanged: (r1, r2)=>r1!==r2});
    this.state.dataSource = dataSource.cloneWithRows(this.state.controllers);
  }

  /* 渲染*/
  render() {
      //如果存在遥控器
      this.triggerRefreshUI();
      var disable_SharDevice = (MHPluginSDK.userId == MHPluginSDK.ownerId)?(true):(false);
      
      return (
        <View style={styles.mainContainer}>
            <StatusBar />
            <MessageToast ref='toast'/>
            <View style={styles.deviceListView}>
                <ListView style={styles.remoterList} 
                enableEmptySections={true} 
                dataSource={this.state.dataSource} 
                renderRow={this._renderRow.bind(this)} 
                automaticallyAdjustContentInsets={false} />
            </View>
            <View style={[styles.addRemoterAreaContainer, {marginLeft:0, marginRight:0}]}>           
                <View style={styles.bottomButtonView}>
                    <Button onPress={this._pressReproduce.bind(this)} enabled={disable_SharDevice} style={{marginRight:20,}} title={LocalizedStrings.ir_main_copy} imageWidth={40} imageHeight={40} titleSize={11} opacityValue={0.5}  titleMarginTop={8} imageNormal="Main/reproduce_normal.png" imageHighlight="Main/reproduce_press.png"/>
                </View>
                <View style={styles.bottomButtonView}>
                    <Button onPress={this._pressAdd.bind(this)} enabled={disable_SharDevice} style={{marginLeft:0,}} title={LocalizedStrings.ir_main_add} imageWidth={40} imageHeight={40} titleSize={11} opacityValue={0.5} titleMarginTop={8} imageNormal="Main/add_normal.png" imageHighlight="Main/add_press.png"/>
                </View>
            </View>
        </View>
      );
  }
 
  
  /*复制*/
  _pressReproduce() {
    this.props.navigator.push({...CopyRmote.route, passProps: {}});
  }
  
  /*添加*/
  _pressAdd() {   
    this.props.navigator.push({...AddRemote.route, passProps: {}});
  }

  /* 列表一行，用来展示一个遥控器*/ 
  _renderRow(rowData, sectionID, rowID) {
    /*
          {"did":"ir.1013720798626844672",
          "parent_id":"57368680",
          "model":"miir.tv.ir01",
          "name":"电视红外遥控",
          "category":2,
          "pdid":65725}
    */
    rowData.sectionID = sectionID;
    rowData.rowID = rowID;
    var  deviceModel = this.state.device_Factory.GetDeviceModel_WithModel(rowData.model);
    // console.log('----rowData.category:'+JSON.stringify(rowData.category));
   
    var  iconImageUrl = deviceModel.iconImage;
    var swipeoutBtns = [
      {
        text: '删除',
        backgroundColor:"#ff0000",
        onPress:()=>{
          this._longPressRow(rowData);
        }
      }
    ]
    return (

      <Swipeout close={true} autoClose='true' sensitivity={1} right={swipeoutBtns}  backgroundColor='#ffffff' >
          <TouchableHighlight underlayColor='#838383' onPress={() => this._pressRow(rowData)} >
            <View>
              <View style={styles.remoterListRowCell}>
                <Image style={styles.remoterImage} source={{isStatic:!this.state.devMode, uri:this.state.basePath + iconImageUrl, scale:(PixelRatio != undefined) ? PixelRatio.get() : 2.0}} />
                <Text style={styles.remoterName}>{rowData.name}</Text>
              </View>
            <View style={styles.separator}></View>
            </View>
          </TouchableHighlight>
      </Swipeout>
    );
  }

  /* 点击一行 */
  _pressRow(rowData){
    /* 
      obj = {
      "category":2,
      "did":"133xd3.1",
      "name":"客厅电视",
      "model":"mijia.tv.ir01"
      };
    */ 

     /* 跳转到遥控器主页面*/
     var deviceType = rowData.category;
     var deviceModel = this.state.device_Factory.GetDeviceModel_WithModel(rowData.model);
     var remoter_did = rowData.did;
 
     if(deviceModel ==undefined){
       alert('没有匹配到合适的设备');
       console.log('没有匹配到合适的设备');
       return;
     }
     var remoter = deviceModel.remoter;
     remoter.route.title =rowData.name;
     this.props.navigator.push({
         ...remoter.route,
         passProps:{
             deviceType:this.state.deviceType,
             did:remoter_did,
         }
     });
  }

  /*长按删除功能 */
  _longPressRow(rowData) {
      
      if(MHPluginSDK.userId != MHPluginSDK.ownerId){
        return;
      }
      AlertIOS.alert(
        '确定要删除该设备吗?', //title
        '', //message
        [
          {text: '取消', onPress: () => console.log('取消 Pressed!')},
          {text: '确定', onPress: () => this.deleteRemoter(rowData)},
        ]
      )
  }

  /* 删除设备 */
  deleteRemoter(rowData) {
     /* 
      obj = {
      "category":2,
      "did":"133xd3.1",
      "name":"客厅电视",
      "model":"mijia.tv.ir01"
      };
    */ 

    var self = this;
    var param  = {"did": rowData.did};
    MIRequestServer.Post_DeleteRemoter(param,
      function(response){
        
        if(response.code==0){
          self.state.controllers.splice(rowData.rowID,1);  
          var newControllers = self.state.controllers;
          self.setState({controllers:newControllers});
        }

      },function(error){
          self.refs.toast.showMessage(JSON.stringify(error));
      });
  }
};


var styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: '#f8f8f8',
  },
  deviceListView: {
    flex: 1,
    height:screenHeight - NavigatorBarHeight,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 0,
    marginTop: NavigatorBarHeight,
  },
  remoterListRowCell: {
    flexDirection: 'row',
    padding: 22,
    height: 64,
  },
  remoterList: {
    alignSelf: 'stretch',
  },
  remoterImage: {
    alignSelf: 'center',
    width: 46,
    height: 46,
  },
  remoterName: {
    fontSize: 15,
    opacity: 0.7,
    alignSelf: 'center',
    color:'#000000',
    marginLeft: 15,
  },
  subArrow: {
     width: 9,
     height: 18,
  },
  separator: {
    height: 0.5,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    marginLeft: 20+50+15,
    marginRight: 0
  },
  addRemoterAreaContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf:'center',
    width:screenWidth,
    height: 76,
    backgroundColor:'#f8f8f8',
    marginBottom:APPBAR_MARGINBOTTOM
  },
  bottomButtonView:{
    justifyContent: 'center',
    alignSelf: 'center',
    alignItems:'center',
  },
  column: {
    flexDirection: 'column',
    justifyContent: 'center',
    alignSelf: 'center',
  },

});

const KEY_OF_MAINPAGE = 'DeviceList';

// 打开更多菜单
var openMorePage = function (navigator) {
  navigator.push(Setting.route);
};

var backPage = function(navigator){
  navigator.pop();
}

// 每个页面export自己的route
var route = {
  key: KEY_OF_MAINPAGE,
  title: MHPluginSDK.deviceName,
  component: DeviceList,
  navLeftButtonStyle: {
    tintColor:'rgb(236,236,236)',
  },
  navTitleStyle: {
    color:'#808080',
  },
  navBarStyle: {
    backgroundColor:'#f8f8f8',
  },
  isNavigationBarHidden: false,
  renderNavLeftComponent: function(route, navigator, index, navState) {
   
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
                  if (index === 0) {
                    MHPluginSDK.closeCurrentPage();
                  } else {
                    navigator.pop();
                  }
            }}
            style={[{width:29, height:29, tintColor: 'rgb(0,0,0)'}]}
          />
        </View>
      );
  },
  renderNavRightComponent: function(route, navigator, index, navState) {
    if (MHPluginSDK.userId == MHPluginSDK.ownerId) // 非分享设备
    {
      return (
        <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
          <ImageButton
            source={{uri:MHPluginSDK.uriNaviMoreButtonImage, scale:PixelRatio.get()}}
            onPress={() => {
              openMorePage(navigator);

            }}
            style={[{width:29, height:29, tintColor: 'rgb(0,0,0)'}]}
          />
        </View>
      );
    }
    else {
      return null;
    }
  },
}

module.exports = {
  component: DeviceList,
  route: route,
};

