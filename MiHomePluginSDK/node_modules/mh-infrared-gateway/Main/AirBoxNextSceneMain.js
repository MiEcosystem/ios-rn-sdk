'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  ListView,
  Dimensions,
  PickerIOS,
  PickerItemIOS,
  Animated,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var ImageButton = require('../CommonModules/ImageButton');
var TitleButton = require('../CommonModules/TitleButton');
var MIRequestServer = require('../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var AirBoxExtendView = require('../MainV2/ToolModel/AirBoxExtendView');
var MessageToast = require('../MainV2/ToolModel/MessageToast');
var LocalizedStrings = require('../Main/MHLocalizableString.js').string;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const APP_MarginBottom =(screenHeight==812)?(34):(0);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);

class AirBoxNextSceneMain extends React.Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      did: MHPluginSDK.deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      translateY: new Animated.Value(screenHeight),
      requestStatus: false,
      isShow:false,
      selectIndex:0,
      allKeys:[],
      instanceData:[],
    };
  }

  componentWillMount() {

    var allKeys =[
    {"id":0,"name":"power_on","display_name":"温度",'value':undefined,'valueName':undefined,'disabled':false},
    {"id":1,"name":"power_off","display_name":"模式",'value':undefined,'valueName':undefined,'disabled':false},
    {"id":2,"name":"POWER","display_name":"风速",'value':undefined,'valueName':undefined,'disabled':false},];
    this.setState({allKeys:allKeys});


    var self = this;
    var param ={
      "did": this.state.did
    };
    //假数据
    // var param ={
    //   "did": 'ir.1032195958278066176'
    // };

    MIRequestServer.Post_GetAirDeviceConditionerFunction(param,
      function(response){

          if((response.result.modes!=undefined)&&(response.result.modes.length>0)){
            self.setState({instanceData:response.result.modes});
          }
      },function(error){
        self.refs.toast.showMessage(JSON.stringify(error));
      });  
  }

  componentDidMount() {
  }

  triggerRefreshUI() {
    var dataSource = new ListView.DataSource({rowHasChanged: (r1, r2)=>r1!==r2});
    this.state.dataSource = dataSource.cloneWithRows(this.state.allKeys);
  }

  render() {

    this.triggerRefreshUI();
    return (
      <View style={styles.containerAll} >
        <StatusBar />
        <MessageToast ref='toast'/>
        <AirBoxExtendView 
          key="AirBoxExtendView"
          isShow={this.state.isShow} 
          onPressDissmissButton={(event)=>this.onPressDissmissButton(event)}
          changeAllKeys={(allKeys)=>this.changeAllKeys(allKeys)}
          changeSelect={()=>(this.changeSelect())}
          dataSource ={this.state.allKeys} 
          selectIndex={this.state.selectIndex}
          instanceData={this.state.instanceData}
        />
        <View style={styles.topView}>
              <View style={styles.topContentView}>
                  <View style={styles.topLeftView}>
                      <View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                        <ImageButton
                          source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
                          onPress={() => {
                              
                                this.props.navigator.pop(); console.log('pop');                            
                          }}
                          style={[{width:29, height:29, tintColor: '#000000'}]}
                        />
                      </View>
                  </View>
                  <View style={styles.topMiddleView}>
                      <Text>{LocalizedStrings.ir_device_customer}</Text>
                  </View>
                  <View style={styles.topRightView}>
                      <View style={styles.topRightContentView}>
                        <TitleButton   onPress={()=>{this.onPressSaveButton()}}   shock ={true}  title ={LocalizedStrings.ir_matching_success}  titleSize={16} textColor="##00bc9c" />
                      </View>
                  </View>
              </View>
        </View>  
        <View style={styles.containerView}>
          <ListView style={styles.remoterList} 
              enableEmptySections={true} 
              dataSource={this.state.dataSource} 
              renderRow={this._renderRow.bind(this)} 
              automaticallyAdjustContentInsets={false} />
        </View>
      </View>
    );
  }

  /* 列表一行，用来展示一个遥控器*/ 
  _renderRow(rowData,sectionID,rowID) {
    /*
    {"id":1,"name":"POWER","display_name":"电源"}
    */
    rowData.sectionID = sectionID;
    rowData.rowID = rowID;
    var LeftTitleStyle ;

    if(rowData.disabled ==true){
        /* 不可用状态*/
        LeftTitleStyle = styles.rightRemoterName;
    }else{
        /* 可用状态*/
        LeftTitleStyle = styles.remoterName;
    }

    return (
      <TouchableHighlight underlayColor='#C0C0C0' onPress={() => this._pressRow(rowData)} >
        <View>
          <View style={styles.remoterListRowCell}>
            <Text style={LeftTitleStyle}>{rowData.display_name}</Text>
            <Text style={styles.rightRemoterName}>{(rowData.valueName!=undefined)?(rowData.valueName):('')}</Text>
          </View>
        <View style={styles.separator}></View>
        </View>
      </TouchableHighlight>
    );



   



  }

  /* 点击一行 */
  _pressRow(rowData){
    if(rowData.disabled==true){
      return true;
    }
    console.log('rowData-----------'+JSON.stringify(rowData));
    this.setState({isShow:true,selectIndex:rowData.rowID}); 
  }


  changeSelect(){

  }
  /* 代理 事件*/
  changeAllKeys(allKeys){
    console.log('changeAllKeys-----------------'+JSON.stringify(allKeys));
    this.setState({allKeys:allKeys});
  }

  showBottomView(isShow){
    /*显示*/

      if(isShow==true){
          setTimeout(() => {
              Animated.timing(                           
                  this.state.translateY,                      
                  {
                    toValue:(screenHeight)- bootButtonViewHeight, 
                  }
              ).start();   
          }, 50);


      }else{
          /* 隐藏*/
          setTimeout(() => {
              Animated.timing(                           
                  this.state.translateY,                      
                  {
                  toValue:(screenHeight), 
                  }
              ).start(); 
          }, 50);
      }

  }

  /* 保存自动化 */
  onPressSaveButton(){


    console.log('onPressSaveButton----------------'+JSON.stringify(this.state.allKeys));

    var modelDic ={
        'mode':this.state.allKeys[1].value,
        'temperature':this.state.allKeys[0].value,
        'speed':this.state.allKeys[2].value,
      };
    var mode = (modelDic.mode!=undefined)?('M'+modelDic.mode):('');
    var temperature = (modelDic.temperature!=undefined)?('_T'+modelDic.temperature):('');
    var speed = (modelDic.speed!=undefined)?('_S'+modelDic.speed):('');
    var ac_key = mode +temperature +speed;
    console.log('ac_key------------------'+ac_key);

    var action=MHPluginSDK.extraInfo.action;
    action.deviceAbbr="红外遥控器";
    action.keyName="自定义功能";
    var params ={'keys':[ac_key]};
    action.payload.value=params;
    MHPluginSDK.finishCustomSceneSetupWithAction(action);
  }

  onPressDissmissButton(){
    this.setState({isShow:false});
  }

}

const pickerDefaultHeight = 216;
const buttonHeight = 60;
const bootButtonViewHeight =pickerDefaultHeight +buttonHeight;
const topViewHeight = 100;

var styles = StyleSheet.create({
  containerAll: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    marginTop: 0,
  },
  containerView:{
    marginTop:NavigatorBarHeight,
    height:screenHeight-NavigatorBarHeight-SafeBottomHeight,
    width:screenWidth,
  },
  remoterList:{
    marginTop:0,
    height:screenHeight-NavigatorBarHeight-SafeBottomHeight,
    width:screenWidth,
  },
  separator: {
    height: 0.5,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    marginLeft: 20,
    marginRight: 0
  },
  remoterListRowCell: {
    flexDirection: 'row',
    padding: 20,
    height: 60,
    justifyContent:'space-between',
  },
  remoterImage: {
    alignSelf: 'center',
    width: 46,
    height: 46,
  },
  remoterName: {
    fontSize: 15,
    opacity: 0.9,
    alignSelf: 'center',
    color:'#000000',
    marginLeft: 0,
  },
  rightRemoterName:{
    fontSize: 15,
    opacity: 0.9,
    alignSelf: 'center',
    color:'rgba(0,0,0,0.5)',
    marginRight:10,
  },
  bootView:{
    position:'absolute',
    width:screenWidth,
    height:bootButtonViewHeight,
    backgroundColor: '#F6F6F6',
    flexDirection:'column',
  },
  topRightContentView:{
    width:75,
    height:25,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    marginRight:-20,
    borderRadius:3,
  },
  topContentView:{
    width:screenWidth,
    marginTop:20,
    height:NavigatorBarHeight-20,
    flexDirection:'row',
    flex:1,
    backgroundColor:'rgb(246,246,246)'
  },
  bottomContentView:{
    width:screenWidth,
    height:buttonHeight,
    flexDirection:'row',
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
    backgroundColor:'rgb(246,246,246)'
  },
  leftContentView:{
    height:buttonHeight-20,
    width:screenWidth/2-20,
    borderTopLeftRadius:50,
    borderBottomLeftRadius:50,
    borderColor:'#808080',
    borderWidth:0.5,
  },
  rightContentView:{
    height:buttonHeight-20,
    width:screenWidth/2-20,
    borderTopRightRadius:50,
    borderBottomRightRadius:50,
    borderColor:'#808080',
    borderWidth:0.5,
  },
  topView:{
    height:0,
    justifyContent:'center',
    flexDirection:'row',
    backgroundColor:'rgb(246,246,246)'
  },
  topLeftView:{
    width:100,
    justifyContent:'center',
    height:NavigatorBarHeight-20,
  },
  topMiddleView:{
    marginTop:0,
    width:screenWidth-200,
    height:NavigatorBarHeight-20,
    justifyContent:'center',
    alignItems:'center',
    alignSelf:'center',
  },
  topRightView:{
    width:100,
    height:NavigatorBarHeight-20,
    justifyContent:'center',
  },
});

const KEY_OF_SCENEMAIN = 'AirBoxNextSceneMain';

// 每个页面export自己的route
var route = {
  key: KEY_OF_SCENEMAIN,
  title: '自定义场景',
  component: AirBoxNextSceneMain,
  navLeftButtonStyle: {
    tintColor:'#808080',
  },
  navTitleStyle: {
    color:'#808080',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  isNavigationBarHidden: true,
}

module.exports = {
  component: AirBoxNextSceneMain,
  route: route,
}
