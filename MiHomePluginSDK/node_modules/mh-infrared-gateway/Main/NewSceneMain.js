'use strict';

var React = require('react-native');

var {
  AppRegistry,
  StyleSheet,
  Text,
  TouchableHighlight,
  Image,
  View,
  TextInput,
  PixelRatio,
  StatusBar,
  TouchableOpacity,
  Platform,
  ListView,
  Dimensions,
  DeviceEventEmitter,
} = React;

import { NativeModules } from 'react-native';
var MHPluginSDK = NativeModules.MHPluginSDK;
var ImageButton = require('../CommonModules/ImageButton');
var MIRequestServer = require('../MainV2/MIRequestServer/MIRequestServer').MIRequestServer;
var ButtonModelFactory = require('../MainV2/ConstDefine/ButtonModelFactory').ButtonModelFactory;

var screenWidth = Dimensions.get('window').width;
var screenHeight = Dimensions.get('window').height;
const APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
const NavigatorBarHeight = (screenHeight==812)?(88):( APPBAR_HEIGHT +20);
const APP_MarginBottom =(screenHeight==812)?(34):(0);
const SafeBottomHeight =  (screenHeight==812)?(17):(0);

class NewSceneMain extends React.Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      did: MHPluginSDK.deviceId,
      model: MHPluginSDK.deviceModel,
      apiLevel: MHPluginSDK.apiLevel,
      basePath: MHPluginSDK.basePath,
      devMode: MHPluginSDK.devMode,
      requestStatus: false,
      allKeys:[],
    };
  }

  componentWillMount() {
    
    console.log('Trigger: '+JSON.stringify(MHPluginSDK.extraInfo.trigger));
    console.log('Action: '+JSON.stringify(MHPluginSDK.extraInfo.action));
    console.log('Payload: '+JSON.stringify(MHPluginSDK.extraInfo.payload));
    /*后期改成 controller_id */

    var param  = {"did": this.state.did};
    var self = this;
    // var param  = {"did":'ir.1027513560253210624'};
    MIRequestServer.Post_GetAllRemoterkey(param,
      function(response){
         
          if(response.result.keys!=undefined){
            var allKeys = response.result.keys;
            self.setState({allKeys:allKeys});
          }

      },function(error){
        self.refs.toast.showMessage(JSON.stringify(error));
      });  
  }

  componentDidMount() {
    console.log('Trigger: '+JSON.stringify(MHPluginSDK.extraInfo.trigger));
    console.log('Action: '+JSON.stringify(MHPluginSDK.extraInfo.action));
    console.log('Payload: '+JSON.stringify(MHPluginSDK.extraInfo.payload));
  }

  triggerRefreshUI() {
    var dataSource = new ListView.DataSource({rowHasChanged: (r1, r2)=>r1!==r2});
    this.state.dataSource = dataSource.cloneWithRows(this.state.allKeys);
  }

  render() {

    this.triggerRefreshUI();
    return (
      <View style={styles.containerAll} >
        <StatusBar />
        <View style={styles.containerView}>
          <ListView style={styles.remoterList} 
              enableEmptySections={true} 
              dataSource={this.state.dataSource} 
              renderRow={this._renderRow.bind(this)} 
              automaticallyAdjustContentInsets={false} />
          </View>
      </View>
    );
  }

   /* 列表一行，用来展示一个遥控器*/ 
   _renderRow(rowData,sectionID,rowID) {
    /*
          {"id":1,"name":"POWER","display_name":"电源"}
    */
    rowData.sectionID = sectionID;
    rowData.rowID = rowID;
    var imageModel =  ButtonModelFactory.GetButtonImage_WithName(rowData.name);

    return (
          <TouchableHighlight underlayColor='#C0C0C0' onPress={() => this._pressRow(rowData)} >
            <View>
              <View style={styles.remoterListRowCell}>
                <Image style={styles.remoterImage} source={{isStatic:!this.state.devMode, uri:this.state.basePath + 'MatchImage/'+imageModel.imageNormal, scale:(PixelRatio != undefined) ? PixelRatio.get() : 2.0}} />
                <Text style={styles.remoterName}>{rowData.display_name}</Text>
              </View>
            <View style={styles.separator}></View>
            </View>
          </TouchableHighlight>
    );
  }

  /* 点击一行 */
  _pressRow(rowData){
    
    var action=MHPluginSDK.extraInfo.action;
    action.deviceAbbr="红外遥控器";
    action.keyName=rowData.display_name;
    var params ={'keys':[rowData.id]};
    action.payload.value=params;
    MHPluginSDK.finishCustomSceneSetupWithAction(action);
  }

}

var styles = StyleSheet.create({
  containerAll: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    marginTop: 0,
  },
  containerView:{
    marginTop:NavigatorBarHeight,
    height:screenHeight-NavigatorBarHeight-SafeBottomHeight,
    width:screenWidth,
  },
  remoterList:{
    marginTop:0,
    height:screenHeight-NavigatorBarHeight-SafeBottomHeight,
    width:screenWidth,
  },
  separator: {
    height: 0.5,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    marginLeft: 20,
    marginRight: 20
  },
  remoterListRowCell: {
    flexDirection: 'row',
    padding: 22,
    height: 64,
  },
  remoterImage: {
    alignSelf: 'center',
    width: 46,
    height: 46,
  },
  remoterName: {
    fontSize: 15,
    opacity: 0.7,
    alignSelf: 'center',
    color:'#000000',
    marginLeft: 15,
  },
});

const KEY_OF_SCENEMAIN = 'NewSceneMain';

// 每个页面export自己的route
var route = {
  key: KEY_OF_SCENEMAIN,
  title: '自定义场景',
  component: NewSceneMain,
  navLeftButtonStyle: {
    tintColor:'#808080',
  },
  navTitleStyle: {
    color:'#808080',
  },
  navBarStyle: {
    backgroundColor:'transparent',
  },
  renderNavLeftComponent(route, navigator, index, navState) {
    return (<View style={{left:0, width:29+15*2, height:APPBAR_HEIGHT, justifyContent:'center', alignItems:'center'}}>
      <ImageButton
        source={{uri:MHPluginSDK.uriNaviBackButtonImage, scale:PixelRatio.get()}}
        onPress={() => {
          if (index === 0) {
            MHPluginSDK.finishCustomSceneSetup(MHPluginSDK.extraInfo.payload);
            MHPluginSDK.closeCurrentPage();
          } else {
            navigator.pop();
          }
        }}
        style={[{width:29, height:29, tintColor: '#000000'}, route.navLeftButtonStyle]}
      />
    </View>);
  },
  isNavigationBarHidden: false,
}

module.exports = {
  component: NewSceneMain,
  route: route,
}
